/*! For license information please see 317.main.js.LICENSE.txt */
(self.webpackChunkplutus_scaffold=self.webpackChunkplutus_scaffold||[]).push([[317],{5573:function(t,_,r){"use strict";r.r(_),r.d(_,{AlgorithmId:function(){return n.f3},BigNum:function(){return n.Wb},CBORArray:function(){return n.lz},CBORObject:function(){return n.Vd},CBORSpecial:function(){return n.Bk},CBORSpecialType:function(){return n.H0},CBORValue:function(){return n.Jz},CBORValueKind:function(){return n.T8},COSEEncrypt:function(){return n.dc},COSEEncrypt0:function(){return n.rK},COSEKey:function(){return n.VU},COSERecipient:function(){return n.XO},COSERecipients:function(){return n.Od},COSESign:function(){return n.eA},COSESign1:function(){return n.Ej},COSESign1Builder:function(){return n.DZ},COSESignBuilder:function(){return n.Yk},COSESignature:function(){return n.Rm},COSESignatures:function(){return n.Ts},CounterSignature:function(){return n.Fb},CurveType:function(){return n.v7},ECKey:function(){return n.dY},EdDSA25519Key:function(){return n.V3},HeaderMap:function(){return n.BF},Headers:function(){return n.PM},Int:function(){return n.J7},KeyOperation:function(){return n.b1},KeyType:function(){return n.Yh},Label:function(){return n.__},LabelKind:function(){return n.$E},Labels:function(){return n.Rz},PasswordEncryption:function(){return n.q$},ProtectedHeaderMap:function(){return n.UP},PubKeyEncryption:function(){return n.zS},SigContext:function(){return n.UA},SigStructure:function(){return n.ek},SignedMessage:function(){return n.uk},SignedMessageKind:function(){return n.Ww},TaggedCBOR:function(){return n.t1},__wbindgen_debug_string:function(){return n.fY},__wbindgen_object_drop_ref:function(){return n.ug},__wbindgen_rethrow:function(){return n.nD},__wbindgen_string_new:function(){return n.h4},__wbindgen_throw:function(){return n.Or}});var n=r(8263)},8263:function(t,_,r){"use strict";r.d(_,{$E:function(){return j},Ww:function(){return A},UA:function(){return E},H0:function(){return O},T8:function(){return S},f3:function(){return B},Yh:function(){return C},dY:function(){return R},v7:function(){return I},b1:function(){return U},Wb:function(){return T},lz:function(){return N},Vd:function(){return L},Bk:function(){return P},Jz:function(){return M},dc:function(){return F},rK:function(){return q},VU:function(){return D},XO:function(){return z},Od:function(){return H},eA:function(){return K},Ej:function(){return Y},DZ:function(){return $},Yk:function(){return V},Rm:function(){return W},Ts:function(){return G},Fb:function(){return Z},V3:function(){return X},BF:function(){return J},PM:function(){return Q},J7:function(){return tt},__:function(){return _t},Rz:function(){return rt},q$:function(){return nt},UP:function(){return et},zS:function(){return ot},ek:function(){return it},uk:function(){return at},t1:function(){return st},ug:function(){return ct},h4:function(){return dt},fY:function(){return pt},Or:function(){return ut},nD:function(){return lt}});var n=r(3885);const e=new Array(32).fill(void 0);function o(t){return e[t]}e.push(void 0,null,!0,!1);let i=e.length;function a(t){const _=o(t);return function(t){t<36||(e[t]=i,i=t)}(t),_}let s=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});s.decode();let c=null;function d(){return null!==c&&c.buffer===n.memory.buffer||(c=new Uint8Array(n.memory.buffer)),c}function p(t,_){return s.decode(d().subarray(t,t+_))}function u(t){const _=typeof t;if("number"==_||"boolean"==_||null==t)return`${t}`;if("string"==_)return`"${t}"`;if("symbol"==_){const _=t.description;return null==_?"Symbol":`Symbol(${_})`}if("function"==_){const _=t.name;return"string"==typeof _&&_.length>0?`Function(${_})`:"Function"}if(Array.isArray(t)){const _=t.length;let r="[";_>0&&(r+=u(t[0]));for(let n=1;n<_;n++)r+=", "+u(t[n]);return r+="]",r}const r=/\[object ([^\]]+)\]/.exec(toString.call(t));let n;if(!(r.length>1))return toString.call(t);if(n=r[1],"Object"==n)try{return"Object("+JSON.stringify(t)+")"}catch(t){return"Object"}return t instanceof Error?`${t.name}: ${t.message}\n${t.stack}`:n}let l=0,w=new TextEncoder("utf-8");const f="function"==typeof w.encodeInto?function(t,_){return w.encodeInto(t,_)}:function(t,_){const r=w.encode(t);return _.set(r),{read:t.length,written:r.length}};function h(t,_,r){if(void 0===r){const r=w.encode(t),n=_(r.length);return d().subarray(n,n+r.length).set(r),l=r.length,n}let n=t.length,e=_(n);const o=d();let i=0;for(;i<n;i++){const _=t.charCodeAt(i);if(_>127)break;o[e+i]=_}if(i!==n){0!==i&&(t=t.slice(i)),e=r(e,n,n=i+3*t.length);const _=d().subarray(e+i,e+n);i+=f(t,_).written}return l=i,e}let b=null;function g(){return null!==b&&b.buffer===n.memory.buffer||(b=new Int32Array(n.memory.buffer)),b}function y(t,_){return d().subarray(t/1,t/1+_)}function m(t,_){const r=_(1*t.length);return d().set(t,r/1),l=t.length,r}function v(t,_){if(!(t instanceof _))throw new Error(`expected instance of ${_.name}`);return t.ptr}function k(t){return null==t}let x=null;const j=Object.freeze({Int:0,0:"Int",Text:1,1:"Text"}),A=Object.freeze({COSESIGN:0,0:"COSESIGN",COSESIGN1:1,1:"COSESIGN1"}),E=Object.freeze({Signature:0,0:"Signature",Signature1:1,1:"Signature1",CounterSignature:2,2:"CounterSignature"}),O=Object.freeze({Bool:0,0:"Bool",Float:1,1:"Float",Unassigned:2,2:"Unassigned",Break:3,3:"Break",Undefined:4,4:"Undefined",Null:5,5:"Null"}),S=Object.freeze({Int:0,0:"Int",Bytes:1,1:"Bytes",Text:2,2:"Text",Array:3,3:"Array",Object:4,4:"Object",TaggedCBOR:5,5:"TaggedCBOR",Special:6,6:"Special"}),B=Object.freeze({EdDSA:0,0:"EdDSA",ChaCha20Poly1305:1,1:"ChaCha20Poly1305"}),C=Object.freeze({OKP:0,0:"OKP",EC2:1,1:"EC2",Symmetric:2,2:"Symmetric"}),R=Object.freeze({CRV:0,0:"CRV",X:1,1:"X",Y:2,2:"Y",D:3,3:"D"}),I=Object.freeze({P256:0,0:"P256",P384:1,1:"P384",P521:2,2:"P521",X25519:3,3:"X25519",X448:4,4:"X448",Ed25519:5,5:"Ed25519",Ed448:6,6:"Ed448"}),U=Object.freeze({Sign:0,0:"Sign",Verify:1,1:"Verify",Encrypt:2,2:"Encrypt",Decrypt:3,3:"Decrypt",WrapKey:4,4:"WrapKey",UnwrapKey:5,5:"UnwrapKey",DeriveKey:6,6:"DeriveKey",DeriveBits:7,7:"DeriveBits"});class T{static __wrap(t){const _=Object.create(T.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bignum_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.bignum_from_bytes(_,r);return T.__wrap(e)}static from_str(t){var _=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l,e=n.bignum_from_str(_,r);return T.__wrap(e)}to_str(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_str(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}checked_mul(t){v(t,T);var _=n.bignum_checked_mul(this.ptr,t.ptr);return T.__wrap(_)}checked_add(t){v(t,T);var _=n.bignum_checked_add(this.ptr,t.ptr);return T.__wrap(_)}checked_sub(t){v(t,T);var _=n.bignum_checked_sub(this.ptr,t.ptr);return T.__wrap(_)}}class N{static __wrap(t){const _=Object.create(N.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cborarray_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cborarray_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cborarray_from_bytes(_,r);return N.__wrap(e)}static new(){var t=n.cborarray_new();return N.__wrap(t)}len(){return n.cborarray_len(this.ptr)>>>0}get(t){var _=n.cborarray_get(this.ptr,t);return M.__wrap(_)}add(t){v(t,M),n.cborarray_add(this.ptr,t.ptr)}set_definite_encoding(t){n.cborarray_set_definite_encoding(this.ptr,t)}is_definite(){return 0!==n.cborarray_is_definite(this.ptr)}}class L{static __wrap(t){const _=Object.create(L.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cborobject_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cborobject_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cborobject_from_bytes(_,r);return L.__wrap(e)}static new(){var t=n.cborobject_new();return L.__wrap(t)}len(){return n.cborobject_len(this.ptr)>>>0}insert(t,_){v(t,M),v(_,M);var r=n.cborobject_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:M.__wrap(r)}get(t){v(t,M);var _=n.cborobject_get(this.ptr,t.ptr);return 0===_?void 0:M.__wrap(_)}keys(){var t=n.cborobject_keys(this.ptr);return N.__wrap(t)}set_definite_encoding(t){n.cborobject_set_definite_encoding(this.ptr,t)}is_definite(){return 0!==n.cborobject_is_definite(this.ptr)}}class P{static __wrap(t){const _=Object.create(P.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cborspecial_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cborspecial_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cborspecial_from_bytes(_,r);return P.__wrap(e)}static new_bool(t){var _=n.cborspecial_new_bool(t);return P.__wrap(_)}static new_unassigned(t){var _=n.cborspecial_new_unassigned(t);return P.__wrap(_)}static new_break(){var t=n.cborspecial_new_break();return P.__wrap(t)}static new_null(){var t=n.cborspecial_new_null();return P.__wrap(t)}static new_undefined(){var t=n.cborspecial_new_undefined();return P.__wrap(t)}kind(){return n.cborspecial_kind(this.ptr)>>>0}as_bool(){var t=n.cborspecial_as_bool(this.ptr);return 16777215===t?void 0:0!==t}as_float(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.cborspecial_as_float(r,this.ptr);var t=g()[r/4+0],_=(null!==x&&x.buffer===n.memory.buffer||(x=new Float64Array(n.memory.buffer)),x)[r/8+1];return 0===t?void 0:_}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_unassigned(){var t=n.cborspecial_as_unassigned(this.ptr);return 16777215===t?void 0:t}}class M{static __wrap(t){const _=Object.create(M.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cborvalue_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cborvalue_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cborvalue_from_bytes(_,r);return M.__wrap(e)}static new_int(t){v(t,tt);var _=n.cborvalue_new_int(t.ptr);return M.__wrap(_)}static new_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cborvalue_new_bytes(_,r);return M.__wrap(e)}static new_text(t){var _=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l,e=n.cborvalue_new_text(_,r);return M.__wrap(e)}static new_array(t){v(t,N);var _=n.cborvalue_new_array(t.ptr);return M.__wrap(_)}static new_object(t){v(t,L);var _=n.cborvalue_new_object(t.ptr);return M.__wrap(_)}static new_tagged(t){v(t,st);var _=n.cborvalue_new_tagged(t.ptr);return M.__wrap(_)}static new_special(t){v(t,P);var _=n.cborvalue_new_special(t.ptr);return M.__wrap(_)}static from_label(t){v(t,_t);var _=n.cborvalue_from_label(t.ptr);return M.__wrap(_)}kind(){return n.cborvalue_kind(this.ptr)>>>0}as_int(){var t=n.cborvalue_as_int(this.ptr);return 0===t?void 0:tt.__wrap(t)}as_bytes(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.cborvalue_as_bytes(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_text(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.cborvalue_as_text(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=p(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_array(){var t=n.cborvalue_as_array(this.ptr);return 0===t?void 0:N.__wrap(t)}as_object(){var t=n.cborvalue_as_object(this.ptr);return 0===t?void 0:L.__wrap(t)}as_tagged(){var t=n.cborvalue_as_tagged(this.ptr);return 0===t?void 0:st.__wrap(t)}as_special(){var t=n.cborvalue_as_special(this.ptr);return 0===t?void 0:P.__wrap(t)}}class F{static __wrap(t){const _=Object.create(F.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_coseencrypt_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.coseencrypt_from_bytes(_,r);return F.__wrap(e)}headers(){var t=n.coseencrypt0_headers(this.ptr);return Q.__wrap(t)}ciphertext(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt0_ciphertext(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}recipients(){var t=n.coseencrypt_recipients(this.ptr);return H.__wrap(t)}static new(t,_,r){v(t,Q);var e=k(_)?0:m(_,n.__wbindgen_malloc),o=l;v(r,H);var i=n.coseencrypt_new(t.ptr,e,o,r.ptr);return F.__wrap(i)}}class q{static __wrap(t){const _=Object.create(q.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_coseencrypt0_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt0_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.coseencrypt0_from_bytes(_,r);return q.__wrap(e)}headers(){var t=n.coseencrypt0_headers(this.ptr);return Q.__wrap(t)}ciphertext(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt0_ciphertext(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){v(t,Q);var r=k(_)?0:m(_,n.__wbindgen_malloc),e=l,o=n.coseencrypt0_new(t.ptr,r,e);return q.__wrap(o)}}class D{static __wrap(t){const _=Object.create(D.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosekey_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosekey_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cosekey_from_bytes(_,r);return D.__wrap(e)}set_key_type(t){v(t,_t),n.cosekey_set_key_type(this.ptr,t.ptr)}key_type(){var t=n.cosekey_key_type(this.ptr);return _t.__wrap(t)}set_key_id(t){var _=m(t,n.__wbindgen_malloc),r=l;n.cosekey_set_key_id(this.ptr,_,r)}key_id(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.cosekey_key_id(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_algorithm_id(t){v(t,_t),n.cosekey_set_algorithm_id(this.ptr,t.ptr)}algorithm_id(){var t=n.cosekey_algorithm_id(this.ptr);return 0===t?void 0:_t.__wrap(t)}set_key_ops(t){v(t,rt),n.cosekey_set_key_ops(this.ptr,t.ptr)}key_ops(){var t=n.cosekey_key_ops(this.ptr);return 0===t?void 0:rt.__wrap(t)}set_base_init_vector(t){var _=m(t,n.__wbindgen_malloc),r=l;n.cosekey_set_base_init_vector(this.ptr,_,r)}base_init_vector(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.cosekey_base_init_vector(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}header(t){v(t,_t);var _=n.cosekey_header(this.ptr,t.ptr);return 0===_?void 0:M.__wrap(_)}set_header(t,_){v(t,_t),v(_,M),n.cosekey_set_header(this.ptr,t.ptr,_.ptr)}static new(t){v(t,_t);var _=n.cosekey_new(t.ptr);return D.__wrap(_)}}class z{static __wrap(t){const _=Object.create(z.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_coserecipient_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.coserecipient_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.coserecipient_from_bytes(_,r);return z.__wrap(e)}headers(){var t=n.coseencrypt0_headers(this.ptr);return Q.__wrap(t)}ciphertext(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt0_ciphertext(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){v(t,Q);var r=k(_)?0:m(_,n.__wbindgen_malloc),e=l,o=n.coseencrypt0_new(t.ptr,r,e);return z.__wrap(o)}}class H{static __wrap(t){const _=Object.create(H.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_coserecipients_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.coserecipients_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.coserecipients_from_bytes(_,r);return H.__wrap(e)}static new(){var t=n.coserecipients_new();return H.__wrap(t)}len(){return n.coserecipients_len(this.ptr)>>>0}get(t){var _=n.coserecipients_get(this.ptr,t);return z.__wrap(_)}add(t){v(t,z),n.coserecipients_add(this.ptr,t.ptr)}}class K{static __wrap(t){const _=Object.create(K.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosesign_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosesign_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cosesign_from_bytes(_,r);return K.__wrap(e)}headers(){var t=n.coseencrypt0_headers(this.ptr);return Q.__wrap(t)}payload(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt0_ciphertext(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}signatures(){var t=n.cosesign_signatures(this.ptr);return G.__wrap(t)}static new(t,_,r){v(t,Q);var e=k(_)?0:m(_,n.__wbindgen_malloc),o=l;v(r,G);var i=n.cosesign_new(t.ptr,e,o,r.ptr);return K.__wrap(i)}}class Y{static __wrap(t){const _=Object.create(Y.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosesign1_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosesign1_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cosesign1_from_bytes(_,r);return Y.__wrap(e)}headers(){var t=n.coseencrypt0_headers(this.ptr);return Q.__wrap(t)}payload(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.coseencrypt0_ciphertext(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}signature(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosesign1_signature(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}signed_data(t,_){var r=k(t)?0:m(t,n.__wbindgen_malloc),e=l,o=k(_)?0:m(_,n.__wbindgen_malloc),i=l,a=n.cosesign1_signed_data(this.ptr,r,e,o,i);return it.__wrap(a)}static new(t,_,r){v(t,Q);var e=k(_)?0:m(_,n.__wbindgen_malloc),o=l,i=m(r,n.__wbindgen_malloc),a=l,s=n.cosesign1_new(t.ptr,e,o,i,a);return Y.__wrap(s)}}class ${static __wrap(t){const _=Object.create($.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosesign1builder_free(t)}static new(t,_,r){v(t,Q);var e=m(_,n.__wbindgen_malloc),o=l,i=n.cosesign1builder_new(t.ptr,e,o,r);return $.__wrap(i)}hash_payload(){n.cosesign1builder_hash_payload(this.ptr)}set_external_aad(t){var _=m(t,n.__wbindgen_malloc),r=l;n.cosesign1builder_set_external_aad(this.ptr,_,r)}make_data_to_sign(){var t=n.cosesign1builder_make_data_to_sign(this.ptr);return it.__wrap(t)}build(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cosesign1builder_build(this.ptr,_,r);return Y.__wrap(e)}}class V{static __wrap(t){const _=Object.create(V.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosesignbuilder_free(t)}static new(t,_,r){v(t,Q);var e=m(_,n.__wbindgen_malloc),o=l,i=n.cosesignbuilder_new(t.ptr,e,o,r);return V.__wrap(i)}hash_payload(){n.cosesign1builder_hash_payload(this.ptr)}set_external_aad(t){var _=m(t,n.__wbindgen_malloc),r=l;n.cosesign1builder_set_external_aad(this.ptr,_,r)}make_data_to_sign(){var t=n.cosesignbuilder_make_data_to_sign(this.ptr);return it.__wrap(t)}build(t){v(t,G);var _=n.cosesignbuilder_build(this.ptr,t.ptr);return K.__wrap(_)}}class W{static __wrap(t){const _=Object.create(W.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosesignature_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosesignature_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cosesignature_from_bytes(_,r);return W.__wrap(e)}headers(){var t=n.coseencrypt0_headers(this.ptr);return Q.__wrap(t)}signature(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosesignature_signature(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){v(t,Q);var r=m(_,n.__wbindgen_malloc),e=l,o=n.cosesignature_new(t.ptr,r,e);return W.__wrap(o)}}class G{static __wrap(t){const _=Object.create(G.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_cosesignatures_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.cosesignatures_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.cosesignatures_from_bytes(_,r);return G.__wrap(e)}static new(){var t=n.coserecipients_new();return G.__wrap(t)}len(){return n.coserecipients_len(this.ptr)>>>0}get(t){var _=n.cosesignatures_get(this.ptr,t);return W.__wrap(_)}add(t){v(t,W),n.cosesignatures_add(this.ptr,t.ptr)}}class Z{static __wrap(t){const _=Object.create(Z.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_countersignature_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.countersignature_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.countersignature_from_bytes(_,r);return Z.__wrap(e)}static new_single(t){v(t,W);var _=n.countersignature_new_single(t.ptr);return Z.__wrap(_)}static new_multi(t){v(t,G);var _=n.countersignature_new_multi(t.ptr);return Z.__wrap(_)}signatures(){var t=n.countersignature_signatures(this.ptr);return G.__wrap(t)}}class X{static __wrap(t){const _=Object.create(X.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_eddsa25519key_free(t)}static new(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.eddsa25519key_new(_,r);return X.__wrap(e)}set_private_key(t){var _=m(t,n.__wbindgen_malloc),r=l;n.eddsa25519key_set_private_key(this.ptr,_,r)}is_for_signing(){n.eddsa25519key_is_for_signing(this.ptr)}is_for_verifying(){n.eddsa25519key_is_for_verifying(this.ptr)}build(){var t=n.eddsa25519key_build(this.ptr);return D.__wrap(t)}}class J{static __wrap(t){const _=Object.create(J.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_headermap_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.headermap_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.headermap_from_bytes(_,r);return J.__wrap(e)}set_algorithm_id(t){v(t,_t),n.headermap_set_algorithm_id(this.ptr,t.ptr)}algorithm_id(){var t=n.headermap_algorithm_id(this.ptr);return 0===t?void 0:_t.__wrap(t)}set_criticality(t){v(t,rt),n.headermap_set_criticality(this.ptr,t.ptr)}criticality(){var t=n.headermap_criticality(this.ptr);return 0===t?void 0:rt.__wrap(t)}set_content_type(t){v(t,_t),n.cosekey_set_algorithm_id(this.ptr,t.ptr)}content_type(){var t=n.cosekey_algorithm_id(this.ptr);return 0===t?void 0:_t.__wrap(t)}set_key_id(t){var _=m(t,n.__wbindgen_malloc),r=l;n.headermap_set_key_id(this.ptr,_,r)}key_id(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.headermap_key_id(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_init_vector(t){var _=m(t,n.__wbindgen_malloc),r=l;n.cosekey_set_base_init_vector(this.ptr,_,r)}init_vector(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.cosekey_base_init_vector(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_partial_init_vector(t){var _=m(t,n.__wbindgen_malloc),r=l;n.headermap_set_partial_init_vector(this.ptr,_,r)}partial_init_vector(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.headermap_partial_init_vector(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=y(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_counter_signature(t){v(t,Z),n.headermap_set_counter_signature(this.ptr,t.ptr)}counter_signature(){var t=n.headermap_counter_signature(this.ptr);return 0===t?void 0:Z.__wrap(t)}header(t){v(t,_t);var _=n.headermap_header(this.ptr,t.ptr);return 0===_?void 0:M.__wrap(_)}set_header(t,_){v(t,_t),v(_,M),n.headermap_set_header(this.ptr,t.ptr,_.ptr)}keys(){var t=n.headermap_keys(this.ptr);return rt.__wrap(t)}static new(){var t=n.headermap_new();return J.__wrap(t)}}class Q{static __wrap(t){const _=Object.create(Q.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_headers_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.headers_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.headers_from_bytes(_,r);return Q.__wrap(e)}protected(){var t=n.headers_protected(this.ptr);return et.__wrap(t)}unprotected(){var t=n.headers_unprotected(this.ptr);return J.__wrap(t)}static new(t,_){v(t,et),v(_,J);var r=n.headers_new(t.ptr,_.ptr);return Q.__wrap(r)}}class tt{static __wrap(t){const _=Object.create(tt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_int_free(t)}static new(t){v(t,T);var _=t.ptr;t.ptr=0;var r=n.int_new(_);return tt.__wrap(r)}static new_negative(t){v(t,T);var _=t.ptr;t.ptr=0;var r=n.int_new_negative(_);return tt.__wrap(r)}static new_i32(t){var _=n.int_new_i32(t);return tt.__wrap(_)}is_positive(){return 0!==n.int_is_positive(this.ptr)}as_positive(){var t=n.int_as_positive(this.ptr);return 0===t?void 0:T.__wrap(t)}as_negative(){var t=n.int_as_negative(this.ptr);return 0===t?void 0:T.__wrap(t)}as_i32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_as_i32(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];return 0===t?void 0:_}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class _t{static __wrap(t){const _=Object.create(_t.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_label_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.label_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.label_from_bytes(_,r);return _t.__wrap(e)}static new_int(t){v(t,tt);var _=n.label_new_int(t.ptr);return _t.__wrap(_)}static new_text(t){var _=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l,e=n.label_new_text(_,r);return _t.__wrap(e)}kind(){return n.label_kind(this.ptr)>>>0}as_int(){var t=n.label_as_int(this.ptr);return 0===t?void 0:tt.__wrap(t)}as_text(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.label_as_text(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];let e;return 0!==t&&(e=p(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_algorithm_id(t){var _=n.label_from_algorithm_id(t);return _t.__wrap(_)}static from_key_type(t){var _=n.label_from_key_type(t);return _t.__wrap(_)}static from_ec_key(t){var _=n.label_from_ec_key(t);return _t.__wrap(_)}static from_curve_type(t){var _=n.label_from_curve_type(t);return _t.__wrap(_)}static from_key_operation(t){var _=n.label_from_key_operation(t);return _t.__wrap(_)}}class rt{static __wrap(t){const _=Object.create(rt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_labels_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.labels_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.labels_from_bytes(_,r);return rt.__wrap(e)}static new(){var t=n.coserecipients_new();return rt.__wrap(t)}len(){return n.coserecipients_len(this.ptr)>>>0}get(t){var _=n.labels_get(this.ptr,t);return _t.__wrap(_)}add(t){v(t,_t),n.labels_add(this.ptr,t.ptr)}}class nt{static __wrap(t){const _=Object.create(nt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_passwordencryption_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.passwordencryption_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.passwordencryption_from_bytes(_,r);return nt.__wrap(e)}static new(t){v(t,q);var _=n.passwordencryption_new(t.ptr);return nt.__wrap(_)}}class et{static __wrap(t){const _=Object.create(et.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_protectedheadermap_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.protectedheadermap_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.protectedheadermap_from_bytes(_,r);return et.__wrap(e)}static new_empty(){var t=n.protectedheadermap_new_empty();return et.__wrap(t)}static new(t){v(t,J);var _=n.protectedheadermap_new(t.ptr);return et.__wrap(_)}deserialized_headers(){var t=n.protectedheadermap_deserialized_headers(this.ptr);return J.__wrap(t)}}class ot{static __wrap(t){const _=Object.create(ot.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_pubkeyencryption_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.pubkeyencryption_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.pubkeyencryption_from_bytes(_,r);return ot.__wrap(e)}static new(t){v(t,F);var _=n.pubkeyencryption_new(t.ptr);return ot.__wrap(_)}}class it{static __wrap(t){const _=Object.create(it.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_sigstructure_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.sigstructure_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.sigstructure_from_bytes(_,r);return it.__wrap(e)}context(){return n.sigstructure_context(this.ptr)>>>0}body_protected(){var t=n.sigstructure_body_protected(this.ptr);return et.__wrap(t)}sign_protected(){var t=n.sigstructure_sign_protected(this.ptr);return 0===t?void 0:et.__wrap(t)}external_aad(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.sigstructure_external_aad(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}payload(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.sigstructure_payload(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_sign_protected(t){v(t,et),n.sigstructure_set_sign_protected(this.ptr,t.ptr)}static new(t,_,r,e){v(_,et);var o=m(r,n.__wbindgen_malloc),i=l,a=m(e,n.__wbindgen_malloc),s=l,c=n.sigstructure_new(t,_.ptr,o,i,a,s);return it.__wrap(c)}}class at{static __wrap(t){const _=Object.create(at.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_signedmessage_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.signedmessage_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.signedmessage_from_bytes(_,r);return at.__wrap(e)}static new_cose_sign(t){v(t,K);var _=n.signedmessage_new_cose_sign(t.ptr);return at.__wrap(_)}static new_cose_sign1(t){v(t,Y);var _=n.signedmessage_new_cose_sign1(t.ptr);return at.__wrap(_)}static from_user_facing_encoding(t){var _=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l,e=n.signedmessage_from_user_facing_encoding(_,r);return at.__wrap(e)}to_user_facing_encoding(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.signedmessage_to_user_facing_encoding(r,this.ptr);var t=g()[r/4+0],_=g()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}kind(){return n.signedmessage_kind(this.ptr)>>>0}as_cose_sign(){var t=n.signedmessage_as_cose_sign(this.ptr);return 0===t?void 0:K.__wrap(t)}as_cose_sign1(){var t=n.signedmessage_as_cose_sign1(this.ptr);return 0===t?void 0:Y.__wrap(t)}}class st{static __wrap(t){const _=Object.create(st.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_taggedcbor_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.taggedcbor_to_bytes(e,this.ptr);var t=g()[e/4+0],_=g()[e/4+1],r=y(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){var _=m(t,n.__wbindgen_malloc),r=l,e=n.taggedcbor_from_bytes(_,r);return st.__wrap(e)}tag(){var t=n.taggedcbor_tag(this.ptr);return T.__wrap(t)}value(){var t=n.taggedcbor_value(this.ptr);return M.__wrap(t)}static new(t,_){v(t,T);var r=t.ptr;t.ptr=0,v(_,M);var e=n.taggedcbor_new(r,_.ptr);return st.__wrap(e)}}function ct(t){a(t)}function dt(t,_){return function(t){i===e.length&&e.push(e.length+1);const _=i;return i=e[_],e[_]=t,_}(p(t,_))}function pt(t,_){var r=h(u(o(_)),n.__wbindgen_malloc,n.__wbindgen_realloc),e=l;g()[t/4+1]=e,g()[t/4+0]=r}function ut(t,_){throw new Error(p(t,_))}function lt(t){throw a(t)}},4351:function(t,_,r){"use strict";r.r(_),r.d(_,{Address:function(){return n.kLt},AssetName:function(){return n.JfL},AssetNames:function(){return n.Tbl},Assets:function(){return n.deM},AuxiliaryData:function(){return n.TOz},AuxiliaryDataHash:function(){return n.c1W},AuxiliaryDataSet:function(){return n.HRv},BaseAddress:function(){return n.pv},BigInt:function(){return n.tkx},BigNum:function(){return n.WbW},Bip32PrivateKey:function(){return n.BSq},Bip32PublicKey:function(){return n.JFy},Block:function(){return n.gOu},BlockHash:function(){return n.Q63},BootstrapWitness:function(){return n.zvN},BootstrapWitnesses:function(){return n.lcw},ByronAddress:function(){return n.jZ5},Certificate:function(){return n.KBB},CertificateKind:function(){return n.Z96},Certificates:function(){return n.wAL},CoinSelectionStrategyCIP2:function(){return n.Bj5},ConstrPlutusData:function(){return n.LvZ},CostModel:function(){return n.aNQ},Costmdls:function(){return n.oCb},DNSRecordAorAAAA:function(){return n.KcK},DNSRecordSRV:function(){return n.vRL},DataCost:function(){return n.SKh},DataHash:function(){return n.y0L},DatumSource:function(){return n.pkQ},Ed25519KeyHash:function(){return n._Wl},Ed25519KeyHashes:function(){return n.YLW},Ed25519Signature:function(){return n.AoU},EnterpriseAddress:function(){return n.Z0E},ExUnitPrices:function(){return n.wJb},ExUnits:function(){return n.Yw6},GeneralTransactionMetadata:function(){return n.y2O},GenesisDelegateHash:function(){return n.r26},GenesisHash:function(){return n.Gyx},GenesisHashes:function(){return n.JSu},GenesisKeyDelegation:function(){return n.GC9},Header:function(){return n.h4i},HeaderBody:function(){return n.Q4I},InputWithScriptWitness:function(){return n.M1S},InputsWithScriptWitness:function(){return n.tAR},Int:function(){return n.J7n},Ipv4:function(){return n.sE},Ipv6:function(){return n.UfF},KESSignature:function(){return n.w5E},KESVKey:function(){return n.CpY},Language:function(){return n.SQ0},LanguageKind:function(){return n.$PN},Languages:function(){return n.lIE},LegacyDaedalusPrivateKey:function(){return n.XeG},LinearFee:function(){return n.H8G},MIRKind:function(){return n.pWD},MIRPot:function(){return n.pj},MIRToStakeCredentials:function(){return n.Y9},MetadataJsonSchema:function(){return n.Qe3},MetadataList:function(){return n.aKO},MetadataMap:function(){return n.RoI},Mint:function(){return n.y1},MintAssets:function(){return n.Vq6},MintBuilder:function(){return n.GSA},MintWitness:function(){return n.meD},MintsAssets:function(){return n.Isp},MoveInstantaneousReward:function(){return n.ZkT},MoveInstantaneousRewardsCert:function(){return n.v$C},MultiAsset:function(){return n.MLF},MultiHostName:function(){return n.Ado},NativeScript:function(){return n.$xJ},NativeScriptKind:function(){return n.Awt},NativeScripts:function(){return n.a5u},NetworkId:function(){return n.B9l},NetworkIdKind:function(){return n.rff},NetworkInfo:function(){return n.JlX},Nonce:function(){return n.pXc},OperationalCert:function(){return n.QBC},PlutusData:function(){return n.$zK},PlutusDataKind:function(){return n.WDl},PlutusDatumSchema:function(){return n.moL},PlutusList:function(){return n.hSQ},PlutusMap:function(){return n.FRj},PlutusScript:function(){return n.qPp},PlutusScriptSource:function(){return n.cvt},PlutusScripts:function(){return n.bdP},PlutusWitness:function(){return n.Vb3},PlutusWitnesses:function(){return n.sKh},Pointer:function(){return n.gbg},PointerAddress:function(){return n.gdK},PoolMetadata:function(){return n.y4p},PoolMetadataHash:function(){return n.kYo},PoolParams:function(){return n.Wuc},PoolRegistration:function(){return n.M0e},PoolRetirement:function(){return n.UtT},PrivateKey:function(){return n._q4},ProposedProtocolParameterUpdates:function(){return n.HIc},ProtocolParamUpdate:function(){return n.qdJ},ProtocolVersion:function(){return n.Qeo},PublicKey:function(){return n.nhX},PublicKeys:function(){return n.prR},Redeemer:function(){return n.OJH},RedeemerTag:function(){return n.QSL},RedeemerTagKind:function(){return n.abK},Redeemers:function(){return n.F5E},Relay:function(){return n.ZD6},RelayKind:function(){return n.dp1},Relays:function(){return n.FQ9},RewardAddress:function(){return n.mf5},RewardAddresses:function(){return n.SYV},ScriptAll:function(){return n._6O},ScriptAny:function(){return n.f_G},ScriptDataHash:function(){return n.uZr},ScriptHash:function(){return n.nJe},ScriptHashNamespace:function(){return n.Mnn},ScriptHashes:function(){return n.kB},ScriptNOfK:function(){return n.eBP},ScriptPubkey:function(){return n.EuU},ScriptRef:function(){return n.EQY},ScriptSchema:function(){return n.$9y},SingleHostAddr:function(){return n.hAB},SingleHostName:function(){return n.efI},StakeCredKind:function(){return n.V9C},StakeCredential:function(){return n.qop},StakeCredentials:function(){return n.hP7},StakeDelegation:function(){return n.YhN},StakeDeregistration:function(){return n.CFw},StakeRegistration:function(){return n.XNw},Strings:function(){return n.eI0},TimelockExpiry:function(){return n.Gwp},TimelockStart:function(){return n.Yx7},Transaction:function(){return n.YW8},TransactionBatch:function(){return n.kFt},TransactionBatchList:function(){return n.ldW},TransactionBodies:function(){return n.HlM},TransactionBody:function(){return n.r$i},TransactionBuilder:function(){return n.hKc},TransactionBuilderConfig:function(){return n.PzD},TransactionBuilderConfigBuilder:function(){return n.szC},TransactionHash:function(){return n.wf_},TransactionInput:function(){return n.XRW},TransactionInputs:function(){return n.TGD},TransactionMetadatum:function(){return n.T01},TransactionMetadatumKind:function(){return n.jUN},TransactionMetadatumLabels:function(){return n.dxt},TransactionOutput:function(){return n.HZd},TransactionOutputAmountBuilder:function(){return n.AOx},TransactionOutputBuilder:function(){return n.eVX},TransactionOutputs:function(){return n.YyL},TransactionUnspentOutput:function(){return n.ZAD},TransactionUnspentOutputs:function(){return n.dV5},TransactionWitnessSet:function(){return n.XgB},TransactionWitnessSets:function(){return n.jmH},TxBuilderConstants:function(){return n.E8},TxInputsBuilder:function(){return n.xFq},URL:function(){return n.Jx4},UnitInterval:function(){return n.rwR},Update:function(){return n.BNo},VRFCert:function(){return n.Nn},VRFKeyHash:function(){return n.$LP},VRFVKey:function(){return n.uHB},Value:function(){return n.B4R},Vkey:function(){return n.stS},Vkeys:function(){return n.qte},Vkeywitness:function(){return n.AF1},Vkeywitnesses:function(){return n.VLl},Withdrawals:function(){return n.fjg},__wbg_String_91fba7ded13ba54c:function(){return n.RVh},__wbg_buffer_3f3d764d4747d564:function(){return n.jpb},__wbg_call_168da88779e35f61:function(){return n.VDL},__wbg_call_97ae9d8645dc388b:function(){return n.Niw},__wbg_call_eae29933372a39be:function(){return n.UZK},__wbg_crypto_e1d53a1d73fb10b8:function(){return n.Nko},__wbg_crypto_e95a6e54c5c2e37f:function(){return n.yfN},__wbg_getRandomValues_02639197c8166a96:function(){return n.ZU4},__wbg_getRandomValues_805f1c3d65988a5a:function(){return n.eaI},__wbg_getRandomValues_dc67302a7bd1aec5:function(){return n.j8U},__wbg_globalThis_7f206bda628d5286:function(){return n.$Li},__wbg_global_ba75c50d1cf384f4:function(){return n.wJ_},__wbg_length_9e1ae1900cb0fbd5:function(){return n.bjU},__wbg_msCrypto_6e7d3e1f92610cbb:function(){return n.crw},__wbg_new_0b9bfdd97583284e:function(){return n.uB_},__wbg_new_1d9a920c6bfc44a8:function(){return n.BF4},__wbg_new_268f7b7dd3430798:function(){return n.Add},__wbg_new_8c3f0052272a457a:function(){return n.lBI},__wbg_new_d87f272aec784ec0:function(){return n.neC},__wbg_newnoargs_b5b063fc6c2f0376:function(){return n.gWb},__wbg_newwithlength_f5933855e4f48a19:function(){return n.ibT},__wbg_node_080f4b19d15bc1fe:function(){return n.f5q},__wbg_process_038c26bf42b093f8:function(){return n.DIc},__wbg_randomFillSync_6894564c2c334c42:function(){return n.exY},__wbg_randomFillSync_dd2297de5917c74e:function(){return n.SaM},__wbg_require_0993fe224bf8e202:function(){return n.dVC},__wbg_require_78a3dcfbdba9cbce:function(){return n.goM},__wbg_self_6d479506f72c6a71:function(){return n.yBo},__wbg_self_e0b3266d2d9eba1a:function(){return n.NRn},__wbg_set_20cbc34131e76824:function(){return n.Wl7},__wbg_set_83db9690f9353e79:function(){return n.fP1},__wbg_set_933729cf5b66ac11:function(){return n.EWt},__wbg_set_a68214f35c417fa9:function(){return n.WAd},__wbg_subarray_58ad4efbb5bcb886:function(){return n.kHX},__wbg_versions_ab37218d2f0b24a8:function(){return n.QT3},__wbg_window_f2557cc78490aceb:function(){return n.Sne},__wbindgen_debug_string:function(){return n.fYP},__wbindgen_error_new:function(){return n.hdV},__wbindgen_is_function:function(){return n.o$X},__wbindgen_is_object:function(){return n.WlW},__wbindgen_is_string:function(){return n.eYF},__wbindgen_is_undefined:function(){return n.XP4},__wbindgen_jsval_eq:function(){return n.YqC},__wbindgen_memory:function(){return n.oHO},__wbindgen_number_new:function(){return n.pT7},__wbindgen_object_clone_ref:function(){return n.m_1},__wbindgen_object_drop_ref:function(){return n.ug$},__wbindgen_string_get:function(){return n.qtq},__wbindgen_string_new:function(){return n.h4u},__wbindgen_throw:function(){return n.Or8},calculate_ex_units_ceil_cost:function(){return n.EH0},create_send_all:function(){return n.gfc},decode_arbitrary_bytes_from_metadatum:function(){return n.gw7},decode_metadatum_to_json_str:function(){return n.rQY},decode_plutus_datum_to_json_str:function(){return n.H10},decrypt_with_password:function(){return n._Kj},encode_arbitrary_bytes_as_metadatum:function(){return n.JTq},encode_json_str_to_metadatum:function(){return n.soC},encode_json_str_to_native_script:function(){return n.YVv},encode_json_str_to_plutus_datum:function(){return n.TL3},encrypt_with_password:function(){return n.uXl},get_deposit:function(){return n.fgc},get_implicit_input:function(){return n._P3},hash_auxiliary_data:function(){return n.ZIS},hash_plutus_data:function(){return n.SZC},hash_script_data:function(){return n.e$S},hash_transaction:function(){return n.o28},make_daedalus_bootstrap_witness:function(){return n.arV},make_icarus_bootstrap_witness:function(){return n.DKW},make_vkey_witness:function(){return n.i4D},min_ada_for_output:function(){return n.Dot},min_ada_required:function(){return n.Ajc},min_fee:function(){return n.QP_},min_script_fee:function(){return n.Rdl}});var n=r(7019)},7019:function(t,_,r){"use strict";r.d(_,{JTq:function(){return O},gw7:function(){return S},soC:function(){return B},rQY:function(){return C},TL3:function(){return R},H10:function(){return I},QP_:function(){return U},EH0:function(){return T},Rdl:function(){return N},uXl:function(){return L},_Kj:function(){return P},gfc:function(){return M},arV:function(){return F},DKW:function(){return q},i4D:function(){return D},ZIS:function(){return z},o28:function(){return H},SZC:function(){return K},e$S:function(){return Y},_P3:function(){return $},fgc:function(){return V},Dot:function(){return W},Ajc:function(){return G},YVv:function(){return Z},Z96:function(){return J},pj:function(){return Q},pWD:function(){return tt},dp1:function(){return _t},Awt:function(){return rt},Mnn:function(){return nt},rff:function(){return et},jUN:function(){return ot},Qe3:function(){return it},$PN:function(){return at},WDl:function(){return st},abK:function(){return ct},moL:function(){return dt},Bj5:function(){return pt},V9C:function(){return ut},$9y:function(){return lt},kLt:function(){return wt},JfL:function(){return ft},Tbl:function(){return ht},deM:function(){return bt},TOz:function(){return gt},c1W:function(){return yt},HRv:function(){return mt},pv:function(){return vt},tkx:function(){return kt},WbW:function(){return xt},BSq:function(){return jt},JFy:function(){return At},gOu:function(){return Et},Q63:function(){return Ot},zvN:function(){return St},lcw:function(){return Bt},jZ5:function(){return Ct},KBB:function(){return Rt},wAL:function(){return It},LvZ:function(){return Ut},aNQ:function(){return Tt},oCb:function(){return Nt},KcK:function(){return Lt},vRL:function(){return Pt},SKh:function(){return Mt},y0L:function(){return Ft},pkQ:function(){return qt},_Wl:function(){return Dt},YLW:function(){return zt},AoU:function(){return Ht},Z0E:function(){return Kt},wJb:function(){return Yt},Yw6:function(){return $t},y2O:function(){return Vt},r26:function(){return Wt},Gyx:function(){return Gt},JSu:function(){return Zt},GC9:function(){return Xt},h4i:function(){return Jt},Q4I:function(){return Qt},M1S:function(){return t_},tAR:function(){return __},J7n:function(){return r_},sE:function(){return n_},UfF:function(){return e_},w5E:function(){return o_},CpY:function(){return i_},SQ0:function(){return a_},lIE:function(){return s_},XeG:function(){return c_},H8G:function(){return d_},Y9:function(){return p_},aKO:function(){return u_},RoI:function(){return l_},y1:function(){return w_},Vq6:function(){return f_},GSA:function(){return h_},meD:function(){return b_},Isp:function(){return g_},ZkT:function(){return y_},v$C:function(){return m_},MLF:function(){return v_},Ado:function(){return k_},$xJ:function(){return x_},a5u:function(){return j_},B9l:function(){return A_},JlX:function(){return E_},pXc:function(){return O_},QBC:function(){return S_},$zK:function(){return B_},hSQ:function(){return C_},FRj:function(){return R_},qPp:function(){return I_},cvt:function(){return U_},bdP:function(){return T_},Vb3:function(){return N_},sKh:function(){return L_},gbg:function(){return P_},gdK:function(){return M_},y4p:function(){return F_},kYo:function(){return q_},Wuc:function(){return D_},M0e:function(){return z_},UtT:function(){return H_},_q4:function(){return K_},HIc:function(){return Y_},qdJ:function(){return $_},Qeo:function(){return V_},nhX:function(){return W_},prR:function(){return G_},OJH:function(){return Z_},QSL:function(){return X_},F5E:function(){return J_},ZD6:function(){return Q_},FQ9:function(){return tr},mf5:function(){return _r},SYV:function(){return rr},_6O:function(){return nr},f_G:function(){return er},uZr:function(){return or},nJe:function(){return ir},kB:function(){return ar},eBP:function(){return sr},EuU:function(){return cr},EQY:function(){return dr},hAB:function(){return pr},efI:function(){return ur},qop:function(){return lr},hP7:function(){return wr},YhN:function(){return fr},CFw:function(){return hr},XNw:function(){return br},eI0:function(){return gr},Gwp:function(){return yr},Yx7:function(){return mr},YW8:function(){return vr},kFt:function(){return kr},ldW:function(){return xr},HlM:function(){return jr},r$i:function(){return Ar},hKc:function(){return Er},PzD:function(){return Or},szC:function(){return Sr},wf_:function(){return Br},XRW:function(){return Cr},TGD:function(){return Rr},T01:function(){return Ir},dxt:function(){return Ur},HZd:function(){return Tr},AOx:function(){return Nr},eVX:function(){return Lr},YyL:function(){return Pr},ZAD:function(){return Mr},dV5:function(){return Fr},XgB:function(){return qr},jmH:function(){return Dr},E8:function(){return zr},xFq:function(){return Hr},Jx4:function(){return Kr},rwR:function(){return Yr},BNo:function(){return $r},Nn:function(){return Vr},$LP:function(){return Wr},uHB:function(){return Gr},B4R:function(){return Zr},stS:function(){return Xr},qte:function(){return Jr},AF1:function(){return Qr},VLl:function(){return tn},fjg:function(){return _n},ug$:function(){return rn},h4u:function(){return nn},hdV:function(){return en},qtq:function(){return on},pT7:function(){return an},m_1:function(){return sn},WlW:function(){return cn},RVh:function(){return dn},Wl7:function(){return pn},Nko:function(){return un},DIc:function(){return ln},QT3:function(){return wn},f5q:function(){return fn},eYF:function(){return hn},goM:function(){return bn},crw:function(){return gn},eaI:function(){return yn},exY:function(){return mn},BF4:function(){return vn},o$X:function(){return kn},gWb:function(){return xn},Add:function(){return jn},Niw:function(){return An},uB_:function(){return En},yBo:function(){return On},Sne:function(){return Sn},$Li:function(){return Bn},wJ_:function(){return Cn},XP4:function(){return Rn},WAd:function(){return In},VDL:function(){return Un},EWt:function(){return Tn},jpb:function(){return Nn},lBI:function(){return Ln},fP1:function(){return Pn},bjU:function(){return Mn},ibT:function(){return Fn},kHX:function(){return qn},neC:function(){return Dn},UZK:function(){return zn},YqC:function(){return Hn},NRn:function(){return Kn},yfN:function(){return Yn},j8U:function(){return $n},dVC:function(){return Vn},SaM:function(){return Wn},ZU4:function(){return Gn},fYP:function(){return Zn},Or8:function(){return Xn},oHO:function(){return Jn}});var n=r(6889);t=r.hmd(t);const e=new Array(32).fill(void 0);function o(t){return e[t]}e.push(void 0,null,!0,!1);let i=e.length;function a(t){const _=o(t);return function(t){t<36||(e[t]=i,i=t)}(t),_}let s=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});s.decode();let c=new Uint8Array;function d(){return 0===c.byteLength&&(c=new Uint8Array(n.memory.buffer)),c}function p(t,_){return s.decode(d().subarray(t,t+_))}function u(t){i===e.length&&e.push(e.length+1);const _=i;return i=e[_],e[_]=t,_}let l=0,w=new("undefined"==typeof TextEncoder?(0,t.require)("util").TextEncoder:TextEncoder)("utf-8");const f="function"==typeof w.encodeInto?function(t,_){return w.encodeInto(t,_)}:function(t,_){const r=w.encode(t);return _.set(r),{read:t.length,written:r.length}};function h(t,_,r){if(void 0===r){const r=w.encode(t),n=_(r.length);return d().subarray(n,n+r.length).set(r),l=r.length,n}let n=t.length,e=_(n);const o=d();let i=0;for(;i<n;i++){const _=t.charCodeAt(i);if(_>127)break;o[e+i]=_}if(i!==n){0!==i&&(t=t.slice(i)),e=r(e,n,n=i+3*t.length);const _=d().subarray(e+i,e+n);i+=f(t,_).written}return l=i,e}function b(t){return null==t}let g=new Int32Array;function y(){return 0===g.byteLength&&(g=new Int32Array(n.memory.buffer)),g}function m(t){const _=typeof t;if("number"==_||"boolean"==_||null==t)return`${t}`;if("string"==_)return`"${t}"`;if("symbol"==_){const _=t.description;return null==_?"Symbol":`Symbol(${_})`}if("function"==_){const _=t.name;return"string"==typeof _&&_.length>0?`Function(${_})`:"Function"}if(Array.isArray(t)){const _=t.length;let r="[";_>0&&(r+=m(t[0]));for(let n=1;n<_;n++)r+=", "+m(t[n]);return r+="]",r}const r=/\[object ([^\]]+)\]/.exec(toString.call(t));let n;if(!(r.length>1))return toString.call(t);if(n=r[1],"Object"==n)try{return"Object("+JSON.stringify(t)+")"}catch(t){return"Object"}return t instanceof Error?`${t.name}: ${t.message}\n${t.stack}`:n}function v(t,_){return d().subarray(t/1,t/1+_)}function k(t,_){const r=_(1*t.length);return d().set(t,r/1),l=t.length,r}function x(t,_){if(!(t instanceof _))throw new Error(`expected instance of ${_.name}`);return t.ptr}let j=new Uint32Array;function A(){return 0===j.byteLength&&(j=new Uint32Array(n.memory.buffer)),j}function E(t,_){return A().subarray(t/4,t/4+_)}function O(t){const _=k(t,n.__wbindgen_malloc),r=l,e=n.encode_arbitrary_bytes_as_metadatum(_,r);return Ir.__wrap(e)}function S(t){try{const i=n.__wbindgen_add_to_stack_pointer(-16);x(t,Ir),n.decode_arbitrary_bytes_from_metadatum(i,t.ptr);var _=y()[i/4+0],r=y()[i/4+1],e=y()[i/4+2];if(y()[i/4+3])throw a(e);var o=v(_,r).slice();return n.__wbindgen_free(_,1*r),o}finally{n.__wbindgen_add_to_stack_pointer(16)}}function B(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),s=l;n.encode_json_str_to_metadatum(o,i,s,_);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return Ir.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function C(t,_){try{const d=n.__wbindgen_add_to_stack_pointer(-16);x(t,Ir),n.decode_metadatum_to_json_str(d,t.ptr,_);var r=y()[d/4+0],e=y()[d/4+1],o=y()[d/4+2],i=y()[d/4+3],s=r,c=e;if(i)throw s=0,c=0,a(o);return p(s,c)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(s,c)}}function R(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),s=l;n.encode_json_str_to_plutus_datum(o,i,s,_);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return B_.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function I(t,_){try{const d=n.__wbindgen_add_to_stack_pointer(-16);x(t,B_),n.decode_plutus_datum_to_json_str(d,t.ptr,_);var r=y()[d/4+0],e=y()[d/4+1],o=y()[d/4+2],i=y()[d/4+3],s=r,c=e;if(i)throw s=0,c=0,a(o);return p(s,c)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(s,c)}}function U(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,vr),x(_,d_),n.min_fee(o,t.ptr,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return xt.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function T(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,$t),x(_,Yt),n.calculate_ex_units_ceil_cost(o,t.ptr,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return xt.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function N(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,vr),x(_,Yt),n.min_script_fee(o,t.ptr,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return xt.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function L(t,_,r,e){try{const w=n.__wbindgen_add_to_stack_pointer(-16),f=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),b=l,g=h(_,n.__wbindgen_malloc,n.__wbindgen_realloc),m=l,v=h(r,n.__wbindgen_malloc,n.__wbindgen_realloc),k=l,x=h(e,n.__wbindgen_malloc,n.__wbindgen_realloc),j=l;n.encrypt_with_password(w,f,b,g,m,v,k,x,j);var o=y()[w/4+0],i=y()[w/4+1],s=y()[w/4+2],c=y()[w/4+3],d=o,u=i;if(c)throw d=0,u=0,a(s);return p(d,u)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(d,u)}}function P(t,_){try{const d=n.__wbindgen_add_to_stack_pointer(-16),u=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),w=l,f=h(_,n.__wbindgen_malloc,n.__wbindgen_realloc),b=l;n.decrypt_with_password(d,u,w,f,b);var r=y()[d/4+0],e=y()[d/4+1],o=y()[d/4+2],i=y()[d/4+3],s=r,c=e;if(i)throw s=0,c=0,a(o);return p(s,c)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(s,c)}}function M(t,_,r){try{const i=n.__wbindgen_add_to_stack_pointer(-16);x(t,wt),x(_,Fr),x(r,Or),n.create_send_all(i,t.ptr,_.ptr,r.ptr);var e=y()[i/4+0],o=y()[i/4+1];if(y()[i/4+2])throw a(o);return xr.__wrap(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function F(t,_,r){x(t,Br),x(_,Ct),x(r,c_);const e=n.make_daedalus_bootstrap_witness(t.ptr,_.ptr,r.ptr);return St.__wrap(e)}function q(t,_,r){x(t,Br),x(_,Ct),x(r,jt);const e=n.make_icarus_bootstrap_witness(t.ptr,_.ptr,r.ptr);return St.__wrap(e)}function D(t,_){x(t,Br),x(_,K_);const r=n.make_vkey_witness(t.ptr,_.ptr);return Qr.__wrap(r)}function z(t){x(t,gt);const _=n.hash_auxiliary_data(t.ptr);return yt.__wrap(_)}function H(t){x(t,Ar);const _=n.hash_transaction(t.ptr);return Br.__wrap(_)}function K(t){x(t,B_);const _=n.hash_plutus_data(t.ptr);return Ft.__wrap(_)}function Y(t,_,r){x(t,J_),x(_,Nt);let e=0;b(r)||(x(r,C_),e=r.ptr,r.ptr=0);const o=n.hash_script_data(t.ptr,_.ptr,e);return or.__wrap(o)}function $(t,_,r){try{const i=n.__wbindgen_add_to_stack_pointer(-16);x(t,Ar),x(_,xt),x(r,xt),n.get_implicit_input(i,t.ptr,_.ptr,r.ptr);var e=y()[i/4+0],o=y()[i/4+1];if(y()[i/4+2])throw a(o);return Zr.__wrap(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function V(t,_,r){try{const i=n.__wbindgen_add_to_stack_pointer(-16);x(t,Ar),x(_,xt),x(r,xt),n.get_deposit(i,t.ptr,_.ptr,r.ptr);var e=y()[i/4+0],o=y()[i/4+1];if(y()[i/4+2])throw a(o);return xt.__wrap(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function W(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,Tr),x(_,Mt),n.min_ada_for_output(o,t.ptr,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return xt.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function G(t,_,r){try{const i=n.__wbindgen_add_to_stack_pointer(-16);x(t,Zr),x(r,xt),n.min_ada_required(i,t.ptr,_,r.ptr);var e=y()[i/4+0],o=y()[i/4+1];if(y()[i/4+2])throw a(o);return xt.__wrap(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function Z(t,_,r){try{const i=n.__wbindgen_add_to_stack_pointer(-16),s=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),c=l,d=h(_,n.__wbindgen_malloc,n.__wbindgen_realloc),p=l;n.encode_json_str_to_native_script(i,s,c,d,p,r);var e=y()[i/4+0],o=y()[i/4+1];if(y()[i/4+2])throw a(o);return x_.__wrap(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}function X(t,_){try{return t.apply(this,_)}catch(t){n.__wbindgen_exn_store(u(t))}}const J=Object.freeze({StakeRegistration:0,0:"StakeRegistration",StakeDeregistration:1,1:"StakeDeregistration",StakeDelegation:2,2:"StakeDelegation",PoolRegistration:3,3:"PoolRegistration",PoolRetirement:4,4:"PoolRetirement",GenesisKeyDelegation:5,5:"GenesisKeyDelegation",MoveInstantaneousRewardsCert:6,6:"MoveInstantaneousRewardsCert"}),Q=Object.freeze({Reserves:0,0:"Reserves",Treasury:1,1:"Treasury"}),tt=Object.freeze({ToOtherPot:0,0:"ToOtherPot",ToStakeCredentials:1,1:"ToStakeCredentials"}),_t=Object.freeze({SingleHostAddr:0,0:"SingleHostAddr",SingleHostName:1,1:"SingleHostName",MultiHostName:2,2:"MultiHostName"}),rt=Object.freeze({ScriptPubkey:0,0:"ScriptPubkey",ScriptAll:1,1:"ScriptAll",ScriptAny:2,2:"ScriptAny",ScriptNOfK:3,3:"ScriptNOfK",TimelockStart:4,4:"TimelockStart",TimelockExpiry:5,5:"TimelockExpiry"}),nt=Object.freeze({NativeScript:0,0:"NativeScript",PlutusScript:1,1:"PlutusScript",PlutusScriptV2:2,2:"PlutusScriptV2"}),et=Object.freeze({Testnet:0,0:"Testnet",Mainnet:1,1:"Mainnet"}),ot=Object.freeze({MetadataMap:0,0:"MetadataMap",MetadataList:1,1:"MetadataList",Int:2,2:"Int",Bytes:3,3:"Bytes",Text:4,4:"Text"}),it=Object.freeze({NoConversions:0,0:"NoConversions",BasicConversions:1,1:"BasicConversions",DetailedSchema:2,2:"DetailedSchema"}),at=Object.freeze({PlutusV1:0,0:"PlutusV1",PlutusV2:1,1:"PlutusV2"}),st=Object.freeze({ConstrPlutusData:0,0:"ConstrPlutusData",Map:1,1:"Map",List:2,2:"List",Integer:3,3:"Integer",Bytes:4,4:"Bytes"}),ct=Object.freeze({Spend:0,0:"Spend",Mint:1,1:"Mint",Cert:2,2:"Cert",Reward:3,3:"Reward"}),dt=Object.freeze({BasicConversions:0,0:"BasicConversions",DetailedSchema:1,1:"DetailedSchema"}),pt=Object.freeze({LargestFirst:0,0:"LargestFirst",RandomImprove:1,1:"RandomImprove",LargestFirstMultiAsset:2,2:"LargestFirstMultiAsset",RandomImproveMultiAsset:3,3:"RandomImproveMultiAsset"}),ut=Object.freeze({Key:0,0:"Key",Script:1,1:"Script"}),lt=Object.freeze({Wallet:0,0:"Wallet",Node:1,1:"Node"});class wt{static __wrap(t){const _=Object.create(wt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_address_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.address_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.address_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.address_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.address_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.address_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.address_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.address_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const u=n.__wbindgen_add_to_stack_pointer(-16);var _=b(t)?0:h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l;n.address_to_bech32(u,this.ptr,_,r);var e=y()[u/4+0],o=y()[u/4+1],i=y()[u/4+2],s=y()[u/4+3],c=e,d=o;if(s)throw c=0,d=0,a(i);return p(c,d)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(c,d)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.address_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}network_id(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.address_network_id(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class ft{static __wrap(t){const _=Object.create(ft.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_assetname_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.assetname_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.assetname_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.assetname_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.assetname_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.assetname_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.assetname_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.assetname_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.assetname_new(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}name(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.assetname_name(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class ht{static __wrap(t){const _=Object.create(ht.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_assetnames_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.assetnames_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.assetnames_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ht.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.assetnames_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.assetnames_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ht.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.assetnames_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.assetnames_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.assetnames_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ht.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.assetnames_new();return ht.__wrap(t)}len(){return n.assetnames_len(this.ptr)>>>0}get(t){const _=n.assetnames_get(this.ptr,t);return ft.__wrap(_)}add(t){x(t,ft),n.assetnames_add(this.ptr,t.ptr)}}class bt{static __wrap(t){const _=Object.create(bt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_assets_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.assets_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.assets_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return bt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.assets_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.assets_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return bt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.assets_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.assets_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.assets_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return bt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.assets_new();return bt.__wrap(t)}len(){return n.assets_len(this.ptr)>>>0}insert(t,_){x(t,ft),x(_,xt);const r=n.assets_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:xt.__wrap(r)}get(t){x(t,ft);const _=n.assets_get(this.ptr,t.ptr);return 0===_?void 0:xt.__wrap(_)}keys(){const t=n.assets_keys(this.ptr);return ht.__wrap(t)}}class gt{static __wrap(t){const _=Object.create(gt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_auxiliarydata_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydata_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.auxiliarydata_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return gt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydata_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.auxiliarydata_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return gt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydata_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydata_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.auxiliarydata_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return gt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.auxiliarydata_new();return gt.__wrap(t)}metadata(){const t=n.auxiliarydata_metadata(this.ptr);return 0===t?void 0:Vt.__wrap(t)}set_metadata(t){x(t,Vt),n.auxiliarydata_set_metadata(this.ptr,t.ptr)}native_scripts(){const t=n.auxiliarydata_native_scripts(this.ptr);return 0===t?void 0:j_.__wrap(t)}set_native_scripts(t){x(t,j_),n.auxiliarydata_set_native_scripts(this.ptr,t.ptr)}plutus_scripts(){const t=n.auxiliarydata_plutus_scripts(this.ptr);return 0===t?void 0:T_.__wrap(t)}set_plutus_scripts(t){x(t,T_),n.auxiliarydata_set_plutus_scripts(this.ptr,t.ptr)}prefer_alonzo_format(){return 0!==n.auxiliarydata_prefer_alonzo_format(this.ptr)}set_prefer_alonzo_format(t){n.auxiliarydata_set_prefer_alonzo_format(this.ptr,t)}}class yt{static __wrap(t){const _=Object.create(yt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_auxiliarydatahash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.auxiliarydatahash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return yt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydatahash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.auxiliarydatahash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.auxiliarydatahash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return yt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydatahash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.auxiliarydatahash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return yt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class mt{static __wrap(t){const _=Object.create(mt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_auxiliarydataset_free(t)}static new(){const t=n.auxiliarydataset_new();return mt.__wrap(t)}len(){return n.auxiliarydataset_len(this.ptr)>>>0}insert(t,_){x(_,gt);const r=n.auxiliarydataset_insert(this.ptr,t,_.ptr);return 0===r?void 0:gt.__wrap(r)}get(t){const _=n.auxiliarydataset_get(this.ptr,t);return 0===_?void 0:gt.__wrap(_)}indices(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.auxiliarydataset_indices(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=E(t,_).slice();return n.__wbindgen_free(t,4*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class vt{static __wrap(t){const _=Object.create(vt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_baseaddress_free(t)}static new(t,_,r){x(_,lr),x(r,lr);const e=n.baseaddress_new(t,_.ptr,r.ptr);return vt.__wrap(e)}payment_cred(){const t=n.baseaddress_payment_cred(this.ptr);return lr.__wrap(t)}stake_cred(){const t=n.baseaddress_stake_cred(this.ptr);return lr.__wrap(t)}to_address(){const t=n.baseaddress_to_address(this.ptr);return wt.__wrap(t)}static from_address(t){x(t,wt);const _=n.baseaddress_from_address(t.ptr);return 0===_?void 0:vt.__wrap(_)}}class kt{static __wrap(t){const _=Object.create(kt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bigint_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bigint_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.bigint_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return kt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bigint_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bigint_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return kt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.bigint_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bigint_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bigint_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return kt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}is_zero(){return 0!==n.bigint_is_zero(this.ptr)}as_u64(){const t=n.bigint_as_u64(this.ptr);return 0===t?void 0:xt.__wrap(t)}as_int(){const t=n.bigint_as_int(this.ptr);return 0===t?void 0:r_.__wrap(t)}static from_str(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bigint_from_str(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return kt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_str(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bigint_to_str(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}add(t){x(t,kt);const _=n.bigint_add(this.ptr,t.ptr);return kt.__wrap(_)}mul(t){x(t,kt);const _=n.bigint_mul(this.ptr,t.ptr);return kt.__wrap(_)}static one(){const t=n.bigint_one();return kt.__wrap(t)}increment(){const t=n.bigint_increment(this.ptr);return kt.__wrap(t)}div_ceil(t){x(t,kt);const _=n.bigint_div_ceil(this.ptr,t.ptr);return kt.__wrap(_)}}class xt{static __wrap(t){const _=Object.create(xt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bignum_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.bignum_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bignum_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bignum_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_str(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bignum_from_str(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_str(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bignum_to_str(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static zero(){const t=n.bignum_zero();return xt.__wrap(t)}static one(){const t=n.bignum_one();return xt.__wrap(t)}is_zero(){return 0!==n.bignum_is_zero(this.ptr)}div_floor(t){x(t,xt);const _=n.bignum_div_floor(this.ptr,t.ptr);return xt.__wrap(_)}checked_mul(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,xt),n.bignum_checked_mul(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}checked_add(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,xt),n.bignum_checked_add(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}checked_sub(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,xt),n.bignum_checked_sub(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}clamped_sub(t){x(t,xt);const _=n.bignum_clamped_sub(this.ptr,t.ptr);return xt.__wrap(_)}compare(t){return x(t,xt),n.bignum_compare(this.ptr,t.ptr)}less_than(t){return x(t,xt),0!==n.bignum_less_than(this.ptr,t.ptr)}static max_value(){const t=n.bignum_max_value();return xt.__wrap(t)}static max(t,_){x(t,xt),x(_,xt);const r=n.bignum_max(t.ptr,_.ptr);return xt.__wrap(r)}}class jt{static __wrap(t){const _=Object.create(jt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bip32privatekey_free(t)}derive(t){const _=n.bip32privatekey_derive(this.ptr,t);return jt.__wrap(_)}static from_128_xprv(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.bip32privatekey_from_128_xprv(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_128_xprv(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bip32privatekey_to_128_xprv(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static generate_ed25519_bip32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bip32privatekey_generate_ed25519_bip32(r);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return jt.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_raw_key(){const t=n.bip32privatekey_to_raw_key(this.ptr);return K_.__wrap(t)}to_public(){const t=n.bip32privatekey_to_public(this.ptr);return At.__wrap(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.bip32privatekey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bip32privatekey_as_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bip32privatekey_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bip32privatekey_to_bech32(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_bip39_entropy(t,_){const r=k(t,n.__wbindgen_malloc),e=l,o=k(_,n.__wbindgen_malloc),i=l,a=n.bip32privatekey_from_bip39_entropy(r,e,o,i);return jt.__wrap(a)}chaincode(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bip32privatekey_chaincode(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bip32privatekey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bip32privatekey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class At{static __wrap(t){const _=Object.create(At.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bip32publickey_free(t)}derive(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bip32publickey_derive(e,this.ptr,t);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return At.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_raw_key(){const t=n.bip32publickey_to_raw_key(this.ptr);return W_.__wrap(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.bip32publickey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return At.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bip32publickey_as_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bip32publickey_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return At.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bip32publickey_to_bech32(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}chaincode(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bip32publickey_chaincode(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bip32publickey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bip32publickey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return At.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Et{static __wrap(t){const _=Object.create(Et.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_block_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.block_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.block_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Et.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.block_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.block_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Et.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.block_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.block_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.block_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Et.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}header(){const t=n.block_header(this.ptr);return Jt.__wrap(t)}transaction_bodies(){const t=n.block_transaction_bodies(this.ptr);return jr.__wrap(t)}transaction_witness_sets(){const t=n.block_transaction_witness_sets(this.ptr);return Dr.__wrap(t)}auxiliary_data_set(){const t=n.block_auxiliary_data_set(this.ptr);return mt.__wrap(t)}invalid_transactions(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.block_invalid_transactions(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=E(t,_).slice();return n.__wbindgen_free(t,4*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_,r,e,o){x(t,Jt),x(_,jr),x(r,Dr),x(e,mt);const i=function(t,_){const r=_(4*t.length);return A().set(t,r/4),l=t.length,r}(o,n.__wbindgen_malloc),a=l,s=n.block_new(t.ptr,_.ptr,r.ptr,e.ptr,i,a);return Et.__wrap(s)}}class Ot{static __wrap(t){const _=Object.create(Ot.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_blockhash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.blockhash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ot.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.blockhash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.blockhash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.blockhash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ot.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.blockhash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.blockhash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ot.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class St{static __wrap(t){const _=Object.create(St.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bootstrapwitness_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bootstrapwitness_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.bootstrapwitness_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return St.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bootstrapwitness_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bootstrapwitness_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return St.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.bootstrapwitness_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.bootstrapwitness_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.bootstrapwitness_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return St.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}vkey(){const t=n.bootstrapwitness_vkey(this.ptr);return Xr.__wrap(t)}signature(){const t=n.bootstrapwitness_signature(this.ptr);return Ht.__wrap(t)}chain_code(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bootstrapwitness_chain_code(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}attributes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.bootstrapwitness_attributes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_,r,e){x(t,Xr),x(_,Ht);const o=k(r,n.__wbindgen_malloc),i=l,a=k(e,n.__wbindgen_malloc),s=l,c=n.bootstrapwitness_new(t.ptr,_.ptr,o,i,a,s);return St.__wrap(c)}}class Bt{static __wrap(t){const _=Object.create(Bt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_bootstrapwitnesses_free(t)}static new(){const t=n.bootstrapwitnesses_new();return Bt.__wrap(t)}len(){return n.bootstrapwitnesses_len(this.ptr)>>>0}get(t){const _=n.bootstrapwitnesses_get(this.ptr,t);return St.__wrap(_)}add(t){x(t,St),n.bootstrapwitnesses_add(this.ptr,t.ptr)}}class Ct{static __wrap(t){const _=Object.create(Ct.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_byronaddress_free(t)}to_base58(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.byronaddress_to_base58(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.byronaddress_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.byronaddress_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ct.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}byron_protocol_magic(){return n.byronaddress_byron_protocol_magic(this.ptr)>>>0}attributes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.byronaddress_attributes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}network_id(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.byronaddress_network_id(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_base58(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.byronaddress_from_base58(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ct.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static icarus_from_key(t,_){x(t,At);const r=n.byronaddress_icarus_from_key(t.ptr,_);return Ct.__wrap(r)}static is_valid(t){const _=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l;return 0!==n.byronaddress_is_valid(_,r)}to_address(){const t=n.byronaddress_to_address(this.ptr);return wt.__wrap(t)}static from_address(t){x(t,wt);const _=n.byronaddress_from_address(t.ptr);return 0===_?void 0:Ct.__wrap(_)}}class Rt{static __wrap(t){const _=Object.create(Rt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_certificate_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.certificate_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.certificate_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Rt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.certificate_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.certificate_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Rt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.certificate_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.certificate_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.certificate_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Rt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_stake_registration(t){x(t,br);const _=n.certificate_new_stake_registration(t.ptr);return Rt.__wrap(_)}static new_stake_deregistration(t){x(t,hr);const _=n.certificate_new_stake_deregistration(t.ptr);return Rt.__wrap(_)}static new_stake_delegation(t){x(t,fr);const _=n.certificate_new_stake_delegation(t.ptr);return Rt.__wrap(_)}static new_pool_registration(t){x(t,z_);const _=n.certificate_new_pool_registration(t.ptr);return Rt.__wrap(_)}static new_pool_retirement(t){x(t,H_);const _=n.certificate_new_pool_retirement(t.ptr);return Rt.__wrap(_)}static new_genesis_key_delegation(t){x(t,Xt);const _=n.certificate_new_genesis_key_delegation(t.ptr);return Rt.__wrap(_)}static new_move_instantaneous_rewards_cert(t){x(t,m_);const _=n.certificate_new_move_instantaneous_rewards_cert(t.ptr);return Rt.__wrap(_)}kind(){return n.certificate_kind(this.ptr)>>>0}as_stake_registration(){const t=n.certificate_as_stake_registration(this.ptr);return 0===t?void 0:br.__wrap(t)}as_stake_deregistration(){const t=n.certificate_as_stake_deregistration(this.ptr);return 0===t?void 0:hr.__wrap(t)}as_stake_delegation(){const t=n.certificate_as_stake_delegation(this.ptr);return 0===t?void 0:fr.__wrap(t)}as_pool_registration(){const t=n.certificate_as_pool_registration(this.ptr);return 0===t?void 0:z_.__wrap(t)}as_pool_retirement(){const t=n.certificate_as_pool_retirement(this.ptr);return 0===t?void 0:H_.__wrap(t)}as_genesis_key_delegation(){const t=n.certificate_as_genesis_key_delegation(this.ptr);return 0===t?void 0:Xt.__wrap(t)}as_move_instantaneous_rewards_cert(){const t=n.certificate_as_move_instantaneous_rewards_cert(this.ptr);return 0===t?void 0:m_.__wrap(t)}}class It{static __wrap(t){const _=Object.create(It.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_certificates_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.certificates_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.certificates_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return It.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.certificates_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.certificates_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return It.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.certificates_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.certificates_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.certificates_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return It.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.certificates_new();return It.__wrap(t)}len(){return n.certificates_len(this.ptr)>>>0}get(t){const _=n.certificates_get(this.ptr,t);return Rt.__wrap(_)}add(t){x(t,Rt),n.certificates_add(this.ptr,t.ptr)}}class Ut{static __wrap(t){const _=Object.create(Ut.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_constrplutusdata_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.constrplutusdata_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.constrplutusdata_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ut.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.constrplutusdata_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.constrplutusdata_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ut.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}alternative(){const t=n.constrplutusdata_alternative(this.ptr);return xt.__wrap(t)}data(){const t=n.constrplutusdata_data(this.ptr);return C_.__wrap(t)}static new(t,_){x(t,xt),x(_,C_);const r=n.constrplutusdata_new(t.ptr,_.ptr);return Ut.__wrap(r)}}class Tt{static __wrap(t){const _=Object.create(Tt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_costmodel_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.costmodel_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.costmodel_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Tt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.costmodel_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.costmodel_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Tt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.costmodel_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.costmodel_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.costmodel_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Tt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.costmodel_new();return Tt.__wrap(t)}set(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(_,r_),n.costmodel_set(o,this.ptr,t,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return r_.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.costmodel_get(e,this.ptr,t);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return r_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}len(){return n.costmodel_len(this.ptr)>>>0}}class Nt{static __wrap(t){const _=Object.create(Nt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_costmdls_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.costmdls_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.costmdls_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Nt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.costmdls_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.costmdls_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Nt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.costmdls_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.costmdls_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.costmdls_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Nt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.costmdls_new();return Nt.__wrap(t)}len(){return n.costmdls_len(this.ptr)>>>0}insert(t,_){x(t,a_),x(_,Tt);const r=n.costmdls_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:Tt.__wrap(r)}get(t){x(t,a_);const _=n.costmdls_get(this.ptr,t.ptr);return 0===_?void 0:Tt.__wrap(_)}keys(){const t=n.costmdls_keys(this.ptr);return s_.__wrap(t)}retain_language_versions(t){x(t,s_);const _=n.costmdls_retain_language_versions(this.ptr,t.ptr);return Nt.__wrap(_)}}class Lt{static __wrap(t){const _=Object.create(Lt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_dnsrecordaoraaaa_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordaoraaaa_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.dnsrecordaoraaaa_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Lt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordaoraaaa_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.dnsrecordaoraaaa_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Lt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordaoraaaa_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordaoraaaa_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.dnsrecordaoraaaa_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Lt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.dnsrecordaoraaaa_new(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Lt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}record(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordaoraaaa_record(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}}class Pt{static __wrap(t){const _=Object.create(Pt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_dnsrecordsrv_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordsrv_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.dnsrecordsrv_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordsrv_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.dnsrecordsrv_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordsrv_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordsrv_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.dnsrecordsrv_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.dnsrecordsrv_new(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}record(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.dnsrecordsrv_record(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}}class Mt{static __wrap(t){const _=Object.create(Mt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_datacost_free(t)}static new_coins_per_word(t){x(t,xt);const _=n.datacost_new_coins_per_word(t.ptr);return Mt.__wrap(_)}static new_coins_per_byte(t){x(t,xt);const _=n.datacost_new_coins_per_byte(t.ptr);return Mt.__wrap(_)}coins_per_byte(){const t=n.datacost_coins_per_byte(this.ptr);return xt.__wrap(t)}}class Ft{static __wrap(t){const _=Object.create(Ft.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_datahash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.datahash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.datahash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.datahash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.datahash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.datahash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.datahash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ft.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class qt{static __wrap(t){const _=Object.create(qt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_datumsource_free(t)}static new(t){x(t,B_);const _=n.datumsource_new(t.ptr);return qt.__wrap(_)}static new_ref_input(t){x(t,Cr);const _=n.datumsource_new_ref_input(t.ptr);return qt.__wrap(_)}}class Dt{static __wrap(t){const _=Object.create(Dt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_ed25519keyhash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ed25519keyhash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Dt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519keyhash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.ed25519keyhash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ed25519keyhash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Dt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519keyhash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ed25519keyhash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Dt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class zt{static __wrap(t){const _=Object.create(zt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_ed25519keyhashes_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519keyhashes_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ed25519keyhashes_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return zt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519keyhashes_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ed25519keyhashes_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return zt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519keyhashes_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519keyhashes_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ed25519keyhashes_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return zt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.ed25519keyhashes_new();return zt.__wrap(t)}len(){return n.ed25519keyhashes_len(this.ptr)>>>0}get(t){const _=n.ed25519keyhashes_get(this.ptr,t);return Dt.__wrap(_)}add(t){x(t,Dt),n.ed25519keyhashes_add(this.ptr,t.ptr)}to_option(){const t=n.ed25519keyhashes_to_option(this.ptr);return 0===t?void 0:zt.__wrap(t)}}class Ht{static __wrap(t){const _=Object.create(Ht.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_ed25519signature_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519signature_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519signature_to_bech32(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ed25519signature_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ed25519signature_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ht.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ed25519signature_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ht.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ed25519signature_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ht.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Kt{static __wrap(t){const _=Object.create(Kt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_enterpriseaddress_free(t)}static new(t,_){x(_,lr);const r=n.enterpriseaddress_new(t,_.ptr);return Kt.__wrap(r)}payment_cred(){const t=n.enterpriseaddress_payment_cred(this.ptr);return lr.__wrap(t)}to_address(){const t=n.enterpriseaddress_to_address(this.ptr);return wt.__wrap(t)}static from_address(t){x(t,wt);const _=n.enterpriseaddress_from_address(t.ptr);return 0===_?void 0:Kt.__wrap(_)}}class Yt{static __wrap(t){const _=Object.create(Yt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_exunitprices_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.exunitprices_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.exunitprices_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Yt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.exunitprices_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.exunitprices_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Yt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.exunitprices_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.exunitprices_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.exunitprices_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Yt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}mem_price(){const t=n.exunitprices_mem_price(this.ptr);return Yr.__wrap(t)}step_price(){const t=n.exunitprices_step_price(this.ptr);return Yr.__wrap(t)}static new(t,_){x(t,Yr),x(_,Yr);const r=n.exunitprices_new(t.ptr,_.ptr);return Yt.__wrap(r)}}class $t{static __wrap(t){const _=Object.create($t.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_exunits_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.exunits_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.exunits_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $t.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.exunits_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.exunits_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $t.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.exunits_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.exunits_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.exunits_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $t.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}mem(){const t=n.exunits_mem(this.ptr);return xt.__wrap(t)}steps(){const t=n.exunits_steps(this.ptr);return xt.__wrap(t)}static new(t,_){x(t,xt),x(_,xt);const r=n.exunits_new(t.ptr,_.ptr);return $t.__wrap(r)}}class Vt{static __wrap(t){const _=Object.create(Vt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_generaltransactionmetadata_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.generaltransactionmetadata_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.generaltransactionmetadata_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Vt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.generaltransactionmetadata_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.generaltransactionmetadata_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Vt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.generaltransactionmetadata_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.generaltransactionmetadata_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.generaltransactionmetadata_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Vt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.generaltransactionmetadata_new();return Vt.__wrap(t)}len(){return n.generaltransactionmetadata_len(this.ptr)>>>0}insert(t,_){x(t,xt),x(_,Ir);const r=n.generaltransactionmetadata_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:Ir.__wrap(r)}get(t){x(t,xt);const _=n.generaltransactionmetadata_get(this.ptr,t.ptr);return 0===_?void 0:Ir.__wrap(_)}keys(){const t=n.generaltransactionmetadata_keys(this.ptr);return Ur.__wrap(t)}}class Wt{static __wrap(t){const _=Object.create(Wt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_genesisdelegatehash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.genesisdelegatehash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.genesisdelegatehash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.genesisdelegatehash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesisdelegatehash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.genesisdelegatehash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesisdelegatehash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Wt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Gt{static __wrap(t){const _=Object.create(Gt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_genesishash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.genesishash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Gt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.genesishash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.genesishash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesishash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Gt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.genesishash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesishash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Gt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Zt{static __wrap(t){const _=Object.create(Zt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_genesishashes_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.genesishashes_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.genesishashes_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.genesishashes_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesishashes_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.genesishashes_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.genesishashes_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesishashes_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.genesishashes_new();return Zt.__wrap(t)}len(){return n.genesishashes_len(this.ptr)>>>0}get(t){const _=n.genesishashes_get(this.ptr,t);return Gt.__wrap(_)}add(t){x(t,Gt),n.genesishashes_add(this.ptr,t.ptr)}}class Xt{static __wrap(t){const _=Object.create(Xt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_genesiskeydelegation_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.genesiskeydelegation_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.genesiskeydelegation_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.genesiskeydelegation_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesiskeydelegation_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.genesiskeydelegation_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.genesiskeydelegation_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.genesiskeydelegation_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}genesishash(){const t=n.genesiskeydelegation_genesishash(this.ptr);return Gt.__wrap(t)}genesis_delegate_hash(){const t=n.genesiskeydelegation_genesis_delegate_hash(this.ptr);return Wt.__wrap(t)}vrf_keyhash(){const t=n.genesiskeydelegation_vrf_keyhash(this.ptr);return Wr.__wrap(t)}static new(t,_,r){x(t,Gt),x(_,Wt),x(r,Wr);const e=n.genesiskeydelegation_new(t.ptr,_.ptr,r.ptr);return Xt.__wrap(e)}}class Jt{static __wrap(t){const _=Object.create(Jt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_header_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.header_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.header_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.header_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.header_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.header_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.header_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.header_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Jt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}header_body(){const t=n.header_header_body(this.ptr);return Qt.__wrap(t)}body_signature(){const t=n.header_body_signature(this.ptr);return o_.__wrap(t)}static new(t,_){x(t,Qt),x(_,o_);const r=n.header_new(t.ptr,_.ptr);return Jt.__wrap(r)}}class Qt{static __wrap(t){const _=Object.create(Qt.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_headerbody_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.headerbody_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.headerbody_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Qt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.headerbody_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.headerbody_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Qt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.headerbody_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.headerbody_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.headerbody_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Qt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}block_number(){return n.headerbody_block_number(this.ptr)>>>0}slot(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.headerbody_slot(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}slot_bignum(){const t=n.headerbody_slot_bignum(this.ptr);return xt.__wrap(t)}prev_hash(){const t=n.headerbody_prev_hash(this.ptr);return 0===t?void 0:Ot.__wrap(t)}issuer_vkey(){const t=n.headerbody_issuer_vkey(this.ptr);return Xr.__wrap(t)}vrf_vkey(){const t=n.headerbody_vrf_vkey(this.ptr);return Gr.__wrap(t)}has_nonce_and_leader_vrf(){return 0!==n.headerbody_has_nonce_and_leader_vrf(this.ptr)}nonce_vrf_or_nothing(){const t=n.headerbody_nonce_vrf_or_nothing(this.ptr);return 0===t?void 0:Vr.__wrap(t)}leader_vrf_or_nothing(){const t=n.headerbody_leader_vrf_or_nothing(this.ptr);return 0===t?void 0:Vr.__wrap(t)}has_vrf_result(){return 0!==n.headerbody_has_vrf_result(this.ptr)}vrf_result_or_nothing(){const t=n.headerbody_vrf_result_or_nothing(this.ptr);return 0===t?void 0:Vr.__wrap(t)}block_body_size(){return n.headerbody_block_body_size(this.ptr)>>>0}block_body_hash(){const t=n.headerbody_block_body_hash(this.ptr);return Ot.__wrap(t)}operational_cert(){const t=n.headerbody_operational_cert(this.ptr);return S_.__wrap(t)}protocol_version(){const t=n.headerbody_protocol_version(this.ptr);return V_.__wrap(t)}static new(t,_,r,e,o,i,a,s,c,d){let p=0;b(r)||(x(r,Ot),p=r.ptr,r.ptr=0),x(e,Xr),x(o,Gr),x(i,Vr),x(s,Ot),x(c,S_),x(d,V_);const u=n.headerbody_new(t,_,p,e.ptr,o.ptr,i.ptr,a,s.ptr,c.ptr,d.ptr);return Qt.__wrap(u)}static new_headerbody(t,_,r,e,o,i,a,s,c,d){x(_,xt);let p=0;b(r)||(x(r,Ot),p=r.ptr,r.ptr=0),x(e,Xr),x(o,Gr),x(i,Vr),x(s,Ot),x(c,S_),x(d,V_);const u=n.headerbody_new_headerbody(t,_.ptr,p,e.ptr,o.ptr,i.ptr,a,s.ptr,c.ptr,d.ptr);return Qt.__wrap(u)}}class t_{static __wrap(t){const _=Object.create(t_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_inputwithscriptwitness_free(t)}static new_with_native_script_witness(t,_){x(t,Cr),x(_,x_);const r=n.inputwithscriptwitness_new_with_native_script_witness(t.ptr,_.ptr);return t_.__wrap(r)}static new_with_plutus_witness(t,_){x(t,Cr),x(_,N_);const r=n.inputwithscriptwitness_new_with_plutus_witness(t.ptr,_.ptr);return t_.__wrap(r)}input(){const t=n.inputwithscriptwitness_input(this.ptr);return Cr.__wrap(t)}}class __{static __wrap(t){const _=Object.create(__.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_inputswithscriptwitness_free(t)}static new(){const t=n.inputswithscriptwitness_new();return __.__wrap(t)}add(t){x(t,t_),n.inputswithscriptwitness_add(this.ptr,t.ptr)}get(t){const _=n.inputswithscriptwitness_get(this.ptr,t);return t_.__wrap(_)}len(){return n.inputswithscriptwitness_len(this.ptr)>>>0}}class r_{static __wrap(t){const _=Object.create(r_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_int_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.int_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.int_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return r_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.int_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return r_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.int_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.int_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return r_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){x(t,xt);const _=n.int_new(t.ptr);return r_.__wrap(_)}static new_negative(t){x(t,xt);const _=n.int_new_negative(t.ptr);return r_.__wrap(_)}static new_i32(t){const _=n.int_new_i32(t);return r_.__wrap(_)}is_positive(){return 0!==n.int_is_positive(this.ptr)}as_positive(){const t=n.int_as_positive(this.ptr);return 0===t?void 0:xt.__wrap(t)}as_negative(){const t=n.int_as_negative(this.ptr);return 0===t?void 0:xt.__wrap(t)}as_i32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_as_i32(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_i32_or_nothing(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_as_i32_or_nothing(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_i32_or_fail(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_as_i32_or_fail(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_str(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.int_to_str(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_str(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.int_from_str(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return r_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class n_{static __wrap(t){const _=Object.create(n_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_ipv4_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ipv4_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ipv4_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return n_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ipv4_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ipv4_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return n_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.ipv4_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ipv4_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ipv4_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return n_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ipv4_new(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return n_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}ip(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ipv4_ip(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class e_{static __wrap(t){const _=Object.create(e_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_ipv6_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ipv6_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ipv6_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return e_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ipv6_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ipv6_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return e_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.ipv6_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.ipv6_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.ipv6_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return e_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.ipv6_new(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return e_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}ip(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.ipv6_ip(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class o_{static __wrap(t){const _=Object.create(o_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_kessignature_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.kessignature_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.kessignature_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return o_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class i_{static __wrap(t){const _=Object.create(i_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_kesvkey_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.kesvkey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return i_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.kesvkey_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.kesvkey_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.kesvkey_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return i_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.kesvkey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.kesvkey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return i_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class a_{static __wrap(t){const _=Object.create(a_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_language_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.language_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.language_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return a_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.language_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.language_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return a_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.language_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.language_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.language_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return a_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_plutus_v1(){const t=n.language_new_plutus_v1();return a_.__wrap(t)}static new_plutus_v2(){const t=n.language_new_plutus_v2();return a_.__wrap(t)}kind(){return n.language_kind(this.ptr)>>>0}}class s_{static __wrap(t){const _=Object.create(s_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_languages_free(t)}static new(){const t=n.languages_new();return s_.__wrap(t)}len(){return n.languages_len(this.ptr)>>>0}get(t){const _=n.languages_get(this.ptr,t);return a_.__wrap(_)}add(t){x(t,a_);var _=t.ptr;t.ptr=0,n.languages_add(this.ptr,_)}static list(){const t=n.languages_list();return s_.__wrap(t)}}class c_{static __wrap(t){const _=Object.create(c_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_legacydaedalusprivatekey_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.legacydaedalusprivatekey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return c_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.legacydaedalusprivatekey_as_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}chaincode(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.legacydaedalusprivatekey_chaincode(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class d_{static __wrap(t){const _=Object.create(d_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_linearfee_free(t)}constant(){const t=n.linearfee_constant(this.ptr);return xt.__wrap(t)}coefficient(){const t=n.linearfee_coefficient(this.ptr);return xt.__wrap(t)}static new(t,_){x(t,xt),x(_,xt);const r=n.linearfee_new(t.ptr,_.ptr);return d_.__wrap(r)}}class p_{static __wrap(t){const _=Object.create(p_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_mirtostakecredentials_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.mirtostakecredentials_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.mirtostakecredentials_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return p_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.mirtostakecredentials_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.mirtostakecredentials_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return p_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.mirtostakecredentials_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.mirtostakecredentials_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.mirtostakecredentials_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return p_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.mirtostakecredentials_new();return p_.__wrap(t)}len(){return n.mirtostakecredentials_len(this.ptr)>>>0}insert(t,_){x(t,lr),x(_,r_);const r=n.mirtostakecredentials_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:r_.__wrap(r)}get(t){x(t,lr);const _=n.mirtostakecredentials_get(this.ptr,t.ptr);return 0===_?void 0:r_.__wrap(_)}keys(){const t=n.mirtostakecredentials_keys(this.ptr);return wr.__wrap(t)}}class u_{static __wrap(t){const _=Object.create(u_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_metadatalist_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.metadatalist_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.metadatalist_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return u_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.metadatalist_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.metadatalist_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return u_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.metadatalist_new();return u_.__wrap(t)}len(){return n.metadatalist_len(this.ptr)>>>0}get(t){const _=n.metadatalist_get(this.ptr,t);return Ir.__wrap(_)}add(t){x(t,Ir),n.metadatalist_add(this.ptr,t.ptr)}}class l_{static __wrap(t){const _=Object.create(l_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_metadatamap_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.metadatamap_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.metadatamap_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return l_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.metadatamap_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.metadatamap_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return l_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.metadatamap_new();return l_.__wrap(t)}len(){return n.metadatamap_len(this.ptr)>>>0}insert(t,_){x(t,Ir),x(_,Ir);const r=n.metadatamap_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:Ir.__wrap(r)}insert_str(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),s=l;x(_,Ir),n.metadatamap_insert_str(o,this.ptr,i,s,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return 0===r?void 0:Ir.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}insert_i32(t,_){x(_,Ir);const r=n.metadatamap_insert_i32(this.ptr,t,_.ptr);return 0===r?void 0:Ir.__wrap(r)}get(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,Ir),n.metadatamap_get(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_str(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.metadatamap_get_str(e,this.ptr,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_i32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.metadatamap_get_i32(e,this.ptr,t);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}has(t){return x(t,Ir),0!==n.metadatamap_has(this.ptr,t.ptr)}keys(){const t=n.metadatamap_keys(this.ptr);return u_.__wrap(t)}}class w_{static __wrap(t){const _=Object.create(w_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_mint_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.mint_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.mint_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return w_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.mint_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.mint_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return w_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.mint_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.mint_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.mint_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return w_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.mint_new();return w_.__wrap(t)}static new_from_entry(t,_){x(t,ir),x(_,f_);const r=n.mint_new_from_entry(t.ptr,_.ptr);return w_.__wrap(r)}len(){return n.mint_len(this.ptr)>>>0}insert(t,_){x(t,ir),x(_,f_);const r=n.mint_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:f_.__wrap(r)}get(t){x(t,ir);const _=n.mint_get(this.ptr,t.ptr);return 0===_?void 0:f_.__wrap(_)}get_all(t){x(t,ir);const _=n.mint_get_all(this.ptr,t.ptr);return 0===_?void 0:g_.__wrap(_)}keys(){const t=n.mint_keys(this.ptr);return ar.__wrap(t)}as_positive_multiasset(){const t=n.mint_as_positive_multiasset(this.ptr);return v_.__wrap(t)}as_negative_multiasset(){const t=n.mint_as_negative_multiasset(this.ptr);return v_.__wrap(t)}}class f_{static __wrap(t){const _=Object.create(f_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_mintassets_free(t)}static new(){const t=n.mintassets_new();return f_.__wrap(t)}static new_from_entry(t,_){x(t,ft),x(_,r_);var r=_.ptr;_.ptr=0;const e=n.mintassets_new_from_entry(t.ptr,r);return f_.__wrap(e)}len(){return n.mintassets_len(this.ptr)>>>0}insert(t,_){x(t,ft),x(_,r_);var r=_.ptr;_.ptr=0;const e=n.mintassets_insert(this.ptr,t.ptr,r);return 0===e?void 0:r_.__wrap(e)}get(t){x(t,ft);const _=n.mintassets_get(this.ptr,t.ptr);return 0===_?void 0:r_.__wrap(_)}keys(){const t=n.mintassets_keys(this.ptr);return ht.__wrap(t)}}class h_{static __wrap(t){const _=Object.create(h_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_mintbuilder_free(t)}static new(){const t=n.mintbuilder_new();return h_.__wrap(t)}add_asset(t,_,r){x(t,b_),x(_,ft),x(r,r_),n.mintbuilder_add_asset(this.ptr,t.ptr,_.ptr,r.ptr)}set_asset(t,_,r){x(t,b_),x(_,ft),x(r,r_),n.mintbuilder_set_asset(this.ptr,t.ptr,_.ptr,r.ptr)}build(){const t=n.mintbuilder_build(this.ptr);return w_.__wrap(t)}get_native_scripts(){const t=n.mintbuilder_get_native_scripts(this.ptr);return j_.__wrap(t)}get_plutus_witnesses(){const t=n.mintbuilder_get_plutus_witnesses(this.ptr);return L_.__wrap(t)}get_redeeemers(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.mintbuilder_get_redeeemers(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return J_.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}has_plutus_scripts(){return 0!==n.mintbuilder_has_plutus_scripts(this.ptr)}has_native_scripts(){return 0!==n.mintbuilder_has_native_scripts(this.ptr)}}class b_{static __wrap(t){const _=Object.create(b_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_mintwitness_free(t)}static new_native_script(t){x(t,x_);const _=n.mintwitness_new_native_script(t.ptr);return b_.__wrap(_)}static new_plutus_script(t,_){x(t,U_),x(_,Z_);const r=n.mintwitness_new_plutus_script(t.ptr,_.ptr);return b_.__wrap(r)}}class g_{static __wrap(t){const _=Object.create(g_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_mintsassets_free(t)}}class y_{static __wrap(t){const _=Object.create(y_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_moveinstantaneousreward_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousreward_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.moveinstantaneousreward_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return y_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousreward_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.moveinstantaneousreward_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return y_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousreward_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousreward_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.moveinstantaneousreward_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return y_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_to_other_pot(t,_){x(_,xt);const r=n.moveinstantaneousreward_new_to_other_pot(t,_.ptr);return y_.__wrap(r)}static new_to_stake_creds(t,_){x(_,p_);const r=n.moveinstantaneousreward_new_to_stake_creds(t,_.ptr);return y_.__wrap(r)}pot(){return n.moveinstantaneousreward_pot(this.ptr)>>>0}kind(){return n.moveinstantaneousreward_kind(this.ptr)>>>0}as_to_other_pot(){const t=n.moveinstantaneousreward_as_to_other_pot(this.ptr);return 0===t?void 0:xt.__wrap(t)}as_to_stake_creds(){const t=n.moveinstantaneousreward_as_to_stake_creds(this.ptr);return 0===t?void 0:p_.__wrap(t)}}class m_{static __wrap(t){const _=Object.create(m_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_moveinstantaneousrewardscert_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousrewardscert_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.moveinstantaneousrewardscert_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return m_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousrewardscert_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.moveinstantaneousrewardscert_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return m_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousrewardscert_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.moveinstantaneousrewardscert_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.moveinstantaneousrewardscert_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return m_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}move_instantaneous_reward(){const t=n.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);return y_.__wrap(t)}static new(t){x(t,y_);const _=n.moveinstantaneousrewardscert_new(t.ptr);return m_.__wrap(_)}}class v_{static __wrap(t){const _=Object.create(v_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_multiasset_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.multiasset_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.multiasset_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return v_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.multiasset_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.multiasset_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return v_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.multiasset_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.multiasset_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.multiasset_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return v_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.multiasset_new();return v_.__wrap(t)}len(){return n.multiasset_len(this.ptr)>>>0}insert(t,_){x(t,ir),x(_,bt);const r=n.multiasset_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:bt.__wrap(r)}get(t){x(t,ir);const _=n.multiasset_get(this.ptr,t.ptr);return 0===_?void 0:bt.__wrap(_)}set_asset(t,_,r){x(t,ir),x(_,ft),x(r,xt);var e=r.ptr;r.ptr=0;const o=n.multiasset_set_asset(this.ptr,t.ptr,_.ptr,e);return 0===o?void 0:xt.__wrap(o)}get_asset(t,_){x(t,ir),x(_,ft);const r=n.multiasset_get_asset(this.ptr,t.ptr,_.ptr);return xt.__wrap(r)}keys(){const t=n.multiasset_keys(this.ptr);return ar.__wrap(t)}sub(t){x(t,v_);const _=n.multiasset_sub(this.ptr,t.ptr);return v_.__wrap(_)}}class k_{static __wrap(t){const _=Object.create(k_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_multihostname_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.multihostname_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.multihostname_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return k_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.multihostname_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.multihostname_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return k_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.multihostname_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.multihostname_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.multihostname_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return k_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}dns_name(){const t=n.multihostname_dns_name(this.ptr);return Pt.__wrap(t)}static new(t){x(t,Pt);const _=n.multihostname_new(t.ptr);return k_.__wrap(_)}}class x_{static __wrap(t){const _=Object.create(x_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_nativescript_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.nativescript_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.nativescript_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return x_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.nativescript_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.nativescript_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return x_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.nativescript_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.nativescript_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.nativescript_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return x_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}hash(){const t=n.nativescript_hash(this.ptr);return ir.__wrap(t)}static new_script_pubkey(t){x(t,cr);const _=n.nativescript_new_script_pubkey(t.ptr);return x_.__wrap(_)}static new_script_all(t){x(t,nr);const _=n.nativescript_new_script_all(t.ptr);return x_.__wrap(_)}static new_script_any(t){x(t,er);const _=n.nativescript_new_script_any(t.ptr);return x_.__wrap(_)}static new_script_n_of_k(t){x(t,sr);const _=n.nativescript_new_script_n_of_k(t.ptr);return x_.__wrap(_)}static new_timelock_start(t){x(t,mr);const _=n.nativescript_new_timelock_start(t.ptr);return x_.__wrap(_)}static new_timelock_expiry(t){x(t,yr);const _=n.nativescript_new_timelock_expiry(t.ptr);return x_.__wrap(_)}kind(){return n.nativescript_kind(this.ptr)>>>0}as_script_pubkey(){const t=n.nativescript_as_script_pubkey(this.ptr);return 0===t?void 0:cr.__wrap(t)}as_script_all(){const t=n.nativescript_as_script_all(this.ptr);return 0===t?void 0:nr.__wrap(t)}as_script_any(){const t=n.nativescript_as_script_any(this.ptr);return 0===t?void 0:er.__wrap(t)}as_script_n_of_k(){const t=n.nativescript_as_script_n_of_k(this.ptr);return 0===t?void 0:sr.__wrap(t)}as_timelock_start(){const t=n.nativescript_as_timelock_start(this.ptr);return 0===t?void 0:mr.__wrap(t)}as_timelock_expiry(){const t=n.nativescript_as_timelock_expiry(this.ptr);return 0===t?void 0:yr.__wrap(t)}get_required_signers(){const t=n.nativescript_get_required_signers(this.ptr);return zt.__wrap(t)}}class j_{static __wrap(t){const _=Object.create(j_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_nativescripts_free(t)}static new(){const t=n.nativescripts_new();return j_.__wrap(t)}len(){return n.nativescripts_len(this.ptr)>>>0}get(t){const _=n.nativescripts_get(this.ptr,t);return x_.__wrap(_)}add(t){x(t,x_),n.nativescripts_add(this.ptr,t.ptr)}}class A_{static __wrap(t){const _=Object.create(A_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_networkid_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.networkid_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.networkid_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return A_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.networkid_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.networkid_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return A_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.networkid_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.networkid_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.networkid_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return A_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static testnet(){const t=n.networkid_testnet();return A_.__wrap(t)}static mainnet(){const t=n.networkid_mainnet();return A_.__wrap(t)}kind(){return n.networkid_kind(this.ptr)>>>0}}class E_{static __wrap(t){const _=Object.create(E_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_networkinfo_free(t)}static new(t,_){const r=n.networkinfo_new(t,_);return E_.__wrap(r)}network_id(){return n.networkinfo_network_id(this.ptr)}protocol_magic(){return n.networkinfo_protocol_magic(this.ptr)>>>0}static testnet_preview(){const t=n.networkinfo_testnet_preview();return E_.__wrap(t)}static testnet_preprod(){const t=n.networkinfo_testnet_preprod();return E_.__wrap(t)}static testnet(){const t=n.networkinfo_testnet();return E_.__wrap(t)}static mainnet(){const t=n.networkinfo_mainnet();return E_.__wrap(t)}}class O_{static __wrap(t){const _=Object.create(O_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_nonce_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.nonce_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.nonce_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return O_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.nonce_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.nonce_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return O_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.nonce_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.nonce_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.nonce_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return O_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_identity(){const t=n.nonce_new_identity();return O_.__wrap(t)}static new_from_hash(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.nonce_new_from_hash(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return O_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_hash(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.nonce_get_hash(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];let e;return 0!==t&&(e=v(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class S_{static __wrap(t){const _=Object.create(S_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_operationalcert_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.operationalcert_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.operationalcert_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return S_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.operationalcert_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.operationalcert_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return S_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.operationalcert_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.operationalcert_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.operationalcert_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return S_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}hot_vkey(){const t=n.operationalcert_hot_vkey(this.ptr);return i_.__wrap(t)}sequence_number(){return n.operationalcert_sequence_number(this.ptr)>>>0}kes_period(){return n.operationalcert_kes_period(this.ptr)>>>0}sigma(){const t=n.operationalcert_sigma(this.ptr);return Ht.__wrap(t)}static new(t,_,r,e){x(t,i_),x(e,Ht);const o=n.operationalcert_new(t.ptr,_,r,e.ptr);return S_.__wrap(o)}}class B_{static __wrap(t){const _=Object.create(B_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutusdata_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.plutusdata_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.plutusdata_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return B_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutusdata_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.plutusdata_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return B_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_constr_plutus_data(t){x(t,Ut);const _=n.plutusdata_new_constr_plutus_data(t.ptr);return B_.__wrap(_)}static new_empty_constr_plutus_data(t){x(t,xt);const _=n.plutusdata_new_empty_constr_plutus_data(t.ptr);return B_.__wrap(_)}static new_map(t){x(t,R_);const _=n.plutusdata_new_map(t.ptr);return B_.__wrap(_)}static new_list(t){x(t,C_);const _=n.plutusdata_new_list(t.ptr);return B_.__wrap(_)}static new_integer(t){x(t,kt);const _=n.plutusdata_new_integer(t.ptr);return B_.__wrap(_)}static new_bytes(t){const _=k(t,n.__wbindgen_malloc),r=l,e=n.plutusdata_new_bytes(_,r);return B_.__wrap(e)}kind(){return n.plutusdata_kind(this.ptr)>>>0}as_constr_plutus_data(){const t=n.plutusdata_as_constr_plutus_data(this.ptr);return 0===t?void 0:Ut.__wrap(t)}as_map(){const t=n.plutusdata_as_map(this.ptr);return 0===t?void 0:R_.__wrap(t)}as_list(){const t=n.plutusdata_as_list(this.ptr);return 0===t?void 0:C_.__wrap(t)}as_integer(){const t=n.plutusdata_as_integer(this.ptr);return 0===t?void 0:kt.__wrap(t)}as_bytes(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutusdata_as_bytes(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];let e;return 0!==t&&(e=v(t,_).slice(),n.__wbindgen_free(t,1*_)),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16);n.plutusdata_to_json(c,this.ptr,t);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_json(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),s=l;n.plutusdata_from_json(o,i,s,_);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return B_.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class C_{static __wrap(t){const _=Object.create(C_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutuslist_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.plutuslist_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.plutuslist_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return C_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutuslist_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.plutuslist_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return C_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.plutuslist_new();return C_.__wrap(t)}len(){return n.plutuslist_len(this.ptr)>>>0}get(t){const _=n.plutuslist_get(this.ptr,t);return B_.__wrap(_)}add(t){x(t,B_),n.plutuslist_add(this.ptr,t.ptr)}}class R_{static __wrap(t){const _=Object.create(R_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutusmap_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.plutusmap_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.plutusmap_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return R_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutusmap_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.plutusmap_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return R_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.plutusmap_new();return R_.__wrap(t)}len(){return n.plutusmap_len(this.ptr)>>>0}insert(t,_){x(t,B_),x(_,B_);const r=n.plutusmap_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:B_.__wrap(r)}get(t){x(t,B_);const _=n.plutusmap_get(this.ptr,t.ptr);return 0===_?void 0:B_.__wrap(_)}keys(){const t=n.plutusmap_keys(this.ptr);return C_.__wrap(t)}}class I_{static __wrap(t){const _=Object.create(I_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutusscript_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscript_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.plutusscript_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return I_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscript_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.plutusscript_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return I_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){const _=k(t,n.__wbindgen_malloc),r=l,e=n.plutusscript_new(_,r);return I_.__wrap(e)}static new_v2(t){const _=k(t,n.__wbindgen_malloc),r=l,e=n.plutusscript_new_v2(_,r);return I_.__wrap(e)}static new_with_version(t,_){const r=k(t,n.__wbindgen_malloc),e=l;x(_,a_);const o=n.plutusscript_new_with_version(r,e,_.ptr);return I_.__wrap(o)}bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscript_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes_v2(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.plutusscript_from_bytes_v2(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return I_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes_with_version(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=k(t,n.__wbindgen_malloc),s=l;x(_,a_),n.plutusscript_from_bytes_with_version(o,i,s,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return I_.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_hex_with_version(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),s=l;x(_,a_),n.plutusscript_from_hex_with_version(o,i,s,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return I_.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}hash(){const t=n.plutusscript_hash(this.ptr);return ir.__wrap(t)}language_version(){const t=n.plutusscript_language_version(this.ptr);return a_.__wrap(t)}}class U_{static __wrap(t){const _=Object.create(U_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutusscriptsource_free(t)}static new(t){x(t,I_);const _=n.plutusscriptsource_new(t.ptr);return U_.__wrap(_)}static new_ref_input(t,_){x(t,ir),x(_,Cr);const r=n.plutusscriptsource_new_ref_input(t.ptr,_.ptr);return U_.__wrap(r)}static new_ref_input_with_lang_ver(t,_,r){x(t,ir),x(_,Cr),x(r,a_);const e=n.plutusscriptsource_new_ref_input_with_lang_ver(t.ptr,_.ptr,r.ptr);return U_.__wrap(e)}}class T_{static __wrap(t){const _=Object.create(T_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutusscripts_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscripts_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.plutusscripts_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return T_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscripts_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.plutusscripts_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return T_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscripts_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.plutusscripts_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.plutusscripts_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return T_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.plutusscripts_new();return T_.__wrap(t)}len(){return n.plutusscripts_len(this.ptr)>>>0}get(t){const _=n.plutusscripts_get(this.ptr,t);return I_.__wrap(_)}add(t){x(t,I_),n.plutusscripts_add(this.ptr,t.ptr)}}class N_{static __wrap(t){const _=Object.create(N_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutuswitness_free(t)}static new(t,_,r){x(t,I_),x(_,B_),x(r,Z_);const e=n.plutuswitness_new(t.ptr,_.ptr,r.ptr);return N_.__wrap(e)}static new_with_ref(t,_,r){x(t,U_),x(_,qt),x(r,Z_);const e=n.plutuswitness_new_with_ref(t.ptr,_.ptr,r.ptr);return N_.__wrap(e)}static new_without_datum(t,_){x(t,I_),x(_,Z_);const r=n.plutuswitness_new_without_datum(t.ptr,_.ptr);return N_.__wrap(r)}script(){const t=n.plutuswitness_script(this.ptr);return 0===t?void 0:I_.__wrap(t)}datum(){const t=n.plutuswitness_datum(this.ptr);return 0===t?void 0:B_.__wrap(t)}redeemer(){const t=n.plutuswitness_redeemer(this.ptr);return Z_.__wrap(t)}}class L_{static __wrap(t){const _=Object.create(L_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_plutuswitnesses_free(t)}static new(){const t=n.plutuswitnesses_new();return L_.__wrap(t)}len(){return n.plutuswitnesses_len(this.ptr)>>>0}get(t){const _=n.plutuswitnesses_get(this.ptr,t);return N_.__wrap(_)}add(t){x(t,N_),n.plutuswitnesses_add(this.ptr,t.ptr)}}class P_{static __wrap(t){const _=Object.create(P_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_pointer_free(t)}static new(t,_,r){const e=n.pointer_new(t,_,r);return P_.__wrap(e)}static new_pointer(t,_,r){x(t,xt),x(_,xt),x(r,xt);const e=n.pointer_new_pointer(t.ptr,_.ptr,r.ptr);return P_.__wrap(e)}slot(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.pointer_slot(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}tx_index(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.pointer_tx_index(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}cert_index(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.pointer_cert_index(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}slot_bignum(){const t=n.pointer_slot_bignum(this.ptr);return xt.__wrap(t)}tx_index_bignum(){const t=n.pointer_tx_index_bignum(this.ptr);return xt.__wrap(t)}cert_index_bignum(){const t=n.pointer_cert_index_bignum(this.ptr);return xt.__wrap(t)}}class M_{static __wrap(t){const _=Object.create(M_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_pointeraddress_free(t)}static new(t,_,r){x(_,lr),x(r,P_);const e=n.pointeraddress_new(t,_.ptr,r.ptr);return M_.__wrap(e)}payment_cred(){const t=n.pointeraddress_payment_cred(this.ptr);return lr.__wrap(t)}stake_pointer(){const t=n.pointeraddress_stake_pointer(this.ptr);return P_.__wrap(t)}to_address(){const t=n.pointeraddress_to_address(this.ptr);return wt.__wrap(t)}static from_address(t){x(t,wt);const _=n.pointeraddress_from_address(t.ptr);return 0===_?void 0:M_.__wrap(_)}}class F_{static __wrap(t){const _=Object.create(F_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_poolmetadata_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.poolmetadata_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.poolmetadata_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return F_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolmetadata_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolmetadata_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return F_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.poolmetadata_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolmetadata_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolmetadata_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return F_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}url(){const t=n.poolmetadata_url(this.ptr);return Kr.__wrap(t)}pool_metadata_hash(){const t=n.poolmetadata_pool_metadata_hash(this.ptr);return q_.__wrap(t)}static new(t,_){x(t,Kr),x(_,q_);const r=n.poolmetadata_new(t.ptr,_.ptr);return F_.__wrap(r)}}class q_{static __wrap(t){const _=Object.create(q_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_poolmetadatahash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.poolmetadatahash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return q_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.poolmetadatahash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.poolmetadatahash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolmetadatahash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return q_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolmetadatahash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolmetadatahash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return q_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class D_{static __wrap(t){const _=Object.create(D_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_poolparams_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.poolparams_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.poolparams_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return D_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolparams_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolparams_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return D_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.poolparams_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolparams_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolparams_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return D_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}operator(){const t=n.poolparams_operator(this.ptr);return Dt.__wrap(t)}vrf_keyhash(){const t=n.poolparams_vrf_keyhash(this.ptr);return Wr.__wrap(t)}pledge(){const t=n.poolparams_pledge(this.ptr);return xt.__wrap(t)}cost(){const t=n.poolparams_cost(this.ptr);return xt.__wrap(t)}margin(){const t=n.poolparams_margin(this.ptr);return Yr.__wrap(t)}reward_account(){const t=n.poolparams_reward_account(this.ptr);return _r.__wrap(t)}pool_owners(){const t=n.poolparams_pool_owners(this.ptr);return zt.__wrap(t)}relays(){const t=n.poolparams_relays(this.ptr);return tr.__wrap(t)}pool_metadata(){const t=n.poolparams_pool_metadata(this.ptr);return 0===t?void 0:F_.__wrap(t)}static new(t,_,r,e,o,i,a,s,c){x(t,Dt),x(_,Wr),x(r,xt),x(e,xt),x(o,Yr),x(i,_r),x(a,zt),x(s,tr);let d=0;b(c)||(x(c,F_),d=c.ptr,c.ptr=0);const p=n.poolparams_new(t.ptr,_.ptr,r.ptr,e.ptr,o.ptr,i.ptr,a.ptr,s.ptr,d);return D_.__wrap(p)}}class z_{static __wrap(t){const _=Object.create(z_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_poolregistration_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.poolregistration_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.poolregistration_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return z_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolregistration_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolregistration_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return z_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.poolregistration_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolregistration_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolregistration_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return z_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}pool_params(){const t=n.poolregistration_pool_params(this.ptr);return D_.__wrap(t)}static new(t){x(t,D_);const _=n.poolregistration_new(t.ptr);return z_.__wrap(_)}}class H_{static __wrap(t){const _=Object.create(H_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_poolretirement_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.poolretirement_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.poolretirement_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return H_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolretirement_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolretirement_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return H_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.poolretirement_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.poolretirement_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.poolretirement_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return H_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}pool_keyhash(){const t=n.poolretirement_pool_keyhash(this.ptr);return Dt.__wrap(t)}epoch(){return n.poolretirement_epoch(this.ptr)>>>0}static new(t,_){x(t,Dt);const r=n.poolretirement_new(t.ptr,_);return H_.__wrap(r)}}class K_{static __wrap(t){const _=Object.create(K_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_privatekey_free(t)}to_public(){const t=n.privatekey_to_public(this.ptr);return W_.__wrap(t)}static generate_ed25519(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.privatekey_generate_ed25519(r);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return K_.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static generate_ed25519extended(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.privatekey_generate_ed25519extended(r);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return K_.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.privatekey_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return K_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.privatekey_to_bech32(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}as_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.privatekey_as_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_extended_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.privatekey_from_extended_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return K_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_normal_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.privatekey_from_normal_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return K_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}sign(t){const _=k(t,n.__wbindgen_malloc),r=l,e=n.privatekey_sign(this.ptr,_,r);return Ht.__wrap(e)}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.privatekey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.privatekey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return K_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Y_{static __wrap(t){const _=Object.create(Y_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_proposedprotocolparameterupdates_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.proposedprotocolparameterupdates_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.proposedprotocolparameterupdates_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Y_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.proposedprotocolparameterupdates_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.proposedprotocolparameterupdates_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Y_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.proposedprotocolparameterupdates_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.proposedprotocolparameterupdates_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.proposedprotocolparameterupdates_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Y_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.proposedprotocolparameterupdates_new();return Y_.__wrap(t)}len(){return n.proposedprotocolparameterupdates_len(this.ptr)>>>0}insert(t,_){x(t,Gt),x(_,$_);const r=n.proposedprotocolparameterupdates_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:$_.__wrap(r)}get(t){x(t,Gt);const _=n.proposedprotocolparameterupdates_get(this.ptr,t.ptr);return 0===_?void 0:$_.__wrap(_)}keys(){const t=n.proposedprotocolparameterupdates_keys(this.ptr);return Zt.__wrap(t)}}class $_{static __wrap(t){const _=Object.create($_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_protocolparamupdate_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.protocolparamupdate_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.protocolparamupdate_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.protocolparamupdate_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_minfee_a(t){x(t,xt),n.protocolparamupdate_set_minfee_a(this.ptr,t.ptr)}minfee_a(){const t=n.protocolparamupdate_minfee_a(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_minfee_b(t){x(t,xt),n.protocolparamupdate_set_minfee_b(this.ptr,t.ptr)}minfee_b(){const t=n.protocolparamupdate_minfee_b(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_max_block_body_size(t){n.protocolparamupdate_set_max_block_body_size(this.ptr,t)}max_block_body_size(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_max_block_body_size(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_max_tx_size(t){n.protocolparamupdate_set_max_tx_size(this.ptr,t)}max_tx_size(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_max_tx_size(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_max_block_header_size(t){n.protocolparamupdate_set_max_block_header_size(this.ptr,t)}max_block_header_size(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_max_block_header_size(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_key_deposit(t){x(t,xt),n.protocolparamupdate_set_key_deposit(this.ptr,t.ptr)}key_deposit(){const t=n.protocolparamupdate_key_deposit(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_pool_deposit(t){x(t,xt),n.protocolparamupdate_set_pool_deposit(this.ptr,t.ptr)}pool_deposit(){const t=n.protocolparamupdate_pool_deposit(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_max_epoch(t){n.protocolparamupdate_set_max_epoch(this.ptr,t)}max_epoch(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_max_epoch(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_n_opt(t){n.protocolparamupdate_set_n_opt(this.ptr,t)}n_opt(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_n_opt(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_pool_pledge_influence(t){x(t,Yr),n.protocolparamupdate_set_pool_pledge_influence(this.ptr,t.ptr)}pool_pledge_influence(){const t=n.protocolparamupdate_pool_pledge_influence(this.ptr);return 0===t?void 0:Yr.__wrap(t)}set_expansion_rate(t){x(t,Yr),n.protocolparamupdate_set_expansion_rate(this.ptr,t.ptr)}expansion_rate(){const t=n.protocolparamupdate_expansion_rate(this.ptr);return 0===t?void 0:Yr.__wrap(t)}set_treasury_growth_rate(t){x(t,Yr),n.protocolparamupdate_set_treasury_growth_rate(this.ptr,t.ptr)}treasury_growth_rate(){const t=n.protocolparamupdate_treasury_growth_rate(this.ptr);return 0===t?void 0:Yr.__wrap(t)}d(){const t=n.protocolparamupdate_d(this.ptr);return 0===t?void 0:Yr.__wrap(t)}extra_entropy(){const t=n.protocolparamupdate_extra_entropy(this.ptr);return 0===t?void 0:O_.__wrap(t)}set_protocol_version(t){x(t,V_),n.protocolparamupdate_set_protocol_version(this.ptr,t.ptr)}protocol_version(){const t=n.protocolparamupdate_protocol_version(this.ptr);return 0===t?void 0:V_.__wrap(t)}set_min_pool_cost(t){x(t,xt),n.protocolparamupdate_set_min_pool_cost(this.ptr,t.ptr)}min_pool_cost(){const t=n.protocolparamupdate_min_pool_cost(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_ada_per_utxo_byte(t){x(t,xt),n.protocolparamupdate_set_ada_per_utxo_byte(this.ptr,t.ptr)}ada_per_utxo_byte(){const t=n.protocolparamupdate_ada_per_utxo_byte(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_cost_models(t){x(t,Nt),n.protocolparamupdate_set_cost_models(this.ptr,t.ptr)}cost_models(){const t=n.protocolparamupdate_cost_models(this.ptr);return 0===t?void 0:Nt.__wrap(t)}set_execution_costs(t){x(t,Yt),n.protocolparamupdate_set_execution_costs(this.ptr,t.ptr)}execution_costs(){const t=n.protocolparamupdate_execution_costs(this.ptr);return 0===t?void 0:Yt.__wrap(t)}set_max_tx_ex_units(t){x(t,$t),n.protocolparamupdate_set_max_tx_ex_units(this.ptr,t.ptr)}max_tx_ex_units(){const t=n.protocolparamupdate_max_tx_ex_units(this.ptr);return 0===t?void 0:$t.__wrap(t)}set_max_block_ex_units(t){x(t,$t),n.protocolparamupdate_set_max_block_ex_units(this.ptr,t.ptr)}max_block_ex_units(){const t=n.protocolparamupdate_max_block_ex_units(this.ptr);return 0===t?void 0:$t.__wrap(t)}set_max_value_size(t){n.protocolparamupdate_set_max_value_size(this.ptr,t)}max_value_size(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_max_value_size(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_collateral_percentage(t){n.protocolparamupdate_set_collateral_percentage(this.ptr,t)}collateral_percentage(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_collateral_percentage(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_max_collateral_inputs(t){n.protocolparamupdate_set_max_collateral_inputs(this.ptr,t)}max_collateral_inputs(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolparamupdate_max_collateral_inputs(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.protocolparamupdate_new();return $_.__wrap(t)}}class V_{static __wrap(t){const _=Object.create(V_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_protocolversion_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.protocolversion_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.protocolversion_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return V_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolversion_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.protocolversion_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return V_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.protocolversion_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.protocolversion_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.protocolversion_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return V_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}major(){return n.protocolversion_major(this.ptr)>>>0}minor(){return n.protocolversion_minor(this.ptr)>>>0}static new(t,_){const r=n.protocolversion_new(t,_);return V_.__wrap(r)}}class W_{static __wrap(t){const _=Object.create(W_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_publickey_free(t)}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.publickey_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return W_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.publickey_to_bech32(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}as_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.publickey_as_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.publickey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return W_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}verify(t,_){const r=k(t,n.__wbindgen_malloc),e=l;return x(_,Ht),0!==n.publickey_verify(this.ptr,r,e,_.ptr)}hash(){const t=n.publickey_hash(this.ptr);return Dt.__wrap(t)}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.publickey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.publickey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return W_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class G_{static __wrap(t){const _=Object.create(G_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_publickeys_free(t)}constructor(){const t=n.publickeys_new();return G_.__wrap(t)}size(){return n.publickeys_size(this.ptr)>>>0}get(t){const _=n.publickeys_get(this.ptr,t);return W_.__wrap(_)}add(t){x(t,W_),n.publickeys_add(this.ptr,t.ptr)}}class Z_{static __wrap(t){const _=Object.create(Z_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_redeemer_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.redeemer_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.redeemer_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Z_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemer_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.redeemer_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Z_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.redeemer_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemer_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.redeemer_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Z_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}tag(){const t=n.redeemer_tag(this.ptr);return X_.__wrap(t)}index(){const t=n.redeemer_index(this.ptr);return xt.__wrap(t)}data(){const t=n.redeemer_data(this.ptr);return B_.__wrap(t)}ex_units(){const t=n.redeemer_ex_units(this.ptr);return $t.__wrap(t)}static new(t,_,r,e){x(t,X_),x(_,xt),x(r,B_),x(e,$t);const o=n.redeemer_new(t.ptr,_.ptr,r.ptr,e.ptr);return Z_.__wrap(o)}}class X_{static __wrap(t){const _=Object.create(X_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_redeemertag_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.redeemertag_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.redeemertag_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return X_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemertag_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.redeemertag_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return X_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.redeemertag_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemertag_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.redeemertag_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return X_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_spend(){const t=n.redeemertag_new_spend();return X_.__wrap(t)}static new_mint(){const t=n.redeemertag_new_mint();return X_.__wrap(t)}static new_cert(){const t=n.redeemertag_new_cert();return X_.__wrap(t)}static new_reward(){const t=n.redeemertag_new_reward();return X_.__wrap(t)}kind(){return n.redeemertag_kind(this.ptr)>>>0}}class J_{static __wrap(t){const _=Object.create(J_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_redeemers_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.redeemers_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.redeemers_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return J_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemers_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.redeemers_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return J_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.redeemers_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemers_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.redeemers_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return J_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.redeemers_new();return J_.__wrap(t)}len(){return n.redeemers_len(this.ptr)>>>0}get(t){const _=n.redeemers_get(this.ptr,t);return Z_.__wrap(_)}add(t){x(t,Z_),n.redeemers_add(this.ptr,t.ptr)}total_ex_units(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.redeemers_total_ex_units(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return $t.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Q_{static __wrap(t){const _=Object.create(Q_.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_relay_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.relay_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.relay_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Q_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.relay_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.relay_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Q_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.relay_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.relay_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.relay_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Q_.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_single_host_addr(t){x(t,pr);const _=n.relay_new_single_host_addr(t.ptr);return Q_.__wrap(_)}static new_single_host_name(t){x(t,ur);const _=n.relay_new_single_host_name(t.ptr);return Q_.__wrap(_)}static new_multi_host_name(t){x(t,k_);const _=n.relay_new_multi_host_name(t.ptr);return Q_.__wrap(_)}kind(){return n.relay_kind(this.ptr)>>>0}as_single_host_addr(){const t=n.relay_as_single_host_addr(this.ptr);return 0===t?void 0:pr.__wrap(t)}as_single_host_name(){const t=n.relay_as_single_host_name(this.ptr);return 0===t?void 0:ur.__wrap(t)}as_multi_host_name(){const t=n.relay_as_multi_host_name(this.ptr);return 0===t?void 0:k_.__wrap(t)}}class tr{static __wrap(t){const _=Object.create(tr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_relays_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.relays_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.relays_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return tr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.relays_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.relays_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return tr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.relays_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.relays_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.relays_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return tr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.relays_new();return tr.__wrap(t)}len(){return n.relays_len(this.ptr)>>>0}get(t){const _=n.relays_get(this.ptr,t);return Q_.__wrap(_)}add(t){x(t,Q_),n.relays_add(this.ptr,t.ptr)}}class _r{static __wrap(t){const _=Object.create(_r.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_rewardaddress_free(t)}static new(t,_){x(_,lr);const r=n.rewardaddress_new(t,_.ptr);return _r.__wrap(r)}payment_cred(){const t=n.rewardaddress_payment_cred(this.ptr);return lr.__wrap(t)}to_address(){const t=n.rewardaddress_to_address(this.ptr);return wt.__wrap(t)}static from_address(t){x(t,wt);const _=n.rewardaddress_from_address(t.ptr);return 0===_?void 0:_r.__wrap(_)}}class rr{static __wrap(t){const _=Object.create(rr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_rewardaddresses_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.rewardaddresses_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.rewardaddresses_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return rr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.rewardaddresses_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.rewardaddresses_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return rr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.rewardaddresses_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.rewardaddresses_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.rewardaddresses_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return rr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.rewardaddresses_new();return rr.__wrap(t)}len(){return n.rewardaddresses_len(this.ptr)>>>0}get(t){const _=n.rewardaddresses_get(this.ptr,t);return _r.__wrap(_)}add(t){x(t,_r),n.rewardaddresses_add(this.ptr,t.ptr)}}class nr{static __wrap(t){const _=Object.create(nr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scriptall_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scriptall_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scriptall_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return nr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptall_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptall_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return nr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.scriptall_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptall_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptall_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return nr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}native_scripts(){const t=n.scriptall_native_scripts(this.ptr);return j_.__wrap(t)}static new(t){x(t,j_);const _=n.scriptall_new(t.ptr);return nr.__wrap(_)}}class er{static __wrap(t){const _=Object.create(er.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scriptany_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scriptany_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scriptany_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return er.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptany_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptany_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return er.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.scriptany_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptany_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptany_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return er.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}native_scripts(){const t=n.scriptany_native_scripts(this.ptr);return j_.__wrap(t)}static new(t){x(t,j_);const _=n.scriptany_new(t.ptr);return er.__wrap(_)}}class or{static __wrap(t){const _=Object.create(or.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scriptdatahash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scriptdatahash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return or.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scriptdatahash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.scriptdatahash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptdatahash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return or.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptdatahash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptdatahash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return or.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class ir{static __wrap(t){const _=Object.create(ir.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scripthash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scripthash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scripthash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.scripthash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scripthash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scripthash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scripthash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class ar{static __wrap(t){const _=Object.create(ar.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scripthashes_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scripthashes_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scripthashes_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ar.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scripthashes_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scripthashes_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ar.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.scripthashes_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scripthashes_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scripthashes_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ar.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.scripthashes_new();return ar.__wrap(t)}len(){return n.scripthashes_len(this.ptr)>>>0}get(t){const _=n.scripthashes_get(this.ptr,t);return ir.__wrap(_)}add(t){x(t,ir),n.scripthashes_add(this.ptr,t.ptr)}}class sr{static __wrap(t){const _=Object.create(sr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scriptnofk_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scriptnofk_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scriptnofk_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return sr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptnofk_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptnofk_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return sr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.scriptnofk_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptnofk_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptnofk_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return sr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}n(){return n.scriptnofk_n(this.ptr)>>>0}native_scripts(){const t=n.scriptnofk_native_scripts(this.ptr);return j_.__wrap(t)}static new(t,_){x(_,j_);const r=n.scriptnofk_new(t,_.ptr);return sr.__wrap(r)}}class cr{static __wrap(t){const _=Object.create(cr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scriptpubkey_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scriptpubkey_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scriptpubkey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return cr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptpubkey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptpubkey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return cr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.scriptpubkey_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptpubkey_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptpubkey_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return cr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}addr_keyhash(){const t=n.scriptpubkey_addr_keyhash(this.ptr);return Dt.__wrap(t)}static new(t){x(t,Dt);const _=n.scriptpubkey_new(t.ptr);return cr.__wrap(_)}}class dr{static __wrap(t){const _=Object.create(dr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_scriptref_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.scriptref_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.scriptref_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return dr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptref_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptref_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return dr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.scriptref_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.scriptref_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.scriptref_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return dr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_native_script(t){x(t,x_);const _=n.scriptref_new_native_script(t.ptr);return dr.__wrap(_)}static new_plutus_script(t){x(t,I_);const _=n.scriptref_new_plutus_script(t.ptr);return dr.__wrap(_)}is_native_script(){return 0!==n.scriptref_is_native_script(this.ptr)}is_plutus_script(){return 0!==n.scriptref_is_plutus_script(this.ptr)}native_script(){const t=n.scriptref_native_script(this.ptr);return 0===t?void 0:x_.__wrap(t)}plutus_script(){const t=n.scriptref_plutus_script(this.ptr);return 0===t?void 0:I_.__wrap(t)}}class pr{static __wrap(t){const _=Object.create(pr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_singlehostaddr_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostaddr_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.singlehostaddr_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return pr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostaddr_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.singlehostaddr_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return pr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostaddr_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostaddr_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.singlehostaddr_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return pr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}port(){const t=n.singlehostaddr_port(this.ptr);return 16777215===t?void 0:t}ipv4(){const t=n.singlehostaddr_ipv4(this.ptr);return 0===t?void 0:n_.__wrap(t)}ipv6(){const t=n.singlehostaddr_ipv6(this.ptr);return 0===t?void 0:e_.__wrap(t)}static new(t,_,r){let e=0;b(_)||(x(_,n_),e=_.ptr,_.ptr=0);let o=0;b(r)||(x(r,e_),o=r.ptr,r.ptr=0);const i=n.singlehostaddr_new(b(t)?16777215:t,e,o);return pr.__wrap(i)}}class ur{static __wrap(t){const _=Object.create(ur.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_singlehostname_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostname_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.singlehostname_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ur.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostname_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.singlehostname_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ur.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostname_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.singlehostname_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.singlehostname_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return ur.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}port(){const t=n.singlehostname_port(this.ptr);return 16777215===t?void 0:t}dns_name(){const t=n.singlehostname_dns_name(this.ptr);return Lt.__wrap(t)}static new(t,_){x(_,Lt);const r=n.singlehostname_new(b(t)?16777215:t,_.ptr);return ur.__wrap(r)}}class lr{static __wrap(t){const _=Object.create(lr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_stakecredential_free(t)}static from_keyhash(t){x(t,Dt);const _=n.stakecredential_from_keyhash(t.ptr);return lr.__wrap(_)}static from_scripthash(t){x(t,ir);const _=n.stakecredential_from_scripthash(t.ptr);return lr.__wrap(_)}to_keyhash(){const t=n.stakecredential_to_keyhash(this.ptr);return 0===t?void 0:Dt.__wrap(t)}to_scripthash(){const t=n.stakecredential_to_scripthash(this.ptr);return 0===t?void 0:ir.__wrap(t)}kind(){return n.stakecredential_kind(this.ptr)>>>0}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredential_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.stakecredential_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return lr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredential_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakecredential_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return lr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredential_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredential_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakecredential_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return lr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class wr{static __wrap(t){const _=Object.create(wr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_stakecredentials_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredentials_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.stakecredentials_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredentials_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakecredentials_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredentials_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakecredentials_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakecredentials_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return wr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.stakecredentials_new();return wr.__wrap(t)}len(){return n.stakecredentials_len(this.ptr)>>>0}get(t){const _=n.stakecredentials_get(this.ptr,t);return lr.__wrap(_)}add(t){x(t,lr),n.stakecredentials_add(this.ptr,t.ptr)}}class fr{static __wrap(t){const _=Object.create(fr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_stakedelegation_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.stakedelegation_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.stakedelegation_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return fr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakedelegation_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakedelegation_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return fr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.stakedelegation_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakedelegation_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakedelegation_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return fr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}stake_credential(){const t=n.stakedelegation_stake_credential(this.ptr);return lr.__wrap(t)}pool_keyhash(){const t=n.stakedelegation_pool_keyhash(this.ptr);return Dt.__wrap(t)}static new(t,_){x(t,lr),x(_,Dt);const r=n.stakedelegation_new(t.ptr,_.ptr);return fr.__wrap(r)}}class hr{static __wrap(t){const _=Object.create(hr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_stakederegistration_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.stakederegistration_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.stakederegistration_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return hr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakederegistration_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakederegistration_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return hr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.stakederegistration_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakederegistration_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakederegistration_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return hr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}stake_credential(){const t=n.stakederegistration_stake_credential(this.ptr);return lr.__wrap(t)}static new(t){x(t,lr);const _=n.stakederegistration_new(t.ptr);return hr.__wrap(_)}}class br{static __wrap(t){const _=Object.create(br.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_stakeregistration_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.stakeregistration_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.stakeregistration_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return br.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakeregistration_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakeregistration_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return br.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.stakeregistration_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.stakeregistration_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.stakeregistration_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return br.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}stake_credential(){const t=n.stakeregistration_stake_credential(this.ptr);return lr.__wrap(t)}static new(t){x(t,lr);const _=n.stakeregistration_new(t.ptr);return br.__wrap(_)}}class gr{static __wrap(t){const _=Object.create(gr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_strings_free(t)}static new(){const t=n.strings_new();return gr.__wrap(t)}len(){return n.strings_len(this.ptr)>>>0}get(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.strings_get(e,this.ptr,t);var _=y()[e/4+0],r=y()[e/4+1];return p(_,r)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(_,r)}}add(t){const _=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),r=l;n.strings_add(this.ptr,_,r)}}class yr{static __wrap(t){const _=Object.create(yr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_timelockexpiry_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.timelockexpiry_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.timelockexpiry_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return yr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.timelockexpiry_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.timelockexpiry_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return yr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.timelockexpiry_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.timelockexpiry_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.timelockexpiry_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return yr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}slot(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.timelockexpiry_slot(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}slot_bignum(){const t=n.timelockexpiry_slot_bignum(this.ptr);return xt.__wrap(t)}static new(t){const _=n.timelockexpiry_new(t);return yr.__wrap(_)}static new_timelockexpiry(t){x(t,xt);const _=n.timelockexpiry_new_timelockexpiry(t.ptr);return yr.__wrap(_)}}class mr{static __wrap(t){const _=Object.create(mr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_timelockstart_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.timelockstart_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.timelockstart_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return mr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.timelockstart_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.timelockstart_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return mr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.timelockstart_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.timelockstart_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.timelockstart_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return mr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}slot(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.timelockstart_slot(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}slot_bignum(){const t=n.timelockstart_slot_bignum(this.ptr);return xt.__wrap(t)}static new(t){const _=n.timelockstart_new(t);return mr.__wrap(_)}static new_timelockstart(t){x(t,xt);const _=n.timelockstart_new_timelockstart(t.ptr);return mr.__wrap(_)}}class vr{static __wrap(t){const _=Object.create(vr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transaction_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transaction_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transaction_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return vr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transaction_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transaction_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return vr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transaction_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transaction_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transaction_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return vr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}body(){const t=n.transaction_body(this.ptr);return Ar.__wrap(t)}witness_set(){const t=n.transaction_witness_set(this.ptr);return qr.__wrap(t)}is_valid(){return 0!==n.transaction_is_valid(this.ptr)}auxiliary_data(){const t=n.transaction_auxiliary_data(this.ptr);return 0===t?void 0:gt.__wrap(t)}set_is_valid(t){n.transaction_set_is_valid(this.ptr,t)}static new(t,_,r){x(t,Ar),x(_,qr);let e=0;b(r)||(x(r,gt),e=r.ptr,r.ptr=0);const o=n.transaction_new(t.ptr,_.ptr,e);return vr.__wrap(o)}}class kr{static __wrap(t){const _=Object.create(kr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbatch_free(t)}len(){return n.transactionbatch_len(this.ptr)>>>0}get(t){const _=n.transactionbatch_get(this.ptr,t);return vr.__wrap(_)}}class xr{static __wrap(t){const _=Object.create(xr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbatchlist_free(t)}len(){return n.transactionbatchlist_len(this.ptr)>>>0}get(t){const _=n.transactionbatchlist_get(this.ptr,t);return kr.__wrap(_)}}class jr{static __wrap(t){const _=Object.create(jr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbodies_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbodies_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionbodies_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbodies_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionbodies_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbodies_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbodies_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionbodies_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return jr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.transactionbodies_new();return jr.__wrap(t)}len(){return n.transactionbodies_len(this.ptr)>>>0}get(t){const _=n.transactionbodies_get(this.ptr,t);return Ar.__wrap(_)}add(t){x(t,Ar),n.transactionbodies_add(this.ptr,t.ptr)}}class Ar{static __wrap(t){const _=Object.create(Ar.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbody_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbody_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionbody_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ar.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbody_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionbody_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ar.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbody_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbody_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionbody_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ar.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}inputs(){const t=n.transactionbody_inputs(this.ptr);return Rr.__wrap(t)}outputs(){const t=n.transactionbody_outputs(this.ptr);return Pr.__wrap(t)}fee(){const t=n.transactionbody_fee(this.ptr);return xt.__wrap(t)}ttl(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbody_ttl(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=y()[e/4+2];if(y()[e/4+3])throw a(r);return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}ttl_bignum(){const t=n.transactionbody_ttl_bignum(this.ptr);return 0===t?void 0:xt.__wrap(t)}set_ttl(t){x(t,xt),n.transactionbody_set_ttl(this.ptr,t.ptr)}remove_ttl(){n.transactionbody_remove_ttl(this.ptr)}set_certs(t){x(t,It),n.transactionbody_set_certs(this.ptr,t.ptr)}certs(){const t=n.transactionbody_certs(this.ptr);return 0===t?void 0:It.__wrap(t)}set_withdrawals(t){x(t,_n),n.transactionbody_set_withdrawals(this.ptr,t.ptr)}withdrawals(){const t=n.transactionbody_withdrawals(this.ptr);return 0===t?void 0:_n.__wrap(t)}set_update(t){x(t,$r),n.transactionbody_set_update(this.ptr,t.ptr)}update(){const t=n.transactionbody_update(this.ptr);return 0===t?void 0:$r.__wrap(t)}set_auxiliary_data_hash(t){x(t,yt),n.transactionbody_set_auxiliary_data_hash(this.ptr,t.ptr)}auxiliary_data_hash(){const t=n.transactionbody_auxiliary_data_hash(this.ptr);return 0===t?void 0:yt.__wrap(t)}set_validity_start_interval(t){n.transactionbody_set_validity_start_interval(this.ptr,t)}set_validity_start_interval_bignum(t){x(t,xt);var _=t.ptr;t.ptr=0,n.transactionbody_set_validity_start_interval_bignum(this.ptr,_)}validity_start_interval_bignum(){const t=n.transactionbody_validity_start_interval_bignum(this.ptr);return 0===t?void 0:xt.__wrap(t)}validity_start_interval(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbody_validity_start_interval(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=y()[e/4+2];if(y()[e/4+3])throw a(r);return 0===t?void 0:_>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_mint(t){x(t,w_),n.transactionbody_set_mint(this.ptr,t.ptr)}mint(){const t=n.transactionbody_mint(this.ptr);return 0===t?void 0:w_.__wrap(t)}multiassets(){const t=n.transactionbody_multiassets(this.ptr);return 0===t?void 0:w_.__wrap(t)}set_reference_inputs(t){x(t,Rr),n.transactionbody_set_reference_inputs(this.ptr,t.ptr)}reference_inputs(){const t=n.transactionbody_reference_inputs(this.ptr);return 0===t?void 0:Rr.__wrap(t)}set_script_data_hash(t){x(t,or),n.transactionbody_set_script_data_hash(this.ptr,t.ptr)}script_data_hash(){const t=n.transactionbody_script_data_hash(this.ptr);return 0===t?void 0:or.__wrap(t)}set_collateral(t){x(t,Rr),n.transactionbody_set_collateral(this.ptr,t.ptr)}collateral(){const t=n.transactionbody_collateral(this.ptr);return 0===t?void 0:Rr.__wrap(t)}set_required_signers(t){x(t,zt),n.transactionbody_set_required_signers(this.ptr,t.ptr)}required_signers(){const t=n.transactionbody_required_signers(this.ptr);return 0===t?void 0:zt.__wrap(t)}set_network_id(t){x(t,A_),n.transactionbody_set_network_id(this.ptr,t.ptr)}network_id(){const t=n.transactionbody_network_id(this.ptr);return 0===t?void 0:A_.__wrap(t)}set_collateral_return(t){x(t,Tr),n.transactionbody_set_collateral_return(this.ptr,t.ptr)}collateral_return(){const t=n.transactionbody_collateral_return(this.ptr);return 0===t?void 0:Tr.__wrap(t)}set_total_collateral(t){x(t,xt),n.transactionbody_set_total_collateral(this.ptr,t.ptr)}total_collateral(){const t=n.transactionbody_total_collateral(this.ptr);return 0===t?void 0:xt.__wrap(t)}static new(t,_,r,e){x(t,Rr),x(_,Pr),x(r,xt);const o=n.transactionbody_new(t.ptr,_.ptr,r.ptr,!b(e),b(e)?0:e);return Ar.__wrap(o)}static new_tx_body(t,_,r){x(t,Rr),x(_,Pr),x(r,xt);const e=n.transactionbody_new_tx_body(t.ptr,_.ptr,r.ptr);return Ar.__wrap(e)}}class Er{static __wrap(t){const _=Object.create(Er.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbuilder_free(t)}add_inputs_from(t,_){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,Fr),n.transactionbuilder_add_inputs_from(e,this.ptr,t.ptr,_);var r=y()[e/4+0];if(y()[e/4+1])throw a(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_inputs(t){x(t,Hr),n.transactionbuilder_set_inputs(this.ptr,t.ptr)}set_collateral(t){x(t,Hr),n.transactionbuilder_set_collateral(this.ptr,t.ptr)}set_collateral_return(t){x(t,Tr),n.transactionbuilder_set_collateral_return(this.ptr,t.ptr)}set_collateral_return_and_total(t){try{const r=n.__wbindgen_add_to_stack_pointer(-16);x(t,Tr),n.transactionbuilder_set_collateral_return_and_total(r,this.ptr,t.ptr);var _=y()[r/4+0];if(y()[r/4+1])throw a(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_total_collateral(t){x(t,xt),n.transactionbuilder_set_total_collateral(this.ptr,t.ptr)}set_total_collateral_and_return(t,_){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,xt),x(_,wt),n.transactionbuilder_set_total_collateral_and_return(e,this.ptr,t.ptr,_.ptr);var r=y()[e/4+0];if(y()[e/4+1])throw a(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}add_reference_input(t){x(t,Cr),n.transactionbuilder_add_reference_input(this.ptr,t.ptr)}add_key_input(t,_,r){x(t,Dt),x(_,Cr),x(r,Zr),n.transactionbuilder_add_key_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_script_input(t,_,r){x(t,ir),x(_,Cr),x(r,Zr),n.transactionbuilder_add_script_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_native_script_input(t,_,r){x(t,x_),x(_,Cr),x(r,Zr),n.transactionbuilder_add_native_script_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_plutus_script_input(t,_,r){x(t,N_),x(_,Cr),x(r,Zr),n.transactionbuilder_add_plutus_script_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_bootstrap_input(t,_,r){x(t,Ct),x(_,Cr),x(r,Zr),n.transactionbuilder_add_bootstrap_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_input(t,_,r){x(t,wt),x(_,Cr),x(r,Zr),n.transactionbuilder_add_input(this.ptr,t.ptr,_.ptr,r.ptr)}count_missing_input_scripts(){return n.transactionbuilder_count_missing_input_scripts(this.ptr)>>>0}add_required_native_input_scripts(t){return x(t,j_),n.transactionbuilder_add_required_native_input_scripts(this.ptr,t.ptr)>>>0}add_required_plutus_input_scripts(t){return x(t,L_),n.transactionbuilder_add_required_plutus_input_scripts(this.ptr,t.ptr)>>>0}get_native_input_scripts(){const t=n.transactionbuilder_get_native_input_scripts(this.ptr);return 0===t?void 0:j_.__wrap(t)}get_plutus_input_scripts(){const t=n.transactionbuilder_get_plutus_input_scripts(this.ptr);return 0===t?void 0:L_.__wrap(t)}fee_for_input(t,_,r){try{const i=n.__wbindgen_add_to_stack_pointer(-16);x(t,wt),x(_,Cr),x(r,Zr),n.transactionbuilder_fee_for_input(i,this.ptr,t.ptr,_.ptr,r.ptr);var e=y()[i/4+0],o=y()[i/4+1];if(y()[i/4+2])throw a(o);return xt.__wrap(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}add_output(t){try{const r=n.__wbindgen_add_to_stack_pointer(-16);x(t,Tr),n.transactionbuilder_add_output(r,this.ptr,t.ptr);var _=y()[r/4+0];if(y()[r/4+1])throw a(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}fee_for_output(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,Tr),n.transactionbuilder_fee_for_output(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return xt.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_fee(t){x(t,xt),n.transactionbuilder_set_fee(this.ptr,t.ptr)}set_ttl(t){n.transactionbuilder_set_ttl(this.ptr,t)}set_ttl_bignum(t){x(t,xt),n.transactionbuilder_set_ttl_bignum(this.ptr,t.ptr)}set_validity_start_interval(t){n.transactionbuilder_set_validity_start_interval(this.ptr,t)}set_validity_start_interval_bignum(t){x(t,xt);var _=t.ptr;t.ptr=0,n.transactionbuilder_set_validity_start_interval_bignum(this.ptr,_)}set_certs(t){x(t,It),n.transactionbuilder_set_certs(this.ptr,t.ptr)}set_withdrawals(t){x(t,_n),n.transactionbuilder_set_withdrawals(this.ptr,t.ptr)}get_auxiliary_data(){const t=n.transactionbuilder_get_auxiliary_data(this.ptr);return 0===t?void 0:gt.__wrap(t)}set_auxiliary_data(t){x(t,gt),n.transactionbuilder_set_auxiliary_data(this.ptr,t.ptr)}set_metadata(t){x(t,Vt),n.transactionbuilder_set_metadata(this.ptr,t.ptr)}add_metadatum(t,_){x(t,xt),x(_,Ir),n.transactionbuilder_add_metadatum(this.ptr,t.ptr,_.ptr)}add_json_metadatum(t,_){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,xt);const o=h(_,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionbuilder_add_json_metadatum(e,this.ptr,t.ptr,o,i);var r=y()[e/4+0];if(y()[e/4+1])throw a(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}add_json_metadatum_with_schema(t,_,r){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,xt);const i=h(_,n.__wbindgen_malloc,n.__wbindgen_realloc),s=l;n.transactionbuilder_add_json_metadatum_with_schema(o,this.ptr,t.ptr,i,s,r);var e=y()[o/4+0];if(y()[o/4+1])throw a(e)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_mint_builder(t){x(t,h_),n.transactionbuilder_set_mint_builder(this.ptr,t.ptr)}get_mint_builder(){const t=n.transactionbuilder_get_mint_builder(this.ptr);return 0===t?void 0:h_.__wrap(t)}set_mint(t,_){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,w_),x(_,j_),n.transactionbuilder_set_mint(e,this.ptr,t.ptr,_.ptr);var r=y()[e/4+0];if(y()[e/4+1])throw a(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_mint(){const t=n.transactionbuilder_get_mint(this.ptr);return 0===t?void 0:w_.__wrap(t)}get_mint_scripts(){const t=n.transactionbuilder_get_mint_scripts(this.ptr);return 0===t?void 0:j_.__wrap(t)}set_mint_asset(t,_){x(t,x_),x(_,f_),n.transactionbuilder_set_mint_asset(this.ptr,t.ptr,_.ptr)}add_mint_asset(t,_,r){x(t,x_),x(_,ft),x(r,r_);var e=r.ptr;r.ptr=0,n.transactionbuilder_add_mint_asset(this.ptr,t.ptr,_.ptr,e)}add_mint_asset_and_output(t,_,r,e,o){try{const c=n.__wbindgen_add_to_stack_pointer(-16);x(t,x_),x(_,ft),x(r,r_);var i=r.ptr;r.ptr=0,x(e,Nr),x(o,xt),n.transactionbuilder_add_mint_asset_and_output(c,this.ptr,t.ptr,_.ptr,i,e.ptr,o.ptr);var s=y()[c/4+0];if(y()[c/4+1])throw a(s)}finally{n.__wbindgen_add_to_stack_pointer(16)}}add_mint_asset_and_output_min_required_coin(t,_,r,e){try{const s=n.__wbindgen_add_to_stack_pointer(-16);x(t,x_),x(_,ft),x(r,r_);var o=r.ptr;r.ptr=0,x(e,Nr),n.transactionbuilder_add_mint_asset_and_output_min_required_coin(s,this.ptr,t.ptr,_.ptr,o,e.ptr);var i=y()[s/4+0];if(y()[s/4+1])throw a(i)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){x(t,Or);const _=n.transactionbuilder_new(t.ptr);return Er.__wrap(_)}get_reference_inputs(){const t=n.transactionbuilder_get_reference_inputs(this.ptr);return Rr.__wrap(t)}get_explicit_input(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_get_explicit_input(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Zr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_implicit_input(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_get_implicit_input(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Zr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_total_input(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_get_total_input(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Zr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_total_output(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_get_total_output(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Zr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_explicit_output(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_get_explicit_output(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Zr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_deposit(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_get_deposit(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return xt.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}get_fee_if_set(){const t=n.transactionbuilder_get_fee_if_set(this.ptr);return 0===t?void 0:xt.__wrap(t)}add_change_if_needed(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,wt),n.transactionbuilder_add_change_if_needed(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return 0!==_}finally{n.__wbindgen_add_to_stack_pointer(16)}}calc_script_data_hash(t){try{const r=n.__wbindgen_add_to_stack_pointer(-16);x(t,Nt),n.transactionbuilder_calc_script_data_hash(r,this.ptr,t.ptr);var _=y()[r/4+0];if(y()[r/4+1])throw a(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_script_data_hash(t){x(t,or),n.transactionbuilder_set_script_data_hash(this.ptr,t.ptr)}remove_script_data_hash(){n.transactionbuilder_remove_script_data_hash(this.ptr)}add_required_signer(t){x(t,Dt),n.transactionbuilder_add_required_signer(this.ptr,t.ptr)}full_size(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_full_size(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return t>>>0}finally{n.__wbindgen_add_to_stack_pointer(16)}}output_sizes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_output_sizes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=E(t,_).slice();return n.__wbindgen_free(t,4*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}build(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_build(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Ar.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}build_tx(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_build_tx(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return vr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}build_tx_unsafe(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_build_tx_unsafe(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return vr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}min_fee(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilder_min_fee(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return xt.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Or{static __wrap(t){const _=Object.create(Or.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbuilderconfig_free(t)}}class Sr{static __wrap(t){const _=Object.create(Sr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionbuilderconfigbuilder_free(t)}static new(){const t=n.transactionbuilderconfigbuilder_new();return Sr.__wrap(t)}fee_algo(t){x(t,d_);const _=n.transactionbuilderconfigbuilder_fee_algo(this.ptr,t.ptr);return Sr.__wrap(_)}coins_per_utxo_word(t){x(t,xt);const _=n.transactionbuilderconfigbuilder_coins_per_utxo_word(this.ptr,t.ptr);return Sr.__wrap(_)}coins_per_utxo_byte(t){x(t,xt);const _=n.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr,t.ptr);return Sr.__wrap(_)}ex_unit_prices(t){x(t,Yt);const _=n.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr,t.ptr);return Sr.__wrap(_)}pool_deposit(t){x(t,xt);const _=n.transactionbuilderconfigbuilder_pool_deposit(this.ptr,t.ptr);return Sr.__wrap(_)}key_deposit(t){x(t,xt);const _=n.transactionbuilderconfigbuilder_key_deposit(this.ptr,t.ptr);return Sr.__wrap(_)}max_value_size(t){const _=n.transactionbuilderconfigbuilder_max_value_size(this.ptr,t);return Sr.__wrap(_)}max_tx_size(t){const _=n.transactionbuilderconfigbuilder_max_tx_size(this.ptr,t);return Sr.__wrap(_)}prefer_pure_change(t){const _=n.transactionbuilderconfigbuilder_prefer_pure_change(this.ptr,t);return Sr.__wrap(_)}build(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionbuilderconfigbuilder_build(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Or.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Br{static __wrap(t){const _=Object.create(Br.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionhash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionhash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Br.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionhash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.transactionhash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionhash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Br.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionhash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionhash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Br.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Cr{static __wrap(t){const _=Object.create(Cr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactioninput_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninput_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactioninput_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Cr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninput_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactioninput_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Cr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninput_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninput_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactioninput_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Cr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}transaction_id(){const t=n.transactioninput_transaction_id(this.ptr);return Br.__wrap(t)}index(){return n.transactioninput_index(this.ptr)>>>0}static new(t,_){x(t,Br);const r=n.transactioninput_new(t.ptr,_);return Cr.__wrap(r)}}class Rr{static __wrap(t){const _=Object.create(Rr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactioninputs_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninputs_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactioninputs_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Rr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninputs_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactioninputs_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Rr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninputs_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactioninputs_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactioninputs_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Rr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.transactioninputs_new();return Rr.__wrap(t)}len(){return n.transactioninputs_len(this.ptr)>>>0}get(t){const _=n.transactioninputs_get(this.ptr,t);return Cr.__wrap(_)}add(t){x(t,Cr),n.transactioninputs_add(this.ptr,t.ptr)}to_option(){const t=n.transactioninputs_to_option(this.ptr);return 0===t?void 0:Rr.__wrap(t)}}class Ir{static __wrap(t){const _=Object.create(Ir.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionmetadatum_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionmetadatum_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionmetadatum_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_map(t){x(t,l_);const _=n.transactionmetadatum_new_map(t.ptr);return Ir.__wrap(_)}static new_list(t){x(t,u_);const _=n.transactionmetadatum_new_list(t.ptr);return Ir.__wrap(_)}static new_int(t){x(t,r_);const _=n.transactionmetadatum_new_int(t.ptr);return Ir.__wrap(_)}static new_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionmetadatum_new_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new_text(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionmetadatum_new_text(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ir.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}kind(){return n.transactionmetadatum_kind(this.ptr)>>>0}as_map(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_as_map(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return l_.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_list(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_as_list(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return u_.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_int(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_as_int(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return r_.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_bytes(){try{const o=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_as_bytes(o,this.ptr);var t=y()[o/4+0],_=y()[o/4+1],r=y()[o/4+2];if(y()[o/4+3])throw a(r);var e=v(t,_).slice();return n.__wbindgen_free(t,1*_),e}finally{n.__wbindgen_add_to_stack_pointer(16)}}as_text(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatum_as_text(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}}class Ur{static __wrap(t){const _=Object.create(Ur.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionmetadatumlabels_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatumlabels_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionmetadatumlabels_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ur.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionmetadatumlabels_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionmetadatumlabels_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Ur.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.transactionmetadatumlabels_new();return Ur.__wrap(t)}len(){return n.transactionmetadatumlabels_len(this.ptr)>>>0}get(t){const _=n.transactionmetadatumlabels_get(this.ptr,t);return xt.__wrap(_)}add(t){x(t,xt),n.transactionmetadatumlabels_add(this.ptr,t.ptr)}}class Tr{static __wrap(t){const _=Object.create(Tr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionoutput_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutput_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionoutput_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Tr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutput_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionoutput_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Tr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutput_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutput_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionoutput_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Tr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}address(){const t=n.transactionoutput_address(this.ptr);return wt.__wrap(t)}amount(){const t=n.transactionoutput_amount(this.ptr);return Zr.__wrap(t)}data_hash(){const t=n.transactionoutput_data_hash(this.ptr);return 0===t?void 0:Ft.__wrap(t)}plutus_data(){const t=n.transactionoutput_plutus_data(this.ptr);return 0===t?void 0:B_.__wrap(t)}script_ref(){const t=n.transactionoutput_script_ref(this.ptr);return 0===t?void 0:dr.__wrap(t)}set_script_ref(t){x(t,dr),n.transactionoutput_set_script_ref(this.ptr,t.ptr)}set_plutus_data(t){x(t,B_),n.transactionoutput_set_plutus_data(this.ptr,t.ptr)}set_data_hash(t){x(t,Ft),n.transactionoutput_set_data_hash(this.ptr,t.ptr)}has_plutus_data(){return 0!==n.transactionoutput_has_plutus_data(this.ptr)}has_data_hash(){return 0!==n.transactionoutput_has_data_hash(this.ptr)}has_script_ref(){return 0!==n.transactionoutput_has_script_ref(this.ptr)}static new(t,_){x(t,wt),x(_,Zr);const r=n.transactionoutput_new(t.ptr,_.ptr);return Tr.__wrap(r)}}class Nr{static __wrap(t){const _=Object.create(Nr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionoutputamountbuilder_free(t)}with_value(t){x(t,Zr);const _=n.transactionoutputamountbuilder_with_value(this.ptr,t.ptr);return Nr.__wrap(_)}with_coin(t){x(t,xt);const _=n.transactionoutputamountbuilder_with_coin(this.ptr,t.ptr);return Nr.__wrap(_)}with_coin_and_asset(t,_){x(t,xt),x(_,v_);const r=n.transactionoutputamountbuilder_with_coin_and_asset(this.ptr,t.ptr,_.ptr);return Nr.__wrap(r)}with_asset_and_min_required_coin(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,v_),x(_,xt),n.transactionoutputamountbuilder_with_asset_and_min_required_coin(o,this.ptr,t.ptr,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return Nr.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}with_asset_and_min_required_coin_by_utxo_cost(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16);x(t,v_),x(_,Mt),n.transactionoutputamountbuilder_with_asset_and_min_required_coin_by_utxo_cost(o,this.ptr,t.ptr,_.ptr);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return Nr.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}build(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutputamountbuilder_build(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Tr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Lr{static __wrap(t){const _=Object.create(Lr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionoutputbuilder_free(t)}static new(){const t=n.transactionoutputbuilder_new();return Lr.__wrap(t)}with_address(t){x(t,wt);const _=n.transactionoutputbuilder_with_address(this.ptr,t.ptr);return Lr.__wrap(_)}with_data_hash(t){x(t,Ft);const _=n.transactionoutputbuilder_with_data_hash(this.ptr,t.ptr);return Lr.__wrap(_)}with_plutus_data(t){x(t,B_);const _=n.transactionoutputbuilder_with_plutus_data(this.ptr,t.ptr);return Lr.__wrap(_)}with_script_ref(t){x(t,dr);const _=n.transactionoutputbuilder_with_script_ref(this.ptr,t.ptr);return Lr.__wrap(_)}next(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutputbuilder_next(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Nr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Pr{static __wrap(t){const _=Object.create(Pr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionoutputs_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutputs_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionoutputs_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutputs_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionoutputs_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutputs_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionoutputs_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionoutputs_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Pr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.transactionoutputs_new();return Pr.__wrap(t)}len(){return n.transactionoutputs_len(this.ptr)>>>0}get(t){const _=n.transactionoutputs_get(this.ptr,t);return Tr.__wrap(_)}add(t){x(t,Tr),n.transactionoutputs_add(this.ptr,t.ptr)}}class Mr{static __wrap(t){const _=Object.create(Mr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionunspentoutput_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionunspentoutput_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionunspentoutput_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Mr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionunspentoutput_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionunspentoutput_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Mr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionunspentoutput_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionunspentoutput_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionunspentoutput_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Mr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){x(t,Cr),x(_,Tr);const r=n.transactionunspentoutput_new(t.ptr,_.ptr);return Mr.__wrap(r)}input(){const t=n.transactionunspentoutput_input(this.ptr);return Cr.__wrap(t)}output(){const t=n.transactionunspentoutput_output(this.ptr);return Tr.__wrap(t)}}class Fr{static __wrap(t){const _=Object.create(Fr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionunspentoutputs_free(t)}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionunspentoutputs_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionunspentoutputs_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionunspentoutputs_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Fr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.transactionunspentoutputs_new();return Fr.__wrap(t)}len(){return n.transactionunspentoutputs_len(this.ptr)>>>0}get(t){const _=n.transactionunspentoutputs_get(this.ptr,t);return Mr.__wrap(_)}add(t){x(t,Mr),n.transactionunspentoutputs_add(this.ptr,t.ptr)}}class qr{static __wrap(t){const _=Object.create(qr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionwitnessset_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnessset_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionwitnessset_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return qr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnessset_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionwitnessset_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return qr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnessset_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnessset_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionwitnessset_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return qr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}set_vkeys(t){x(t,tn),n.transactionwitnessset_set_vkeys(this.ptr,t.ptr)}vkeys(){const t=n.transactionwitnessset_vkeys(this.ptr);return 0===t?void 0:tn.__wrap(t)}set_native_scripts(t){x(t,j_),n.transactionwitnessset_set_native_scripts(this.ptr,t.ptr)}native_scripts(){const t=n.transactionwitnessset_native_scripts(this.ptr);return 0===t?void 0:j_.__wrap(t)}set_bootstraps(t){x(t,Bt),n.transactionwitnessset_set_bootstraps(this.ptr,t.ptr)}bootstraps(){const t=n.transactionwitnessset_bootstraps(this.ptr);return 0===t?void 0:Bt.__wrap(t)}set_plutus_scripts(t){x(t,T_),n.transactionwitnessset_set_plutus_scripts(this.ptr,t.ptr)}plutus_scripts(){const t=n.transactionwitnessset_plutus_scripts(this.ptr);return 0===t?void 0:T_.__wrap(t)}set_plutus_data(t){x(t,C_),n.transactionwitnessset_set_plutus_data(this.ptr,t.ptr)}plutus_data(){const t=n.transactionwitnessset_plutus_data(this.ptr);return 0===t?void 0:C_.__wrap(t)}set_redeemers(t){x(t,J_),n.transactionwitnessset_set_redeemers(this.ptr,t.ptr)}redeemers(){const t=n.transactionwitnessset_redeemers(this.ptr);return 0===t?void 0:J_.__wrap(t)}static new(){const t=n.transactionwitnessset_new();return qr.__wrap(t)}}class Dr{static __wrap(t){const _=Object.create(Dr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_transactionwitnesssets_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnesssets_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.transactionwitnesssets_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Dr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnesssets_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionwitnesssets_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Dr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnesssets_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.transactionwitnesssets_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.transactionwitnesssets_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Dr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.transactionwitnesssets_new();return Dr.__wrap(t)}len(){return n.transactionwitnesssets_len(this.ptr)>>>0}get(t){const _=n.transactionwitnesssets_get(this.ptr,t);return qr.__wrap(_)}add(t){x(t,qr),n.transactionwitnesssets_add(this.ptr,t.ptr)}}class zr{__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_txbuilderconstants_free(t)}static plutus_default_cost_models(){const t=n.txbuilderconstants_plutus_default_cost_models();return Nt.__wrap(t)}static plutus_alonzo_cost_models(){const t=n.txbuilderconstants_plutus_alonzo_cost_models();return Nt.__wrap(t)}static plutus_vasil_cost_models(){const t=n.txbuilderconstants_plutus_vasil_cost_models();return Nt.__wrap(t)}}class Hr{static __wrap(t){const _=Object.create(Hr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_txinputsbuilder_free(t)}static new(){const t=n.txinputsbuilder_new();return Hr.__wrap(t)}add_key_input(t,_,r){x(t,Dt),x(_,Cr),x(r,Zr),n.txinputsbuilder_add_key_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_script_input(t,_,r){x(t,ir),x(_,Cr),x(r,Zr),n.txinputsbuilder_add_script_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_native_script_input(t,_,r){x(t,x_),x(_,Cr),x(r,Zr),n.txinputsbuilder_add_native_script_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_plutus_script_input(t,_,r){x(t,N_),x(_,Cr),x(r,Zr),n.txinputsbuilder_add_plutus_script_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_bootstrap_input(t,_,r){x(t,Ct),x(_,Cr),x(r,Zr),n.txinputsbuilder_add_bootstrap_input(this.ptr,t.ptr,_.ptr,r.ptr)}add_input(t,_,r){x(t,wt),x(_,Cr),x(r,Zr),n.txinputsbuilder_add_input(this.ptr,t.ptr,_.ptr,r.ptr)}count_missing_input_scripts(){return n.txinputsbuilder_count_missing_input_scripts(this.ptr)>>>0}add_required_native_input_scripts(t){return x(t,j_),n.txinputsbuilder_add_required_native_input_scripts(this.ptr,t.ptr)>>>0}add_required_plutus_input_scripts(t){return x(t,L_),n.txinputsbuilder_add_required_plutus_input_scripts(this.ptr,t.ptr)>>>0}add_required_script_input_witnesses(t){return x(t,__),n.txinputsbuilder_add_required_script_input_witnesses(this.ptr,t.ptr)>>>0}get_ref_inputs(){const t=n.txinputsbuilder_get_ref_inputs(this.ptr);return Rr.__wrap(t)}get_native_input_scripts(){const t=n.txinputsbuilder_get_native_input_scripts(this.ptr);return 0===t?void 0:j_.__wrap(t)}get_plutus_input_scripts(){const t=n.txinputsbuilder_get_plutus_input_scripts(this.ptr);return 0===t?void 0:L_.__wrap(t)}len(){return n.txinputsbuilder_len(this.ptr)>>>0}add_required_signer(t){x(t,Dt),n.txinputsbuilder_add_required_signer(this.ptr,t.ptr)}add_required_signers(t){x(t,zt),n.txinputsbuilder_add_required_signers(this.ptr,t.ptr)}total_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.txinputsbuilder_total_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return Zr.__wrap(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}inputs(){const t=n.txinputsbuilder_inputs(this.ptr);return Rr.__wrap(t)}inputs_option(){const t=n.txinputsbuilder_inputs_option(this.ptr);return 0===t?void 0:Rr.__wrap(t)}}class Kr{static __wrap(t){const _=Object.create(Kr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_url_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.url_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.url_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Kr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.url_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.url_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Kr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.url_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.url_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.url_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Kr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.url_new(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Kr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}url(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.url_url(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}}class Yr{static __wrap(t){const _=Object.create(Yr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_unitinterval_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.unitinterval_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.unitinterval_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Yr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.unitinterval_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.unitinterval_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Yr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.unitinterval_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.unitinterval_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.unitinterval_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Yr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}numerator(){const t=n.unitinterval_numerator(this.ptr);return xt.__wrap(t)}denominator(){const t=n.unitinterval_denominator(this.ptr);return xt.__wrap(t)}static new(t,_){x(t,xt),x(_,xt);const r=n.unitinterval_new(t.ptr,_.ptr);return Yr.__wrap(r)}}class $r{static __wrap(t){const _=Object.create($r.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_update_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.update_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.update_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $r.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.update_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.update_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $r.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.update_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.update_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.update_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return $r.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}proposed_protocol_parameter_updates(){const t=n.update_proposed_protocol_parameter_updates(this.ptr);return Y_.__wrap(t)}epoch(){return n.update_epoch(this.ptr)>>>0}static new(t,_){x(t,Y_);const r=n.update_new(t.ptr,_);return $r.__wrap(r)}}class Vr{static __wrap(t){const _=Object.create(Vr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vrfcert_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vrfcert_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.vrfcert_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Vr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vrfcert_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vrfcert_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Vr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.vrfcert_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vrfcert_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vrfcert_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Vr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}output(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vrfcert_output(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}proof(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vrfcert_proof(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){try{const o=n.__wbindgen_add_to_stack_pointer(-16),i=k(t,n.__wbindgen_malloc),s=l,c=k(_,n.__wbindgen_malloc),d=l;n.vrfcert_new(o,i,s,c,d);var r=y()[o/4+0],e=y()[o/4+1];if(y()[o/4+2])throw a(e);return Vr.__wrap(r)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Wr{static __wrap(t){const _=Object.create(Wr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vrfkeyhash_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.vrfkeyhash_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Wr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vrfkeyhash_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.vrfkeyhash_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vrfkeyhash_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Wr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vrfkeyhash_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vrfkeyhash_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Wr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Gr{static __wrap(t){const _=Object.create(Gr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vrfvkey_free(t)}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.vrfvkey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Gr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vrfvkey_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_bech32(t){try{const c=n.__wbindgen_add_to_stack_pointer(-16),d=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),u=l;n.vrfvkey_to_bech32(c,this.ptr,d,u);var _=y()[c/4+0],r=y()[c/4+1],e=y()[c/4+2],o=y()[c/4+3],i=_,s=r;if(o)throw i=0,s=0,a(e);return p(i,s)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(i,s)}}static from_bech32(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vrfvkey_from_bech32(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Gr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vrfvkey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vrfvkey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Gr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}}class Zr{static __wrap(t){const _=Object.create(Zr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_value_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.value_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.value_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.value_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.value_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.value_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.value_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.value_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){x(t,xt);const _=n.value_new(t.ptr);return Zr.__wrap(_)}static new_from_assets(t){x(t,v_);const _=n.value_new_from_assets(t.ptr);return Zr.__wrap(_)}static new_with_assets(t,_){x(t,xt),x(_,v_);const r=n.value_new_with_assets(t.ptr,_.ptr);return Zr.__wrap(r)}static zero(){const t=n.value_zero();return Zr.__wrap(t)}is_zero(){return 0!==n.value_is_zero(this.ptr)}coin(){const t=n.value_coin(this.ptr);return xt.__wrap(t)}set_coin(t){x(t,xt),n.value_set_coin(this.ptr,t.ptr)}multiasset(){const t=n.value_multiasset(this.ptr);return 0===t?void 0:v_.__wrap(t)}set_multiasset(t){x(t,v_),n.value_set_multiasset(this.ptr,t.ptr)}checked_add(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,Zr),n.value_checked_add(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}checked_sub(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16);x(t,Zr),n.value_checked_sub(e,this.ptr,t.ptr);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Zr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}clamped_sub(t){x(t,Zr);const _=n.value_clamped_sub(this.ptr,t.ptr);return Zr.__wrap(_)}compare(t){x(t,Zr);const _=n.value_compare(this.ptr,t.ptr);return 16777215===_?void 0:_}}class Xr{static __wrap(t){const _=Object.create(Xr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vkey_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vkey_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.vkey_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Xr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vkey_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vkey_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Xr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.vkey_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vkey_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vkey_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Xr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t){x(t,W_);const _=n.vkey_new(t.ptr);return Xr.__wrap(_)}public_key(){const t=n.vkey_public_key(this.ptr);return W_.__wrap(t)}}class Jr{static __wrap(t){const _=Object.create(Jr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vkeys_free(t)}static new(){const t=n.vkeys_new();return Jr.__wrap(t)}len(){return n.vkeys_len(this.ptr)>>>0}get(t){const _=n.vkeys_get(this.ptr,t);return Xr.__wrap(_)}add(t){x(t,Xr),n.vkeys_add(this.ptr,t.ptr)}}class Qr{static __wrap(t){const _=Object.create(Qr.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vkeywitness_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitness_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.vkeywitness_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Qr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitness_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vkeywitness_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Qr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitness_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitness_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vkeywitness_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return Qr.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(t,_){x(t,Xr),x(_,Ht);const r=n.vkeywitness_new(t.ptr,_.ptr);return Qr.__wrap(r)}vkey(){const t=n.vkeywitness_vkey(this.ptr);return Xr.__wrap(t)}signature(){const t=n.vkeywitness_signature(this.ptr);return Ht.__wrap(t)}}class tn{static __wrap(t){const _=Object.create(tn.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_vkeywitnesses_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitnesses_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.vkeywitnesses_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return tn.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitnesses_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vkeywitnesses_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return tn.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitnesses_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.vkeywitnesses_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.vkeywitnesses_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return tn.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.vkeywitnesses_new();return tn.__wrap(t)}len(){return n.vkeywitnesses_len(this.ptr)>>>0}get(t){const _=n.vkeywitnesses_get(this.ptr,t);return Qr.__wrap(_)}add(t){x(t,Qr),n.vkeywitnesses_add(this.ptr,t.ptr)}}class _n{static __wrap(t){const _=Object.create(_n.prototype);return _.ptr=t,_}__destroy_into_raw(){const t=this.ptr;return this.ptr=0,t}free(){const t=this.__destroy_into_raw();n.__wbg_withdrawals_free(t)}to_bytes(){try{const e=n.__wbindgen_add_to_stack_pointer(-16);n.withdrawals_to_bytes(e,this.ptr);var t=y()[e/4+0],_=y()[e/4+1],r=v(t,_).slice();return n.__wbindgen_free(t,1*_),r}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_bytes(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=k(t,n.__wbindgen_malloc),i=l;n.withdrawals_from_bytes(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return _n.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_hex(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.withdrawals_to_hex(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];return p(t,_)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(t,_)}}static from_hex(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.withdrawals_from_hex(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return _n.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}to_json(){try{const s=n.__wbindgen_add_to_stack_pointer(-16);n.withdrawals_to_json(s,this.ptr);var t=y()[s/4+0],_=y()[s/4+1],r=y()[s/4+2],e=y()[s/4+3],o=t,i=_;if(e)throw o=0,i=0,a(r);return p(o,i)}finally{n.__wbindgen_add_to_stack_pointer(16),n.__wbindgen_free(o,i)}}to_js_value(){try{const r=n.__wbindgen_add_to_stack_pointer(-16);n.withdrawals_to_js_value(r,this.ptr);var t=y()[r/4+0],_=y()[r/4+1];if(y()[r/4+2])throw a(_);return a(t)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static from_json(t){try{const e=n.__wbindgen_add_to_stack_pointer(-16),o=h(t,n.__wbindgen_malloc,n.__wbindgen_realloc),i=l;n.withdrawals_from_json(e,o,i);var _=y()[e/4+0],r=y()[e/4+1];if(y()[e/4+2])throw a(r);return _n.__wrap(_)}finally{n.__wbindgen_add_to_stack_pointer(16)}}static new(){const t=n.withdrawals_new();return _n.__wrap(t)}len(){return n.withdrawals_len(this.ptr)>>>0}insert(t,_){x(t,_r),x(_,xt);const r=n.withdrawals_insert(this.ptr,t.ptr,_.ptr);return 0===r?void 0:xt.__wrap(r)}get(t){x(t,_r);const _=n.withdrawals_get(this.ptr,t.ptr);return 0===_?void 0:xt.__wrap(_)}keys(){const t=n.withdrawals_keys(this.ptr);return rr.__wrap(t)}}function rn(t){a(t)}function nn(t,_){return u(p(t,_))}function en(t,_){return u(new Error(p(t,_)))}function on(t,_){const r=o(_),e="string"==typeof r?r:void 0;var i=b(e)?0:h(e,n.__wbindgen_malloc,n.__wbindgen_realloc),a=l;y()[t/4+1]=a,y()[t/4+0]=i}function an(t){return u(t)}function sn(t){return u(o(t))}function cn(t){const _=o(t);return"object"==typeof _&&null!==_}function dn(t,_){const r=h(String(o(_)),n.__wbindgen_malloc,n.__wbindgen_realloc),e=l;y()[t/4+1]=e,y()[t/4+0]=r}function pn(t,_,r){o(t)[a(_)]=a(r)}function un(t){return u(o(t).crypto)}function ln(t){return u(o(t).process)}function wn(t){return u(o(t).versions)}function fn(t){return u(o(t).node)}function hn(t){return"string"==typeof o(t)}function bn(){return X((function(){return u(t.require)}),arguments)}function gn(t){return u(o(t).msCrypto)}function yn(){return X((function(t,_){o(t).getRandomValues(o(_))}),arguments)}function mn(){return X((function(t,_,r){o(t).randomFillSync(v(_,r))}),arguments)}function vn(){return u(new Array)}function kn(t){return"function"==typeof o(t)}function xn(t,_){return u(new Function(p(t,_)))}function jn(){return u(new Map)}function An(){return X((function(t,_){return u(o(t).call(o(_)))}),arguments)}function En(){return u(new Object)}function On(){return X((function(){return u(self.self)}),arguments)}function Sn(){return X((function(){return u(window.window)}),arguments)}function Bn(){return X((function(){return u(globalThis.globalThis)}),arguments)}function Cn(){return X((function(){return u(r.g.global)}),arguments)}function Rn(t){return void 0===o(t)}function In(t,_,r){o(t)[_>>>0]=a(r)}function Un(){return X((function(t,_,r){return u(o(t).call(o(_),o(r)))}),arguments)}function Tn(t,_,r){return u(o(t).set(o(_),o(r)))}function Nn(t){return u(o(t).buffer)}function Ln(t){return u(new Uint8Array(o(t)))}function Pn(t,_,r){o(t).set(o(_),r>>>0)}function Mn(t){return o(t).length}function Fn(t){return u(new Uint8Array(t>>>0))}function qn(t,_,r){return u(o(t).subarray(_>>>0,r>>>0))}function Dn(t,_){return u(new Function(p(t,_)))}function zn(t,_){return u(o(t).call(o(_)))}function Hn(t,_){return o(t)===o(_)}function Kn(t){return u(o(t).self)}function Yn(t){return u(o(t).crypto)}function $n(t){return u(o(t).getRandomValues)}function Vn(t,_){return u(r(8066)(p(t,_)))}function Wn(t,_,r){o(t).randomFillSync(v(_,r))}function Gn(t,_,r){o(t).getRandomValues(v(_,r))}function Zn(t,_){const r=h(m(o(_)),n.__wbindgen_malloc,n.__wbindgen_realloc),e=l;y()[t/4+1]=e,y()[t/4+0]=r}function Xn(t,_){throw new Error(p(t,_))}function Jn(){return u(n.memory)}},1843:function(t){t.exports=t=>{if(t.__gcPointerStore)return t;const _=new FinalizationRegistry((t=>{try{t.free()}catch(t){}}));return Object.keys(t).forEach((r=>{var n;r[0].toUpperCase()==r[0]&&"_"!=r[0]&&(n=t[r],Object.getOwnPropertyNames(n).forEach((t=>{if("__wrap"===t){const r=n[t];n[t]=function(){const t=r.apply(n,arguments);if(t&&t.ptr){const r=new Proxy(t,{});return _.register(r,t,r),r}return t}}})))})),t.__gcPointerStore=_,t}},4619:function(t,_,r){var n=r(4520).stringify,e=r(7725);t.exports=function(t){return{parse:e(t),stringify:n}},t.exports.parse=e(),t.exports.stringify=n},7725:function(t,_,r){var n=null;const e=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,o=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;t.exports=function(t){"use strict";var _={strict:!1,protoAction:"error",constructorAction:"error"};if(null!=t){if(!0===t.strict&&(_.strict=!0),void 0!==t.constructorAction){if("error"!==t.constructorAction&&"ignore"!==t.constructorAction&&"preserve"!==t.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${t.constructorAction}`);_.constructorAction=t.constructorAction}if(void 0!==t.protoAction){if("error"!==t.protoAction&&"ignore"!==t.protoAction&&"preserve"!==t.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${t.protoAction}`);_.protoAction=t.protoAction}}var i,a,s,c,d={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},p=function(t){throw{name:"SyntaxError",message:t,at:i,text:s}},u=function(t){return t&&t!==a&&p("Expected '"+t+"' instead of '"+a+"'"),a=s.charAt(i),i+=1,a},l=function(){var t="";for("-"===a&&(t="-",u("-"));a>="0"&&a<="9";)t+=a,u();if("."===a)for(t+=".";u()&&a>="0"&&a<="9";)t+=a;if("e"===a||"E"===a)for(t+=a,u(),"-"!==a&&"+"!==a||(t+=a,u());a>="0"&&a<="9";)t+=a,u();null==n&&(n=r(4431));let _=new n(t);if(_.isFinite()&&!_.isNaN())return _;p("Bad number: Infinity or NaN")},w=function(){var t,_,r,n="";if('"'===a)for(var e=i;u();){if('"'===a)return i-1>e&&(n+=s.substring(e,i-1)),u(),n;if("\\"===a){if(i-1>e&&(n+=s.substring(e,i-1)),u(),"u"===a){for(r=0,_=0;_<4&&(t=parseInt(u(),16),isFinite(t));_+=1)r=16*r+t;n+=String.fromCharCode(r)}else{if("string"!=typeof d[a])break;n+=d[a]}e=i}}p("Bad string")},f=function(){for(;a&&a<=" ";)u()};return c=function(){switch(f(),a){case"{":return function(){var t,r=Object.create(null);if("{"===a){if(u("{"),f(),"}"===a)return u("}"),r;for(;a;){if(t=w(),f(),u(":"),!0===_.strict&&Object.hasOwnProperty.call(r,t)&&p('Duplicate key "'+t+'"'),!0===e.test(t)?"error"===_.protoAction?p("Object contains forbidden prototype property"):"ignore"===_.protoAction?c():r[t]=c():!0===o.test(t)?"error"===_.constructorAction?p("Object contains forbidden constructor property"):"ignore"===_.constructorAction?c():r[t]=c():r[t]=c(),f(),"}"===a)return u("}"),r;u(","),f()}}p("Bad object")}();case"[":return function(){var t=[];if("["===a){if(u("["),f(),"]"===a)return u("]"),t;for(;a;){if(t.push(c()),f(),"]"===a)return u("]"),t;u(","),f()}}p("Bad array")}();case'"':return w();case"-":return l();default:return a>="0"&&a<="9"?l():function(){switch(a){case"t":return u("t"),u("r"),u("u"),u("e"),!0;case"f":return u("f"),u("a"),u("l"),u("s"),u("e"),!1;case"n":return u("n"),u("u"),u("l"),u("l"),null}p("Unexpected '"+a+"'")}()}},function(t,_){var r;return s=t+"",i=0,a=" ",r=c(),f(),a&&p("Syntax error"),"function"==typeof _?function t(r,n){var e,o=r[n];return o&&"object"==typeof o&&Object.keys(o).forEach((function(_){void 0!==(e=t(o,_))?o[_]=e:delete o[_]})),_.call(r,n,o)}({"":r},""):r}}},4520:function(t,_,r){var n=r(4431),e=t.exports;!function(){"use strict";var t,_,r,o=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,i={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function a(t){return o.lastIndex=0,o.test(t)?'"'+t.replace(o,(function(t){var _=i[t];return"string"==typeof _?_:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+t+'"'}function s(e,o){var i,c,d,p,u,l=t,w=o[e],f=null!=w&&(w instanceof n||n.isBigNumber(w));switch(w&&"object"==typeof w&&"function"==typeof w.toJSON&&(w=w.toJSON(e)),"function"==typeof r&&(w=r.call(o,e,w)),typeof w){case"string":return f?w:a(w);case"number":return isFinite(w)?String(w):"null";case"boolean":case"null":case"bigint":return String(w);case"object":if(!w)return"null";if(t+=_,u=[],"[object Array]"===Object.prototype.toString.apply(w)){for(p=w.length,i=0;i<p;i+=1)u[i]=s(i,w)||"null";return d=0===u.length?"[]":t?"[\n"+t+u.join(",\n"+t)+"\n"+l+"]":"["+u.join(",")+"]",t=l,d}if(r&&"object"==typeof r)for(p=r.length,i=0;i<p;i+=1)"string"==typeof r[i]&&(d=s(c=r[i],w))&&u.push(a(c)+(t?": ":":")+d);else Object.keys(w).forEach((function(_){var r=s(_,w);r&&u.push(a(_)+(t?": ":":")+r)}));return d=0===u.length?"{}":t?"{\n"+t+u.join(",\n"+t)+"\n"+l+"}":"{"+u.join(",")+"}",t=l,d}}"function"!=typeof e.stringify&&(e.stringify=function(n,e,o){var i;if(t="",_="","number"==typeof o)for(i=0;i<o;i+=1)_+=" ";else"string"==typeof o&&(_=o);if(r=e,e&&"function"!=typeof e&&("object"!=typeof e||"number"!=typeof e.length))throw new Error("JSON.stringify");return s("",{"":n})})}()},8882:function(t,_,r){"use strict";r.r(_),r.d(_,{__wbindgen_string_new:function(){return n.h},apply_params_to_script_no_panic:function(){return n.c}});var n=r(6035)},6035:function(t,_,r){"use strict";r.d(_,{c:function(){return l},h:function(){return w}});var n=r(1985);t=r.hmd(t);let e=new("undefined"==typeof TextDecoder?(0,t.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});e.decode();let o=new Uint8Array;function i(){return 0===o.byteLength&&(o=new Uint8Array(n.memory.buffer)),o}const a=new Array(32).fill(void 0);a.push(void 0,null,!0,!1);let s=a.length,c=0;function d(t,_){const r=_(1*t.length);return i().set(t,r/1),c=t.length,r}let p=new Int32Array;function u(){return 0===p.byteLength&&(p=new Int32Array(n.memory.buffer)),p}function l(t,_){try{const f=n.__wbindgen_add_to_stack_pointer(-16),h=d(t,n.__wbindgen_malloc),b=c,g=d(_,n.__wbindgen_malloc),y=c;n.apply_params_to_script_no_panic(f,h,b,g,y);var r=u()[f/4+0],e=u()[f/4+1],o=u()[f/4+2];if(u()[f/4+3])throw function(t){const _=function(t){return a[t]}(t);return function(t){t<36||(a[t]=s,s=t)}(t),_}(o);var p=(l=r,w=e,i().subarray(l/1,l/1+w)).slice();return n.__wbindgen_free(r,1*e),p}finally{n.__wbindgen_add_to_stack_pointer(16)}var l,w}function w(t,_){var r,n;return function(t){s===a.length&&a.push(a.length+1);const _=s;return s=a[_],a[_]=t,_}((r=t,n=_,e.decode(i().subarray(r,r+n))))}},9742:function(t,_){"use strict";_.byteLength=function(t){var _=a(t),r=_[0],n=_[1];return 3*(r+n)/4-n},_.toByteArray=function(t){var _,r,o=a(t),i=o[0],s=o[1],c=new e(function(t,_,r){return 3*(_+r)/4-r}(0,i,s)),d=0,p=s>0?i-4:i;for(r=0;r<p;r+=4)_=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],c[d++]=_>>16&255,c[d++]=_>>8&255,c[d++]=255&_;return 2===s&&(_=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,c[d++]=255&_),1===s&&(_=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,c[d++]=_>>8&255,c[d++]=255&_),c},_.fromByteArray=function(t){for(var _,n=t.length,e=n%3,o=[],i=16383,a=0,c=n-e;a<c;a+=i)o.push(s(t,a,a+i>c?c:a+i));return 1===e?(_=t[n-1],o.push(r[_>>2]+r[_<<4&63]+"==")):2===e&&(_=(t[n-2]<<8)+t[n-1],o.push(r[_>>10]+r[_>>4&63]+r[_<<2&63]+"=")),o.join("")};for(var r=[],n=[],e="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0;i<64;++i)r[i]=o[i],n[o.charCodeAt(i)]=i;function a(t){var _=t.length;if(_%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=_),[r,r===_?0:4-r%4]}function s(t,_,n){for(var e,o,i=[],a=_;a<n;a+=3)e=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),i.push(r[(o=e)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return i.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},4736:function(t,_,r){var n;t=r.nmd(t);var e=function(t){"use strict";var _=1e7,r=7,n=9007199254740992,o=l(n),i="0123456789abcdefghijklmnopqrstuvwxyz",a="function"==typeof BigInt;function s(t,_,r,n){return void 0===t?s[0]:void 0===_||10==+_&&!r?X(t):$(t,_,r,n)}function c(t,_){this.value=t,this.sign=_,this.isSmall=!1}function d(t){this.value=t,this.sign=t<0,this.isSmall=!0}function p(t){this.value=t}function u(t){return-n<t&&t<n}function l(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function w(t){f(t);var r=t.length;if(r<4&&R(t,o)<0)switch(r){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*_;default:return t[0]+(t[1]+t[2]*_)*_}return t}function f(t){for(var _=t.length;0===t[--_];);t.length=_+1}function h(t){for(var _=new Array(t),r=-1;++r<t;)_[r]=0;return _}function b(t){return t>0?Math.floor(t):Math.ceil(t)}function g(t,r){var n,e,o=t.length,i=r.length,a=new Array(o),s=0,c=_;for(e=0;e<i;e++)s=(n=t[e]+r[e]+s)>=c?1:0,a[e]=n-s*c;for(;e<o;)s=(n=t[e]+s)===c?1:0,a[e++]=n-s*c;return s>0&&a.push(s),a}function y(t,_){return t.length>=_.length?g(t,_):g(_,t)}function m(t,r){var n,e,o=t.length,i=new Array(o),a=_;for(e=0;e<o;e++)n=t[e]-a+r,r=Math.floor(n/a),i[e]=n-r*a,r+=1;for(;r>0;)i[e++]=r%a,r=Math.floor(r/a);return i}function v(t,r){var n,e,o=t.length,i=r.length,a=new Array(o),s=0,c=_;for(n=0;n<i;n++)(e=t[n]-s-r[n])<0?(e+=c,s=1):s=0,a[n]=e;for(n=i;n<o;n++){if(!((e=t[n]-s)<0)){a[n++]=e;break}e+=c,a[n]=e}for(;n<o;n++)a[n]=t[n];return f(a),a}function k(t,r,n){var e,o,i=t.length,a=new Array(i),s=-r,p=_;for(e=0;e<i;e++)o=t[e]+s,s=Math.floor(o/p),o%=p,a[e]=o<0?o+p:o;return"number"==typeof(a=w(a))?(n&&(a=-a),new d(a)):new c(a,n)}function x(t,r){var n,e,o,i,a=t.length,s=r.length,c=h(a+s),d=_;for(o=0;o<a;++o){i=t[o];for(var p=0;p<s;++p)n=i*r[p]+c[o+p],e=Math.floor(n/d),c[o+p]=n-e*d,c[o+p+1]+=e}return f(c),c}function j(t,r){var n,e,o=t.length,i=new Array(o),a=_,s=0;for(e=0;e<o;e++)n=t[e]*r+s,s=Math.floor(n/a),i[e]=n-s*a;for(;s>0;)i[e++]=s%a,s=Math.floor(s/a);return i}function A(t,_){for(var r=[];_-- >0;)r.push(0);return r.concat(t)}function E(t,_){var r=Math.max(t.length,_.length);if(r<=30)return x(t,_);r=Math.ceil(r/2);var n=t.slice(r),e=t.slice(0,r),o=_.slice(r),i=_.slice(0,r),a=E(e,i),s=E(n,o),c=E(y(e,n),y(i,o)),d=y(y(a,A(v(v(c,a),s),r)),A(s,2*r));return f(d),d}function O(t,r,n){return new c(t<_?j(r,t):x(r,l(t)),n)}function S(t){var r,n,e,o,i=t.length,a=h(i+i),s=_;for(e=0;e<i;e++){n=0-(o=t[e])*o;for(var c=e;c<i;c++)r=o*t[c]*2+a[e+c]+n,n=Math.floor(r/s),a[e+c]=r-n*s;a[e+i]=n}return f(a),a}function B(t,r){var n,e,o,i,a=t.length,s=h(a),c=_;for(o=0,n=a-1;n>=0;--n)o=(i=o*c+t[n])-(e=b(i/r))*r,s[n]=0|e;return[s,0|o]}function C(t,r){var n,e=X(r);if(a)return[new p(t.value/e.value),new p(t.value%e.value)];var o,i=t.value,u=e.value;if(0===u)throw new Error("Cannot divide by zero");if(t.isSmall)return e.isSmall?[new d(b(i/u)),new d(i%u)]:[s[0],t];if(e.isSmall){if(1===u)return[t,s[0]];if(-1==u)return[t.negate(),s[0]];var g=Math.abs(u);if(g<_){o=w((n=B(i,g))[0]);var y=n[1];return t.sign&&(y=-y),"number"==typeof o?(t.sign!==e.sign&&(o=-o),[new d(o),new d(y)]):[new c(o,t.sign!==e.sign),new d(y)]}u=l(g)}var m=R(i,u);if(-1===m)return[s[0],t];if(0===m)return[s[t.sign===e.sign?1:-1],s[0]];n=i.length+u.length<=200?function(t,r){var n,e,o,i,a,s,c,d=t.length,p=r.length,u=_,l=h(r.length),f=r[p-1],b=Math.ceil(u/(2*f)),g=j(t,b),y=j(r,b);for(g.length<=d&&g.push(0),y.push(0),f=y[p-1],e=d-p;e>=0;e--){for(n=u-1,g[e+p]!==f&&(n=Math.floor((g[e+p]*u+g[e+p-1])/f)),o=0,i=0,s=y.length,a=0;a<s;a++)o+=n*y[a],c=Math.floor(o/u),i+=g[e+a]-(o-c*u),o=c,i<0?(g[e+a]=i+u,i=-1):(g[e+a]=i,i=0);for(;0!==i;){for(n-=1,o=0,a=0;a<s;a++)(o+=g[e+a]-u+y[a])<0?(g[e+a]=o+u,o=0):(g[e+a]=o,o=1);i+=o}l[e]=n}return g=B(g,b)[0],[w(l),w(g)]}(i,u):function(t,r){for(var n,e,o,i,a,s=t.length,c=r.length,d=[],p=[],u=_;s;)if(p.unshift(t[--s]),f(p),R(p,r)<0)d.push(0);else{o=p[(e=p.length)-1]*u+p[e-2],i=r[c-1]*u+r[c-2],e>c&&(o=(o+1)*u),n=Math.ceil(o/i);do{if(R(a=j(r,n),p)<=0)break;n--}while(n);d.push(n),p=v(p,a)}return d.reverse(),[w(d),w(p)]}(i,u),o=n[0];var k=t.sign!==e.sign,x=n[1],A=t.sign;return"number"==typeof o?(k&&(o=-o),o=new d(o)):o=new c(o,k),"number"==typeof x?(A&&(x=-x),x=new d(x)):x=new c(x,A),[o,x]}function R(t,_){if(t.length!==_.length)return t.length>_.length?1:-1;for(var r=t.length-1;r>=0;r--)if(t[r]!==_[r])return t[r]>_[r]?1:-1;return 0}function I(t){var _=t.abs();return!_.isUnit()&&(!!(_.equals(2)||_.equals(3)||_.equals(5))||!(_.isEven()||_.isDivisibleBy(3)||_.isDivisibleBy(5))&&(!!_.lesser(49)||void 0))}function U(t,_){for(var r,n,o,i=t.prev(),a=i,s=0;a.isEven();)a=a.divide(2),s++;t:for(n=0;n<_.length;n++)if(!t.lesser(_[n])&&!(o=e(_[n]).modPow(a,t)).isUnit()&&!o.equals(i)){for(r=s-1;0!=r;r--){if((o=o.square().mod(t)).isUnit())return!1;if(o.equals(i))continue t}return!1}return!0}c.prototype=Object.create(s.prototype),d.prototype=Object.create(s.prototype),p.prototype=Object.create(s.prototype),c.prototype.add=function(t){var _=X(t);if(this.sign!==_.sign)return this.subtract(_.negate());var r=this.value,n=_.value;return _.isSmall?new c(m(r,Math.abs(n)),this.sign):new c(y(r,n),this.sign)},c.prototype.plus=c.prototype.add,d.prototype.add=function(t){var _=X(t),r=this.value;if(r<0!==_.sign)return this.subtract(_.negate());var n=_.value;if(_.isSmall){if(u(r+n))return new d(r+n);n=l(Math.abs(n))}return new c(m(n,Math.abs(r)),r<0)},d.prototype.plus=d.prototype.add,p.prototype.add=function(t){return new p(this.value+X(t).value)},p.prototype.plus=p.prototype.add,c.prototype.subtract=function(t){var _=X(t);if(this.sign!==_.sign)return this.add(_.negate());var r=this.value,n=_.value;return _.isSmall?k(r,Math.abs(n),this.sign):function(t,_,r){var n;return R(t,_)>=0?n=v(t,_):(n=v(_,t),r=!r),"number"==typeof(n=w(n))?(r&&(n=-n),new d(n)):new c(n,r)}(r,n,this.sign)},c.prototype.minus=c.prototype.subtract,d.prototype.subtract=function(t){var _=X(t),r=this.value;if(r<0!==_.sign)return this.add(_.negate());var n=_.value;return _.isSmall?new d(r-n):k(n,Math.abs(r),r>=0)},d.prototype.minus=d.prototype.subtract,p.prototype.subtract=function(t){return new p(this.value-X(t).value)},p.prototype.minus=p.prototype.subtract,c.prototype.negate=function(){return new c(this.value,!this.sign)},d.prototype.negate=function(){var t=this.sign,_=new d(-this.value);return _.sign=!t,_},p.prototype.negate=function(){return new p(-this.value)},c.prototype.abs=function(){return new c(this.value,!1)},d.prototype.abs=function(){return new d(Math.abs(this.value))},p.prototype.abs=function(){return new p(this.value>=0?this.value:-this.value)},c.prototype.multiply=function(t){var r,n,e,o=X(t),i=this.value,a=o.value,d=this.sign!==o.sign;if(o.isSmall){if(0===a)return s[0];if(1===a)return this;if(-1===a)return this.negate();if((r=Math.abs(a))<_)return new c(j(i,r),d);a=l(r)}return new c(-.012*(n=i.length)-.012*(e=a.length)+15e-6*n*e>0?E(i,a):x(i,a),d)},c.prototype.times=c.prototype.multiply,d.prototype._multiplyBySmall=function(t){return u(t.value*this.value)?new d(t.value*this.value):O(Math.abs(t.value),l(Math.abs(this.value)),this.sign!==t.sign)},c.prototype._multiplyBySmall=function(t){return 0===t.value?s[0]:1===t.value?this:-1===t.value?this.negate():O(Math.abs(t.value),this.value,this.sign!==t.sign)},d.prototype.multiply=function(t){return X(t)._multiplyBySmall(this)},d.prototype.times=d.prototype.multiply,p.prototype.multiply=function(t){return new p(this.value*X(t).value)},p.prototype.times=p.prototype.multiply,c.prototype.square=function(){return new c(S(this.value),!1)},d.prototype.square=function(){var t=this.value*this.value;return u(t)?new d(t):new c(S(l(Math.abs(this.value))),!1)},p.prototype.square=function(t){return new p(this.value*this.value)},c.prototype.divmod=function(t){var _=C(this,t);return{quotient:_[0],remainder:_[1]}},p.prototype.divmod=d.prototype.divmod=c.prototype.divmod,c.prototype.divide=function(t){return C(this,t)[0]},p.prototype.over=p.prototype.divide=function(t){return new p(this.value/X(t).value)},d.prototype.over=d.prototype.divide=c.prototype.over=c.prototype.divide,c.prototype.mod=function(t){return C(this,t)[1]},p.prototype.mod=p.prototype.remainder=function(t){return new p(this.value%X(t).value)},d.prototype.remainder=d.prototype.mod=c.prototype.remainder=c.prototype.mod,c.prototype.pow=function(t){var _,r,n,e=X(t),o=this.value,i=e.value;if(0===i)return s[1];if(0===o)return s[0];if(1===o)return s[1];if(-1===o)return e.isEven()?s[1]:s[-1];if(e.sign)return s[0];if(!e.isSmall)throw new Error("The exponent "+e.toString()+" is too large.");if(this.isSmall&&u(_=Math.pow(o,i)))return new d(b(_));for(r=this,n=s[1];!0&i&&(n=n.times(r),--i),0!==i;)i/=2,r=r.square();return n},d.prototype.pow=c.prototype.pow,p.prototype.pow=function(t){var _=X(t),r=this.value,n=_.value,e=BigInt(0),o=BigInt(1),i=BigInt(2);if(n===e)return s[1];if(r===e)return s[0];if(r===o)return s[1];if(r===BigInt(-1))return _.isEven()?s[1]:s[-1];if(_.isNegative())return new p(e);for(var a=this,c=s[1];(n&o)===o&&(c=c.times(a),--n),n!==e;)n/=i,a=a.square();return c},c.prototype.modPow=function(t,_){if(t=X(t),(_=X(_)).isZero())throw new Error("Cannot take modPow with modulus 0");var r=s[1],n=this.mod(_);for(t.isNegative()&&(t=t.multiply(s[-1]),n=n.modInv(_));t.isPositive();){if(n.isZero())return s[0];t.isOdd()&&(r=r.multiply(n).mod(_)),t=t.divide(2),n=n.square().mod(_)}return r},p.prototype.modPow=d.prototype.modPow=c.prototype.modPow,c.prototype.compareAbs=function(t){var _=X(t),r=this.value,n=_.value;return _.isSmall?1:R(r,n)},d.prototype.compareAbs=function(t){var _=X(t),r=Math.abs(this.value),n=_.value;return _.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},p.prototype.compareAbs=function(t){var _=this.value,r=X(t).value;return(_=_>=0?_:-_)===(r=r>=0?r:-r)?0:_>r?1:-1},c.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var _=X(t),r=this.value,n=_.value;return this.sign!==_.sign?_.sign?1:-1:_.isSmall?this.sign?-1:1:R(r,n)*(this.sign?-1:1)},c.prototype.compareTo=c.prototype.compare,d.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var _=X(t),r=this.value,n=_.value;return _.isSmall?r==n?0:r>n?1:-1:r<0!==_.sign?r<0?-1:1:r<0?1:-1},d.prototype.compareTo=d.prototype.compare,p.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var _=this.value,r=X(t).value;return _===r?0:_>r?1:-1},p.prototype.compareTo=p.prototype.compare,c.prototype.equals=function(t){return 0===this.compare(t)},p.prototype.eq=p.prototype.equals=d.prototype.eq=d.prototype.equals=c.prototype.eq=c.prototype.equals,c.prototype.notEquals=function(t){return 0!==this.compare(t)},p.prototype.neq=p.prototype.notEquals=d.prototype.neq=d.prototype.notEquals=c.prototype.neq=c.prototype.notEquals,c.prototype.greater=function(t){return this.compare(t)>0},p.prototype.gt=p.prototype.greater=d.prototype.gt=d.prototype.greater=c.prototype.gt=c.prototype.greater,c.prototype.lesser=function(t){return this.compare(t)<0},p.prototype.lt=p.prototype.lesser=d.prototype.lt=d.prototype.lesser=c.prototype.lt=c.prototype.lesser,c.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},p.prototype.geq=p.prototype.greaterOrEquals=d.prototype.geq=d.prototype.greaterOrEquals=c.prototype.geq=c.prototype.greaterOrEquals,c.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},p.prototype.leq=p.prototype.lesserOrEquals=d.prototype.leq=d.prototype.lesserOrEquals=c.prototype.leq=c.prototype.lesserOrEquals,c.prototype.isEven=function(){return 0==(1&this.value[0])},d.prototype.isEven=function(){return 0==(1&this.value)},p.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},c.prototype.isOdd=function(){return 1==(1&this.value[0])},d.prototype.isOdd=function(){return 1==(1&this.value)},p.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},c.prototype.isPositive=function(){return!this.sign},d.prototype.isPositive=function(){return this.value>0},p.prototype.isPositive=d.prototype.isPositive,c.prototype.isNegative=function(){return this.sign},d.prototype.isNegative=function(){return this.value<0},p.prototype.isNegative=d.prototype.isNegative,c.prototype.isUnit=function(){return!1},d.prototype.isUnit=function(){return 1===Math.abs(this.value)},p.prototype.isUnit=function(){return this.abs().value===BigInt(1)},c.prototype.isZero=function(){return!1},d.prototype.isZero=function(){return 0===this.value},p.prototype.isZero=function(){return this.value===BigInt(0)},c.prototype.isDivisibleBy=function(t){var _=X(t);return!_.isZero()&&(!!_.isUnit()||(0===_.compareAbs(2)?this.isEven():this.mod(_).isZero()))},p.prototype.isDivisibleBy=d.prototype.isDivisibleBy=c.prototype.isDivisibleBy,c.prototype.isPrime=function(_){var r=I(this);if(r!==t)return r;var n=this.abs(),o=n.bitLength();if(o<=64)return U(n,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var i=Math.log(2)*o.toJSNumber(),a=Math.ceil(!0===_?2*Math.pow(i,2):i),s=[],c=0;c<a;c++)s.push(e(c+2));return U(n,s)},p.prototype.isPrime=d.prototype.isPrime=c.prototype.isPrime,c.prototype.isProbablePrime=function(_,r){var n=I(this);if(n!==t)return n;for(var o=this.abs(),i=_===t?5:_,a=[],s=0;s<i;s++)a.push(e.randBetween(2,o.minus(2),r));return U(o,a)},p.prototype.isProbablePrime=d.prototype.isProbablePrime=c.prototype.isProbablePrime,c.prototype.modInv=function(t){for(var _,r,n,o=e.zero,i=e.one,a=X(t),s=this.abs();!s.isZero();)_=a.divide(s),r=o,n=a,o=i,a=s,i=r.subtract(_.multiply(i)),s=n.subtract(_.multiply(s));if(!a.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===o.compare(0)&&(o=o.add(t)),this.isNegative()?o.negate():o},p.prototype.modInv=d.prototype.modInv=c.prototype.modInv,c.prototype.next=function(){var t=this.value;return this.sign?k(t,1,this.sign):new c(m(t,1),this.sign)},d.prototype.next=function(){var t=this.value;return t+1<n?new d(t+1):new c(o,!1)},p.prototype.next=function(){return new p(this.value+BigInt(1))},c.prototype.prev=function(){var t=this.value;return this.sign?new c(m(t,1),!0):k(t,1,this.sign)},d.prototype.prev=function(){var t=this.value;return t-1>-n?new d(t-1):new c(o,!0)},p.prototype.prev=function(){return new p(this.value-BigInt(1))};for(var T=[1];2*T[T.length-1]<=_;)T.push(2*T[T.length-1]);var N=T.length,L=T[N-1];function P(t){return Math.abs(t)<=_}function M(t,_,r){_=X(_);for(var n=t.isNegative(),o=_.isNegative(),i=n?t.not():t,a=o?_.not():_,s=0,c=0,d=null,p=null,u=[];!i.isZero()||!a.isZero();)s=(d=C(i,L))[1].toJSNumber(),n&&(s=L-1-s),c=(p=C(a,L))[1].toJSNumber(),o&&(c=L-1-c),i=d[0],a=p[0],u.push(r(s,c));for(var l=0!==r(n?1:0,o?1:0)?e(-1):e(0),w=u.length-1;w>=0;w-=1)l=l.multiply(L).add(e(u[w]));return l}c.prototype.shiftLeft=function(t){var _=X(t).toJSNumber();if(!P(_))throw new Error(String(_)+" is too large for shifting.");if(_<0)return this.shiftRight(-_);var r=this;if(r.isZero())return r;for(;_>=N;)r=r.multiply(L),_-=N-1;return r.multiply(T[_])},p.prototype.shiftLeft=d.prototype.shiftLeft=c.prototype.shiftLeft,c.prototype.shiftRight=function(t){var _,r=X(t).toJSNumber();if(!P(r))throw new Error(String(r)+" is too large for shifting.");if(r<0)return this.shiftLeft(-r);for(var n=this;r>=N;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(_=C(n,L))[1].isNegative()?_[0].prev():_[0],r-=N-1}return(_=C(n,T[r]))[1].isNegative()?_[0].prev():_[0]},p.prototype.shiftRight=d.prototype.shiftRight=c.prototype.shiftRight,c.prototype.not=function(){return this.negate().prev()},p.prototype.not=d.prototype.not=c.prototype.not,c.prototype.and=function(t){return M(this,t,(function(t,_){return t&_}))},p.prototype.and=d.prototype.and=c.prototype.and,c.prototype.or=function(t){return M(this,t,(function(t,_){return t|_}))},p.prototype.or=d.prototype.or=c.prototype.or,c.prototype.xor=function(t){return M(this,t,(function(t,_){return t^_}))},p.prototype.xor=d.prototype.xor=c.prototype.xor;var F=1<<30,q=(_&-_)*(_&-_)|F;function D(t){var r=t.value,n="number"==typeof r?r|F:"bigint"==typeof r?r|BigInt(F):r[0]+r[1]*_|q;return n&-n}function z(t,_){if(_.compareTo(t)<=0){var r=z(t,_.square(_)),n=r.p,o=r.e,i=n.multiply(_);return i.compareTo(t)<=0?{p:i,e:2*o+1}:{p:n,e:2*o}}return{p:e(1),e:0}}function H(t,_){return t=X(t),_=X(_),t.greater(_)?t:_}function K(t,_){return t=X(t),_=X(_),t.lesser(_)?t:_}function Y(t,_){if(t=X(t).abs(),_=X(_).abs(),t.equals(_))return t;if(t.isZero())return _;if(_.isZero())return t;for(var r,n,e=s[1];t.isEven()&&_.isEven();)r=K(D(t),D(_)),t=t.divide(r),_=_.divide(r),e=e.multiply(r);for(;t.isEven();)t=t.divide(D(t));do{for(;_.isEven();)_=_.divide(D(_));t.greater(_)&&(n=_,_=t,t=n),_=_.subtract(t)}while(!_.isZero());return e.isUnit()?t:t.multiply(e)}c.prototype.bitLength=function(){var t=this;return t.compareTo(e(0))<0&&(t=t.negate().subtract(e(1))),0===t.compareTo(e(0))?e(0):e(z(t,e(2)).e).add(e(1))},p.prototype.bitLength=d.prototype.bitLength=c.prototype.bitLength;var $=function(t,_,r,n){r=r||i,t=String(t),n||(t=t.toLowerCase(),r=r.toLowerCase());var e,o=t.length,a=Math.abs(_),s={};for(e=0;e<r.length;e++)s[r[e]]=e;for(e=0;e<o;e++)if("-"!==(p=t[e])&&p in s&&s[p]>=a){if("1"===p&&1===a)continue;throw new Error(p+" is not a valid digit in base "+_+".")}_=X(_);var c=[],d="-"===t[0];for(e=d?1:0;e<t.length;e++){var p;if((p=t[e])in s)c.push(X(s[p]));else{if("<"!==p)throw new Error(p+" is not a valid character");var u=e;do{e++}while(">"!==t[e]&&e<t.length);c.push(X(t.slice(u+1,e)))}}return V(c,_,d)};function V(t,_,r){var n,e=s[0],o=s[1];for(n=t.length-1;n>=0;n--)e=e.add(t[n].times(o)),o=o.times(_);return r?e.negate():e}function W(t,_){if((_=e(_)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(_.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var n=!1;if(t.isNegative()&&_.isPositive()&&(n=!0,t=t.abs()),_.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:n};for(var o,i=[],a=t;a.isNegative()||a.compareAbs(_)>=0;){o=a.divmod(_),a=o.quotient;var s=o.remainder;s.isNegative()&&(s=_.minus(s).abs(),a=a.next()),i.push(s.toJSNumber())}return i.push(a.toJSNumber()),{value:i.reverse(),isNegative:n}}function G(t,_,r){var n=W(t,_);return(n.isNegative?"-":"")+n.value.map((function(t){return function(t,_){return t<(_=_||i).length?_[t]:"<"+t+">"}(t,r)})).join("")}function Z(t){if(u(+t)){var _=+t;if(_===b(_))return a?new p(BigInt(_)):new d(_);throw new Error("Invalid integer: "+t)}var n="-"===t[0];n&&(t=t.slice(1));var e=t.split(/e/i);if(e.length>2)throw new Error("Invalid integer: "+e.join("e"));if(2===e.length){var o=e[1];if("+"===o[0]&&(o=o.slice(1)),(o=+o)!==b(o)||!u(o))throw new Error("Invalid integer: "+o+" is not a valid exponent.");var i=e[0],s=i.indexOf(".");if(s>=0&&(o-=i.length-s-1,i=i.slice(0,s)+i.slice(s+1)),o<0)throw new Error("Cannot include negative exponent part for integers");t=i+=new Array(o+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(a)return new p(BigInt(n?"-"+t:t));for(var l=[],w=t.length,h=r,g=w-h;w>0;)l.push(+t.slice(g,w)),(g-=h)<0&&(g=0),w-=h;return f(l),new c(l,n)}function X(t){return"number"==typeof t?function(t){if(a)return new p(BigInt(t));if(u(t)){if(t!==b(t))throw new Error(t+" is not an integer.");return new d(t)}return Z(t.toString())}(t):"string"==typeof t?Z(t):"bigint"==typeof t?new p(t):t}c.prototype.toArray=function(t){return W(this,t)},d.prototype.toArray=function(t){return W(this,t)},p.prototype.toArray=function(t){return W(this,t)},c.prototype.toString=function(_,r){if(_===t&&(_=10),10!==_)return G(this,_,r);for(var n,e=this.value,o=e.length,i=String(e[--o]);--o>=0;)n=String(e[o]),i+="0000000".slice(n.length)+n;return(this.sign?"-":"")+i},d.prototype.toString=function(_,r){return _===t&&(_=10),10!=_?G(this,_,r):String(this.value)},p.prototype.toString=d.prototype.toString,p.prototype.toJSON=c.prototype.toJSON=d.prototype.toJSON=function(){return this.toString()},c.prototype.valueOf=function(){return parseInt(this.toString(),10)},c.prototype.toJSNumber=c.prototype.valueOf,d.prototype.valueOf=function(){return this.value},d.prototype.toJSNumber=d.prototype.valueOf,p.prototype.valueOf=p.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var J=0;J<1e3;J++)s[J]=X(J),J>0&&(s[-J]=X(-J));return s.one=s[1],s.zero=s[0],s.minusOne=s[-1],s.max=H,s.min=K,s.gcd=Y,s.lcm=function(t,_){return t=X(t).abs(),_=X(_).abs(),t.divide(Y(t,_)).multiply(_)},s.isInstance=function(t){return t instanceof c||t instanceof d||t instanceof p},s.randBetween=function(t,r,n){t=X(t),r=X(r);var e=n||Math.random,o=K(t,r),i=H(t,r).subtract(o).add(1);if(i.isSmall)return o.add(Math.floor(e()*i));for(var a=W(i,_).value,c=[],d=!0,p=0;p<a.length;p++){var u=d?a[p]+(p+1<a.length?a[p+1]/_:0):_,l=b(e()*u);c.push(l),l<a[p]&&(d=!1)}return o.add(s.fromArray(c,_,!1))},s.fromArray=function(t,_,r){return V(t.map(X),X(_||10),r)},s}();t.hasOwnProperty("exports")&&(t.exports=e),void 0===(n=function(){return e}.call(_,r,_,t))||(t.exports=n)},4431:function(t,_,r){var n;!function(e){"use strict";var o,i=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,a=Math.ceil,s=Math.floor,c="[BigNumber Error] ",d=c+"Number primitive has more than 15 significant digits: ",p=1e14,u=14,l=9007199254740991,w=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],f=1e7,h=1e9;function b(t){var _=0|t;return t>0||t===_?_:_-1}function g(t){for(var _,r,n=1,e=t.length,o=t[0]+"";n<e;){for(_=t[n++]+"",r=u-_.length;r--;_="0"+_);o+=_}for(e=o.length;48===o.charCodeAt(--e););return o.slice(0,e+1||1)}function y(t,_){var r,n,e=t.c,o=_.c,i=t.s,a=_.s,s=t.e,c=_.e;if(!i||!a)return null;if(r=e&&!e[0],n=o&&!o[0],r||n)return r?n?0:-a:i;if(i!=a)return i;if(r=i<0,n=s==c,!e||!o)return n?0:!e^r?1:-1;if(!n)return s>c^r?1:-1;for(a=(s=e.length)<(c=o.length)?s:c,i=0;i<a;i++)if(e[i]!=o[i])return e[i]>o[i]^r?1:-1;return s==c?0:s>c^r?1:-1}function m(t,_,r,n){if(t<_||t>r||t!==s(t))throw Error(c+(n||"Argument")+("number"==typeof t?t<_||t>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(t))}function v(t){var _=t.c.length-1;return b(t.e/u)==_&&t.c[_]%2!=0}function k(t,_){return(t.length>1?t.charAt(0)+"."+t.slice(1):t)+(_<0?"e":"e+")+_}function x(t,_,r){var n,e;if(_<0){for(e=r+".";++_;e+=r);t=e+t}else if(++_>(n=t.length)){for(e=r,_-=n;--_;e+=r);t+=e}else _<n&&(t=t.slice(0,_)+"."+t.slice(_));return t}o=function t(_){var r,n,e,o,j,A,E,O,S,B,C=K.prototype={constructor:K,toString:null,valueOf:null},R=new K(1),I=20,U=4,T=-7,N=21,L=-1e7,P=1e7,M=!1,F=1,q=0,D={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},z="0123456789abcdefghijklmnopqrstuvwxyz",H=!0;function K(t,_){var r,o,a,c,p,w,f,h,b=this;if(!(b instanceof K))return new K(t,_);if(null==_){if(t&&!0===t._isBigNumber)return b.s=t.s,void(!t.c||t.e>P?b.c=b.e=null:t.e<L?b.c=[b.e=0]:(b.e=t.e,b.c=t.c.slice()));if((w="number"==typeof t)&&0*t==0){if(b.s=1/t<0?(t=-t,-1):1,t===~~t){for(c=0,p=t;p>=10;p/=10,c++);return void(c>P?b.c=b.e=null:(b.e=c,b.c=[t]))}h=String(t)}else{if(!i.test(h=String(t)))return e(b,h,w);b.s=45==h.charCodeAt(0)?(h=h.slice(1),-1):1}(c=h.indexOf("."))>-1&&(h=h.replace(".","")),(p=h.search(/e/i))>0?(c<0&&(c=p),c+=+h.slice(p+1),h=h.substring(0,p)):c<0&&(c=h.length)}else{if(m(_,2,z.length,"Base"),10==_&&H)return W(b=new K(t),I+b.e+1,U);if(h=String(t),w="number"==typeof t){if(0*t!=0)return e(b,h,w,_);if(b.s=1/t<0?(h=h.slice(1),-1):1,K.DEBUG&&h.replace(/^0\.0*|\./,"").length>15)throw Error(d+t)}else b.s=45===h.charCodeAt(0)?(h=h.slice(1),-1):1;for(r=z.slice(0,_),c=p=0,f=h.length;p<f;p++)if(r.indexOf(o=h.charAt(p))<0){if("."==o){if(p>c){c=f;continue}}else if(!a&&(h==h.toUpperCase()&&(h=h.toLowerCase())||h==h.toLowerCase()&&(h=h.toUpperCase()))){a=!0,p=-1,c=0;continue}return e(b,String(t),w,_)}w=!1,(c=(h=n(h,_,10,b.s)).indexOf("."))>-1?h=h.replace(".",""):c=h.length}for(p=0;48===h.charCodeAt(p);p++);for(f=h.length;48===h.charCodeAt(--f););if(h=h.slice(p,++f)){if(f-=p,w&&K.DEBUG&&f>15&&(t>l||t!==s(t)))throw Error(d+b.s*t);if((c=c-p-1)>P)b.c=b.e=null;else if(c<L)b.c=[b.e=0];else{if(b.e=c,b.c=[],p=(c+1)%u,c<0&&(p+=u),p<f){for(p&&b.c.push(+h.slice(0,p)),f-=u;p<f;)b.c.push(+h.slice(p,p+=u));p=u-(h=h.slice(p)).length}else p-=f;for(;p--;h+="0");b.c.push(+h)}}else b.c=[b.e=0]}function Y(t,_,r,n){var e,o,i,a,s;if(null==r?r=U:m(r,0,8),!t.c)return t.toString();if(e=t.c[0],i=t.e,null==_)s=g(t.c),s=1==n||2==n&&(i<=T||i>=N)?k(s,i):x(s,i,"0");else if(o=(t=W(new K(t),_,r)).e,a=(s=g(t.c)).length,1==n||2==n&&(_<=o||o<=T)){for(;a<_;s+="0",a++);s=k(s,o)}else if(_-=i,s=x(s,o,"0"),o+1>a){if(--_>0)for(s+=".";_--;s+="0");}else if((_+=o-a)>0)for(o+1==a&&(s+=".");_--;s+="0");return t.s<0&&e?"-"+s:s}function $(t,_){for(var r,n=1,e=new K(t[0]);n<t.length;n++){if(!(r=new K(t[n])).s){e=r;break}_.call(e,r)&&(e=r)}return e}function V(t,_,r){for(var n=1,e=_.length;!_[--e];_.pop());for(e=_[0];e>=10;e/=10,n++);return(r=n+r*u-1)>P?t.c=t.e=null:r<L?t.c=[t.e=0]:(t.e=r,t.c=_),t}function W(t,_,r,n){var e,o,i,c,d,l,f,h=t.c,b=w;if(h){t:{for(e=1,c=h[0];c>=10;c/=10,e++);if((o=_-e)<0)o+=u,i=_,f=(d=h[l=0])/b[e-i-1]%10|0;else if((l=a((o+1)/u))>=h.length){if(!n)break t;for(;h.length<=l;h.push(0));d=f=0,e=1,i=(o%=u)-u+1}else{for(d=c=h[l],e=1;c>=10;c/=10,e++);f=(i=(o%=u)-u+e)<0?0:d/b[e-i-1]%10|0}if(n=n||_<0||null!=h[l+1]||(i<0?d:d%b[e-i-1]),n=r<4?(f||n)&&(0==r||r==(t.s<0?3:2)):f>5||5==f&&(4==r||n||6==r&&(o>0?i>0?d/b[e-i]:0:h[l-1])%10&1||r==(t.s<0?8:7)),_<1||!h[0])return h.length=0,n?(_-=t.e+1,h[0]=b[(u-_%u)%u],t.e=-_||0):h[0]=t.e=0,t;if(0==o?(h.length=l,c=1,l--):(h.length=l+1,c=b[u-o],h[l]=i>0?s(d/b[e-i]%b[i])*c:0),n)for(;;){if(0==l){for(o=1,i=h[0];i>=10;i/=10,o++);for(i=h[0]+=c,c=1;i>=10;i/=10,c++);o!=c&&(t.e++,h[0]==p&&(h[0]=1));break}if(h[l]+=c,h[l]!=p)break;h[l--]=0,c=1}for(o=h.length;0===h[--o];h.pop());}t.e>P?t.c=t.e=null:t.e<L&&(t.c=[t.e=0])}return t}function G(t){var _,r=t.e;return null===r?t.toString():(_=g(t.c),_=r<=T||r>=N?k(_,r):x(_,r,"0"),t.s<0?"-"+_:_)}return K.clone=t,K.ROUND_UP=0,K.ROUND_DOWN=1,K.ROUND_CEIL=2,K.ROUND_FLOOR=3,K.ROUND_HALF_UP=4,K.ROUND_HALF_DOWN=5,K.ROUND_HALF_EVEN=6,K.ROUND_HALF_CEIL=7,K.ROUND_HALF_FLOOR=8,K.EUCLID=9,K.config=K.set=function(t){var _,r;if(null!=t){if("object"!=typeof t)throw Error(c+"Object expected: "+t);if(t.hasOwnProperty(_="DECIMAL_PLACES")&&(m(r=t[_],0,h,_),I=r),t.hasOwnProperty(_="ROUNDING_MODE")&&(m(r=t[_],0,8,_),U=r),t.hasOwnProperty(_="EXPONENTIAL_AT")&&((r=t[_])&&r.pop?(m(r[0],-h,0,_),m(r[1],0,h,_),T=r[0],N=r[1]):(m(r,-h,h,_),T=-(N=r<0?-r:r))),t.hasOwnProperty(_="RANGE"))if((r=t[_])&&r.pop)m(r[0],-h,-1,_),m(r[1],1,h,_),L=r[0],P=r[1];else{if(m(r,-h,h,_),!r)throw Error(c+_+" cannot be zero: "+r);L=-(P=r<0?-r:r)}if(t.hasOwnProperty(_="CRYPTO")){if((r=t[_])!==!!r)throw Error(c+_+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw M=!r,Error(c+"crypto unavailable");M=r}else M=r}if(t.hasOwnProperty(_="MODULO_MODE")&&(m(r=t[_],0,9,_),F=r),t.hasOwnProperty(_="POW_PRECISION")&&(m(r=t[_],0,h,_),q=r),t.hasOwnProperty(_="FORMAT")){if("object"!=typeof(r=t[_]))throw Error(c+_+" not an object: "+r);D=r}if(t.hasOwnProperty(_="ALPHABET")){if("string"!=typeof(r=t[_])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(c+_+" invalid: "+r);H="0123456789"==r.slice(0,10),z=r}}return{DECIMAL_PLACES:I,ROUNDING_MODE:U,EXPONENTIAL_AT:[T,N],RANGE:[L,P],CRYPTO:M,MODULO_MODE:F,POW_PRECISION:q,FORMAT:D,ALPHABET:z}},K.isBigNumber=function(t){if(!t||!0!==t._isBigNumber)return!1;if(!K.DEBUG)return!0;var _,r,n=t.c,e=t.e,o=t.s;t:if("[object Array]"=={}.toString.call(n)){if((1===o||-1===o)&&e>=-h&&e<=h&&e===s(e)){if(0===n[0]){if(0===e&&1===n.length)return!0;break t}if((_=(e+1)%u)<1&&(_+=u),String(n[0]).length==_){for(_=0;_<n.length;_++)if((r=n[_])<0||r>=p||r!==s(r))break t;if(0!==r)return!0}}}else if(null===n&&null===e&&(null===o||1===o||-1===o))return!0;throw Error(c+"Invalid BigNumber: "+t)},K.maximum=K.max=function(){return $(arguments,C.lt)},K.minimum=K.min=function(){return $(arguments,C.gt)},K.random=(o=9007199254740992,j=Math.random()*o&2097151?function(){return s(Math.random()*o)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(t){var _,r,n,e,o,i=0,d=[],p=new K(R);if(null==t?t=I:m(t,0,h),e=a(t/u),M)if(crypto.getRandomValues){for(_=crypto.getRandomValues(new Uint32Array(e*=2));i<e;)(o=131072*_[i]+(_[i+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),_[i]=r[0],_[i+1]=r[1]):(d.push(o%1e14),i+=2);i=e/2}else{if(!crypto.randomBytes)throw M=!1,Error(c+"crypto unavailable");for(_=crypto.randomBytes(e*=7);i<e;)(o=281474976710656*(31&_[i])+1099511627776*_[i+1]+4294967296*_[i+2]+16777216*_[i+3]+(_[i+4]<<16)+(_[i+5]<<8)+_[i+6])>=9e15?crypto.randomBytes(7).copy(_,i):(d.push(o%1e14),i+=7);i=e/7}if(!M)for(;i<e;)(o=j())<9e15&&(d[i++]=o%1e14);for(e=d[--i],t%=u,e&&t&&(o=w[u-t],d[i]=s(e/o)*o);0===d[i];d.pop(),i--);if(i<0)d=[n=0];else{for(n=-1;0===d[0];d.splice(0,1),n-=u);for(i=1,o=d[0];o>=10;o/=10,i++);i<u&&(n-=u-i)}return p.e=n,p.c=d,p}),K.sum=function(){for(var t=1,_=arguments,r=new K(_[0]);t<_.length;)r=r.plus(_[t++]);return r},n=function(){var t="0123456789";function _(t,_,r,n){for(var e,o,i=[0],a=0,s=t.length;a<s;){for(o=i.length;o--;i[o]*=_);for(i[0]+=n.indexOf(t.charAt(a++)),e=0;e<i.length;e++)i[e]>r-1&&(null==i[e+1]&&(i[e+1]=0),i[e+1]+=i[e]/r|0,i[e]%=r)}return i.reverse()}return function(n,e,o,i,a){var s,c,d,p,u,l,w,f,h=n.indexOf("."),b=I,y=U;for(h>=0&&(p=q,q=0,n=n.replace(".",""),l=(f=new K(e)).pow(n.length-h),q=p,f.c=_(x(g(l.c),l.e,"0"),10,o,t),f.e=f.c.length),d=p=(w=_(n,e,o,a?(s=z,t):(s=t,z))).length;0==w[--p];w.pop());if(!w[0])return s.charAt(0);if(h<0?--d:(l.c=w,l.e=d,l.s=i,w=(l=r(l,f,b,y,o)).c,u=l.r,d=l.e),h=w[c=d+b+1],p=o/2,u=u||c<0||null!=w[c+1],u=y<4?(null!=h||u)&&(0==y||y==(l.s<0?3:2)):h>p||h==p&&(4==y||u||6==y&&1&w[c-1]||y==(l.s<0?8:7)),c<1||!w[0])n=u?x(s.charAt(1),-b,s.charAt(0)):s.charAt(0);else{if(w.length=c,u)for(--o;++w[--c]>o;)w[c]=0,c||(++d,w=[1].concat(w));for(p=w.length;!w[--p];);for(h=0,n="";h<=p;n+=s.charAt(w[h++]));n=x(n,d,s.charAt(0))}return n}}(),r=function(){function t(t,_,r){var n,e,o,i,a=0,s=t.length,c=_%f,d=_/f|0;for(t=t.slice();s--;)a=((e=c*(o=t[s]%f)+(n=d*o+(i=t[s]/f|0)*c)%f*f+a)/r|0)+(n/f|0)+d*i,t[s]=e%r;return a&&(t=[a].concat(t)),t}function _(t,_,r,n){var e,o;if(r!=n)o=r>n?1:-1;else for(e=o=0;e<r;e++)if(t[e]!=_[e]){o=t[e]>_[e]?1:-1;break}return o}function r(t,_,r,n){for(var e=0;r--;)t[r]-=e,e=t[r]<_[r]?1:0,t[r]=e*n+t[r]-_[r];for(;!t[0]&&t.length>1;t.splice(0,1));}return function(n,e,o,i,a){var c,d,l,w,f,h,g,y,m,v,k,x,j,A,E,O,S,B=n.s==e.s?1:-1,C=n.c,R=e.c;if(!(C&&C[0]&&R&&R[0]))return new K(n.s&&e.s&&(C?!R||C[0]!=R[0]:R)?C&&0==C[0]||!R?0*B:B/0:NaN);for(m=(y=new K(B)).c=[],B=o+(d=n.e-e.e)+1,a||(a=p,d=b(n.e/u)-b(e.e/u),B=B/u|0),l=0;R[l]==(C[l]||0);l++);if(R[l]>(C[l]||0)&&d--,B<0)m.push(1),w=!0;else{for(A=C.length,O=R.length,l=0,B+=2,(f=s(a/(R[0]+1)))>1&&(R=t(R,f,a),C=t(C,f,a),O=R.length,A=C.length),j=O,k=(v=C.slice(0,O)).length;k<O;v[k++]=0);S=R.slice(),S=[0].concat(S),E=R[0],R[1]>=a/2&&E++;do{if(f=0,(c=_(R,v,O,k))<0){if(x=v[0],O!=k&&(x=x*a+(v[1]||0)),(f=s(x/E))>1)for(f>=a&&(f=a-1),g=(h=t(R,f,a)).length,k=v.length;1==_(h,v,g,k);)f--,r(h,O<g?S:R,g,a),g=h.length,c=1;else 0==f&&(c=f=1),g=(h=R.slice()).length;if(g<k&&(h=[0].concat(h)),r(v,h,k,a),k=v.length,-1==c)for(;_(R,v,O,k)<1;)f++,r(v,O<k?S:R,k,a),k=v.length}else 0===c&&(f++,v=[0]);m[l++]=f,v[0]?v[k++]=C[j]||0:(v=[C[j]],k=1)}while((j++<A||null!=v[0])&&B--);w=null!=v[0],m[0]||m.splice(0,1)}if(a==p){for(l=1,B=m[0];B>=10;B/=10,l++);W(y,o+(y.e=l+d*u-1)+1,i,w)}else y.e=d,y.r=+w;return y}}(),A=/^(-?)0([xbo])(?=\w[\w.]*$)/i,E=/^([^.]+)\.$/,O=/^\.([^.]+)$/,S=/^-?(Infinity|NaN)$/,B=/^\s*\+(?=[\w.])|^\s+|\s+$/g,e=function(t,_,r,n){var e,o=r?_:_.replace(B,"");if(S.test(o))t.s=isNaN(o)?null:o<0?-1:1;else{if(!r&&(o=o.replace(A,(function(t,_,r){return e="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=e?t:_})),n&&(e=n,o=o.replace(E,"$1").replace(O,"0.$1")),_!=o))return new K(o,e);if(K.DEBUG)throw Error(c+"Not a"+(n?" base "+n:"")+" number: "+_);t.s=null}t.c=t.e=null},C.absoluteValue=C.abs=function(){var t=new K(this);return t.s<0&&(t.s=1),t},C.comparedTo=function(t,_){return y(this,new K(t,_))},C.decimalPlaces=C.dp=function(t,_){var r,n,e,o=this;if(null!=t)return m(t,0,h),null==_?_=U:m(_,0,8),W(new K(o),t+o.e+1,_);if(!(r=o.c))return null;if(n=((e=r.length-1)-b(this.e/u))*u,e=r[e])for(;e%10==0;e/=10,n--);return n<0&&(n=0),n},C.dividedBy=C.div=function(t,_){return r(this,new K(t,_),I,U)},C.dividedToIntegerBy=C.idiv=function(t,_){return r(this,new K(t,_),0,1)},C.exponentiatedBy=C.pow=function(t,_){var r,n,e,o,i,d,p,l,w=this;if((t=new K(t)).c&&!t.isInteger())throw Error(c+"Exponent not an integer: "+G(t));if(null!=_&&(_=new K(_)),i=t.e>14,!w.c||!w.c[0]||1==w.c[0]&&!w.e&&1==w.c.length||!t.c||!t.c[0])return l=new K(Math.pow(+G(w),i?t.s*(2-v(t)):+G(t))),_?l.mod(_):l;if(d=t.s<0,_){if(_.c?!_.c[0]:!_.s)return new K(NaN);(n=!d&&w.isInteger()&&_.isInteger())&&(w=w.mod(_))}else{if(t.e>9&&(w.e>0||w.e<-1||(0==w.e?w.c[0]>1||i&&w.c[1]>=24e7:w.c[0]<8e13||i&&w.c[0]<=9999975e7)))return o=w.s<0&&v(t)?-0:0,w.e>-1&&(o=1/o),new K(d?1/o:o);q&&(o=a(q/u+2))}for(i?(r=new K(.5),d&&(t.s=1),p=v(t)):p=(e=Math.abs(+G(t)))%2,l=new K(R);;){if(p){if(!(l=l.times(w)).c)break;o?l.c.length>o&&(l.c.length=o):n&&(l=l.mod(_))}if(e){if(0===(e=s(e/2)))break;p=e%2}else if(W(t=t.times(r),t.e+1,1),t.e>14)p=v(t);else{if(0==(e=+G(t)))break;p=e%2}w=w.times(w),o?w.c&&w.c.length>o&&(w.c.length=o):n&&(w=w.mod(_))}return n?l:(d&&(l=R.div(l)),_?l.mod(_):o?W(l,q,U,void 0):l)},C.integerValue=function(t){var _=new K(this);return null==t?t=U:m(t,0,8),W(_,_.e+1,t)},C.isEqualTo=C.eq=function(t,_){return 0===y(this,new K(t,_))},C.isFinite=function(){return!!this.c},C.isGreaterThan=C.gt=function(t,_){return y(this,new K(t,_))>0},C.isGreaterThanOrEqualTo=C.gte=function(t,_){return 1===(_=y(this,new K(t,_)))||0===_},C.isInteger=function(){return!!this.c&&b(this.e/u)>this.c.length-2},C.isLessThan=C.lt=function(t,_){return y(this,new K(t,_))<0},C.isLessThanOrEqualTo=C.lte=function(t,_){return-1===(_=y(this,new K(t,_)))||0===_},C.isNaN=function(){return!this.s},C.isNegative=function(){return this.s<0},C.isPositive=function(){return this.s>0},C.isZero=function(){return!!this.c&&0==this.c[0]},C.minus=function(t,_){var r,n,e,o,i=this,a=i.s;if(_=(t=new K(t,_)).s,!a||!_)return new K(NaN);if(a!=_)return t.s=-_,i.plus(t);var s=i.e/u,c=t.e/u,d=i.c,l=t.c;if(!s||!c){if(!d||!l)return d?(t.s=-_,t):new K(l?i:NaN);if(!d[0]||!l[0])return l[0]?(t.s=-_,t):new K(d[0]?i:3==U?-0:0)}if(s=b(s),c=b(c),d=d.slice(),a=s-c){for((o=a<0)?(a=-a,e=d):(c=s,e=l),e.reverse(),_=a;_--;e.push(0));e.reverse()}else for(n=(o=(a=d.length)<(_=l.length))?a:_,a=_=0;_<n;_++)if(d[_]!=l[_]){o=d[_]<l[_];break}if(o&&(e=d,d=l,l=e,t.s=-t.s),(_=(n=l.length)-(r=d.length))>0)for(;_--;d[r++]=0);for(_=p-1;n>a;){if(d[--n]<l[n]){for(r=n;r&&!d[--r];d[r]=_);--d[r],d[n]+=p}d[n]-=l[n]}for(;0==d[0];d.splice(0,1),--c);return d[0]?V(t,d,c):(t.s=3==U?-1:1,t.c=[t.e=0],t)},C.modulo=C.mod=function(t,_){var n,e,o=this;return t=new K(t,_),!o.c||!t.s||t.c&&!t.c[0]?new K(NaN):!t.c||o.c&&!o.c[0]?new K(o):(9==F?(e=t.s,t.s=1,n=r(o,t,0,3),t.s=e,n.s*=e):n=r(o,t,0,F),(t=o.minus(n.times(t))).c[0]||1!=F||(t.s=o.s),t)},C.multipliedBy=C.times=function(t,_){var r,n,e,o,i,a,s,c,d,l,w,h,g,y,m,v=this,k=v.c,x=(t=new K(t,_)).c;if(!(k&&x&&k[0]&&x[0]))return!v.s||!t.s||k&&!k[0]&&!x||x&&!x[0]&&!k?t.c=t.e=t.s=null:(t.s*=v.s,k&&x?(t.c=[0],t.e=0):t.c=t.e=null),t;for(n=b(v.e/u)+b(t.e/u),t.s*=v.s,(s=k.length)<(l=x.length)&&(g=k,k=x,x=g,e=s,s=l,l=e),e=s+l,g=[];e--;g.push(0));for(y=p,m=f,e=l;--e>=0;){for(r=0,w=x[e]%m,h=x[e]/m|0,o=e+(i=s);o>e;)r=((c=w*(c=k[--i]%m)+(a=h*c+(d=k[i]/m|0)*w)%m*m+g[o]+r)/y|0)+(a/m|0)+h*d,g[o--]=c%y;g[o]=r}return r?++n:g.splice(0,1),V(t,g,n)},C.negated=function(){var t=new K(this);return t.s=-t.s||null,t},C.plus=function(t,_){var r,n=this,e=n.s;if(_=(t=new K(t,_)).s,!e||!_)return new K(NaN);if(e!=_)return t.s=-_,n.minus(t);var o=n.e/u,i=t.e/u,a=n.c,s=t.c;if(!o||!i){if(!a||!s)return new K(e/0);if(!a[0]||!s[0])return s[0]?t:new K(a[0]?n:0*e)}if(o=b(o),i=b(i),a=a.slice(),e=o-i){for(e>0?(i=o,r=s):(e=-e,r=a),r.reverse();e--;r.push(0));r.reverse()}for((e=a.length)-(_=s.length)<0&&(r=s,s=a,a=r,_=e),e=0;_;)e=(a[--_]=a[_]+s[_]+e)/p|0,a[_]=p===a[_]?0:a[_]%p;return e&&(a=[e].concat(a),++i),V(t,a,i)},C.precision=C.sd=function(t,_){var r,n,e,o=this;if(null!=t&&t!==!!t)return m(t,1,h),null==_?_=U:m(_,0,8),W(new K(o),t,_);if(!(r=o.c))return null;if(n=(e=r.length-1)*u+1,e=r[e]){for(;e%10==0;e/=10,n--);for(e=r[0];e>=10;e/=10,n++);}return t&&o.e+1>n&&(n=o.e+1),n},C.shiftedBy=function(t){return m(t,-9007199254740991,l),this.times("1e"+t)},C.squareRoot=C.sqrt=function(){var t,_,n,e,o,i=this,a=i.c,s=i.s,c=i.e,d=I+4,p=new K("0.5");if(1!==s||!a||!a[0])return new K(!s||s<0&&(!a||a[0])?NaN:a?i:1/0);if(0==(s=Math.sqrt(+G(i)))||s==1/0?(((_=g(a)).length+c)%2==0&&(_+="0"),s=Math.sqrt(+_),c=b((c+1)/2)-(c<0||c%2),n=new K(_=s==1/0?"5e"+c:(_=s.toExponential()).slice(0,_.indexOf("e")+1)+c)):n=new K(s+""),n.c[0])for((s=(c=n.e)+d)<3&&(s=0);;)if(o=n,n=p.times(o.plus(r(i,o,d,1))),g(o.c).slice(0,s)===(_=g(n.c)).slice(0,s)){if(n.e<c&&--s,"9999"!=(_=_.slice(s-3,s+1))&&(e||"4999"!=_)){+_&&(+_.slice(1)||"5"!=_.charAt(0))||(W(n,n.e+I+2,1),t=!n.times(n).eq(i));break}if(!e&&(W(o,o.e+I+2,0),o.times(o).eq(i))){n=o;break}d+=4,s+=4,e=1}return W(n,n.e+I+1,U,t)},C.toExponential=function(t,_){return null!=t&&(m(t,0,h),t++),Y(this,t,_,1)},C.toFixed=function(t,_){return null!=t&&(m(t,0,h),t=t+this.e+1),Y(this,t,_)},C.toFormat=function(t,_,r){var n,e=this;if(null==r)null!=t&&_&&"object"==typeof _?(r=_,_=null):t&&"object"==typeof t?(r=t,t=_=null):r=D;else if("object"!=typeof r)throw Error(c+"Argument not an object: "+r);if(n=e.toFixed(t,_),e.c){var o,i=n.split("."),a=+r.groupSize,s=+r.secondaryGroupSize,d=r.groupSeparator||"",p=i[0],u=i[1],l=e.s<0,w=l?p.slice(1):p,f=w.length;if(s&&(o=a,a=s,s=o,f-=o),a>0&&f>0){for(o=f%a||a,p=w.substr(0,o);o<f;o+=a)p+=d+w.substr(o,a);s>0&&(p+=d+w.slice(o)),l&&(p="-"+p)}n=u?p+(r.decimalSeparator||"")+((s=+r.fractionGroupSize)?u.replace(new RegExp("\\d{"+s+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):u):p}return(r.prefix||"")+n+(r.suffix||"")},C.toFraction=function(t){var _,n,e,o,i,a,s,d,p,l,f,h,b=this,y=b.c;if(null!=t&&(!(s=new K(t)).isInteger()&&(s.c||1!==s.s)||s.lt(R)))throw Error(c+"Argument "+(s.isInteger()?"out of range: ":"not an integer: ")+G(s));if(!y)return new K(b);for(_=new K(R),p=n=new K(R),e=d=new K(R),h=g(y),i=_.e=h.length-b.e-1,_.c[0]=w[(a=i%u)<0?u+a:a],t=!t||s.comparedTo(_)>0?i>0?_:p:s,a=P,P=1/0,s=new K(h),d.c[0]=0;l=r(s,_,0,1),1!=(o=n.plus(l.times(e))).comparedTo(t);)n=e,e=o,p=d.plus(l.times(o=p)),d=o,_=s.minus(l.times(o=_)),s=o;return o=r(t.minus(n),e,0,1),d=d.plus(o.times(p)),n=n.plus(o.times(e)),d.s=p.s=b.s,f=r(p,e,i*=2,U).minus(b).abs().comparedTo(r(d,n,i,U).minus(b).abs())<1?[p,e]:[d,n],P=a,f},C.toNumber=function(){return+G(this)},C.toPrecision=function(t,_){return null!=t&&m(t,1,h),Y(this,t,_,2)},C.toString=function(t){var _,r=this,e=r.s,o=r.e;return null===o?e?(_="Infinity",e<0&&(_="-"+_)):_="NaN":(null==t?_=o<=T||o>=N?k(g(r.c),o):x(g(r.c),o,"0"):10===t&&H?_=x(g((r=W(new K(r),I+o+1,U)).c),r.e,"0"):(m(t,2,z.length,"Base"),_=n(x(g(r.c),o,"0"),10,t,e,!0)),e<0&&r.c[0]&&(_="-"+_)),_},C.valueOf=C.toJSON=function(){return G(this)},C._isBigNumber=!0,null!=_&&K.set(_),K}(),o.default=o.BigNumber=o,void 0===(n=function(){return o}.call(_,r,_,t))||(t.exports=n)}()},8442:function(t,_,r){const n=r(9488);function e(t,_,r){const n=t[_]+t[r];let e=t[_+1]+t[r+1];n>=4294967296&&e++,t[_]=n,t[_+1]=e}function o(t,_,r,n){let e=t[_]+r;r<0&&(e+=4294967296);let o=t[_+1]+n;e>=4294967296&&o++,t[_]=e,t[_+1]=o}function i(t,_){return t[_]^t[_+1]<<8^t[_+2]<<16^t[_+3]<<24}function a(t,_,r,n,i,a){const s=p[i],c=p[i+1],u=p[a],l=p[a+1];e(d,t,_),o(d,t,s,c);let w=d[n]^d[t],f=d[n+1]^d[t+1];d[n]=f,d[n+1]=w,e(d,r,n),w=d[_]^d[r],f=d[_+1]^d[r+1],d[_]=w>>>24^f<<8,d[_+1]=f>>>24^w<<8,e(d,t,_),o(d,t,u,l),w=d[n]^d[t],f=d[n+1]^d[t+1],d[n]=w>>>16^f<<16,d[n+1]=f>>>16^w<<16,e(d,r,n),w=d[_]^d[r],f=d[_+1]^d[r+1],d[_]=f>>>31^w<<1,d[_+1]=w>>>31^f<<1}const s=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),c=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3].map((function(t){return 2*t}))),d=new Uint32Array(32),p=new Uint32Array(32);function u(t,_){let r=0;for(r=0;r<16;r++)d[r]=t.h[r],d[r+16]=s[r];for(d[24]=d[24]^t.t,d[25]=d[25]^t.t/4294967296,_&&(d[28]=~d[28],d[29]=~d[29]),r=0;r<32;r++)p[r]=i(t.b,4*r);for(r=0;r<12;r++)a(0,8,16,24,c[16*r+0],c[16*r+1]),a(2,10,18,26,c[16*r+2],c[16*r+3]),a(4,12,20,28,c[16*r+4],c[16*r+5]),a(6,14,22,30,c[16*r+6],c[16*r+7]),a(0,10,20,30,c[16*r+8],c[16*r+9]),a(2,12,22,24,c[16*r+10],c[16*r+11]),a(4,14,16,26,c[16*r+12],c[16*r+13]),a(6,8,18,28,c[16*r+14],c[16*r+15]);for(r=0;r<16;r++)t.h[r]=t.h[r]^d[r]^d[r+16]}const l=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);function w(t,_,r,n){if(0===t||t>64)throw new Error("Illegal output length, expected 0 < length <= 64");if(_&&_.length>64)throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");if(r&&16!==r.length)throw new Error("Illegal salt, expected Uint8Array with length is 16");if(n&&16!==n.length)throw new Error("Illegal personal, expected Uint8Array with length is 16");const e={b:new Uint8Array(128),h:new Uint32Array(16),t:0,c:0,outlen:t};l.fill(0),l[0]=t,_&&(l[1]=_.length),l[2]=1,l[3]=1,r&&l.set(r,32),n&&l.set(n,48);for(let t=0;t<16;t++)e.h[t]=s[t]^i(l,4*t);return _&&(f(e,_),e.c=128),e}function f(t,_){for(let r=0;r<_.length;r++)128===t.c&&(t.t+=t.c,u(t,!1),t.c=0),t.b[t.c++]=_[r]}function h(t){for(t.t+=t.c;t.c<128;)t.b[t.c++]=0;u(t,!0);const _=new Uint8Array(t.outlen);for(let r=0;r<t.outlen;r++)_[r]=t.h[r>>2]>>8*(3&r);return _}function b(t,_,r,e,o){r=r||64,t=n.normalizeInput(t),e&&(e=n.normalizeInput(e)),o&&(o=n.normalizeInput(o));const i=w(r,_,e,o);return f(i,t),h(i)}t.exports={blake2b:b,blake2bHex:function(t,_,r,e,o){const i=b(t,_,r,e,o);return n.toHex(i)},blake2bInit:w,blake2bUpdate:f,blake2bFinal:h}},5297:function(t,_,r){const n=r(9488);function e(t,_){return t[_]^t[_+1]<<8^t[_+2]<<16^t[_+3]<<24}function o(t,_,r,n,e,o){c[t]=c[t]+c[_]+e,c[n]=i(c[n]^c[t],16),c[r]=c[r]+c[n],c[_]=i(c[_]^c[r],12),c[t]=c[t]+c[_]+o,c[n]=i(c[n]^c[t],8),c[r]=c[r]+c[n],c[_]=i(c[_]^c[r],7)}function i(t,_){return t>>>_^t<<32-_}const a=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),s=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0]),c=new Uint32Array(16),d=new Uint32Array(16);function p(t,_){let r=0;for(r=0;r<8;r++)c[r]=t.h[r],c[r+8]=a[r];for(c[12]^=t.t,c[13]^=t.t/4294967296,_&&(c[14]=~c[14]),r=0;r<16;r++)d[r]=e(t.b,4*r);for(r=0;r<10;r++)o(0,4,8,12,d[s[16*r+0]],d[s[16*r+1]]),o(1,5,9,13,d[s[16*r+2]],d[s[16*r+3]]),o(2,6,10,14,d[s[16*r+4]],d[s[16*r+5]]),o(3,7,11,15,d[s[16*r+6]],d[s[16*r+7]]),o(0,5,10,15,d[s[16*r+8]],d[s[16*r+9]]),o(1,6,11,12,d[s[16*r+10]],d[s[16*r+11]]),o(2,7,8,13,d[s[16*r+12]],d[s[16*r+13]]),o(3,4,9,14,d[s[16*r+14]],d[s[16*r+15]]);for(r=0;r<8;r++)t.h[r]^=c[r]^c[r+8]}function u(t,_){if(!(t>0&&t<=32))throw new Error("Incorrect output length, should be in [1, 32]");const r=_?_.length:0;if(_&&!(r>0&&r<=32))throw new Error("Incorrect key length, should be in [1, 32]");const n={h:new Uint32Array(a),b:new Uint8Array(64),c:0,t:0,outlen:t};return n.h[0]^=16842752^r<<8^t,r>0&&(l(n,_),n.c=64),n}function l(t,_){for(let r=0;r<_.length;r++)64===t.c&&(t.t+=t.c,p(t,!1),t.c=0),t.b[t.c++]=_[r]}function w(t){for(t.t+=t.c;t.c<64;)t.b[t.c++]=0;p(t,!0);const _=new Uint8Array(t.outlen);for(let r=0;r<t.outlen;r++)_[r]=t.h[r>>2]>>8*(3&r)&255;return _}function f(t,_,r){r=r||32,t=n.normalizeInput(t);const e=u(r,_);return l(e,t),w(e)}t.exports={blake2s:f,blake2sHex:function(t,_,r){const e=f(t,_,r);return n.toHex(e)},blake2sInit:u,blake2sUpdate:l,blake2sFinal:w}},1191:function(t,_,r){const n=r(8442),e=r(5297);t.exports={blake2b:n.blake2b,blake2bHex:n.blake2bHex,blake2bInit:n.blake2bInit,blake2bUpdate:n.blake2bUpdate,blake2bFinal:n.blake2bFinal,blake2s:e.blake2s,blake2sHex:e.blake2sHex,blake2sInit:e.blake2sInit,blake2sUpdate:e.blake2sUpdate,blake2sFinal:e.blake2sFinal}},9488:function(t,_,r){var n=r(5108);function e(t){return(4294967296+t).toString(16).substring(1)}t.exports={normalizeInput:function(t){let _;if(t instanceof Uint8Array)_=t;else{if("string"!=typeof t)throw new Error("Input must be an string, Buffer or Uint8Array");_=(new TextEncoder).encode(t)}return _},toHex:function(t){return Array.prototype.map.call(t,(function(t){return(t<16?"0":"")+t.toString(16)})).join("")},debugPrint:function(t,_,r){let o="\n"+t+" = ";for(let n=0;n<_.length;n+=2){if(32===r)o+=e(_[n]).toUpperCase(),o+=" ",o+=e(_[n+1]).toUpperCase();else{if(64!==r)throw new Error("Invalid size "+r);o+=e(_[n+1]).toUpperCase(),o+=e(_[n]).toUpperCase()}n%6==4?o+="\n"+new Array(t.length+4).join(" "):n<_.length-2&&(o+=" ")}n.log(o)},testSpeed:function(t,_,r){let e=(new Date).getTime();const o=new Uint8Array(_);for(let t=0;t<_;t++)o[t]=t%256;const i=(new Date).getTime();n.log("Generated random input in "+(i-e)+"ms"),e=i;for(let i=0;i<r;i++){const r=t(o),i=(new Date).getTime(),a=i-e;e=i,n.log("Hashed in "+a+"ms: "+r.substring(0,20)+"..."),n.log(Math.round(_/(1<<20)/(a/1e3)*100)/100+" MB PER SECOND")}}}},8764:function(t,_,r){"use strict";var n=r(5108);const e=r(9742),o=r(645),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;_.Buffer=c,_.SlowBuffer=function(t){return+t!=t&&(t=0),c.alloc(+t)},_.INSPECT_MAX_BYTES=50;const a=2147483647;function s(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const _=new Uint8Array(t);return Object.setPrototypeOf(_,c.prototype),_}function c(t,_,r){if("number"==typeof t){if("string"==typeof _)throw new TypeError('The "string" argument must be of type string. Received type number');return u(t)}return d(t,_,r)}function d(t,_,r){if("string"==typeof t)return function(t,_){if("string"==typeof _&&""!==_||(_="utf8"),!c.isEncoding(_))throw new TypeError("Unknown encoding: "+_);const r=0|h(t,_);let n=s(r);const e=n.write(t,_);return e!==r&&(n=n.slice(0,e)),n}(t,_);if(ArrayBuffer.isView(t))return function(t){if(Z(t,Uint8Array)){const _=new Uint8Array(t);return w(_.buffer,_.byteOffset,_.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Z(t,ArrayBuffer)||t&&Z(t.buffer,ArrayBuffer))return w(t,_,r);if("undefined"!=typeof SharedArrayBuffer&&(Z(t,SharedArrayBuffer)||t&&Z(t.buffer,SharedArrayBuffer)))return w(t,_,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return c.from(n,_,r);const e=function(t){if(c.isBuffer(t)){const _=0|f(t.length),r=s(_);return 0===r.length||t.copy(r,0,0,_),r}return void 0!==t.length?"number"!=typeof t.length||X(t.length)?s(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(e)return e;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),_,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function p(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function u(t){return p(t),s(t<0?0:0|f(t))}function l(t){const _=t.length<0?0:0|f(t.length),r=s(_);for(let n=0;n<_;n+=1)r[n]=255&t[n];return r}function w(t,_,r){if(_<0||t.byteLength<_)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<_+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===_&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,_):new Uint8Array(t,_,r),Object.setPrototypeOf(n,c.prototype),n}function f(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function h(t,_){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Z(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let e=!1;for(;;)switch(_){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(t).length;default:if(e)return n?-1:V(t).length;_=(""+_).toLowerCase(),e=!0}}function b(t,_,r){let n=!1;if((void 0===_||_<0)&&(_=0),_>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(_>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,_,r);case"utf8":case"utf-8":return O(this,_,r);case"ascii":return B(this,_,r);case"latin1":case"binary":return C(this,_,r);case"base64":return E(this,_,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,_,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function g(t,_,r){const n=t[_];t[_]=t[r],t[r]=n}function y(t,_,r,n,e){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),X(r=+r)&&(r=e?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(e)return-1;r=t.length-1}else if(r<0){if(!e)return-1;r=0}if("string"==typeof _&&(_=c.from(_,n)),c.isBuffer(_))return 0===_.length?-1:m(t,_,r,n,e);if("number"==typeof _)return _&=255,"function"==typeof Uint8Array.prototype.indexOf?e?Uint8Array.prototype.indexOf.call(t,_,r):Uint8Array.prototype.lastIndexOf.call(t,_,r):m(t,[_],r,n,e);throw new TypeError("val must be string, number or Buffer")}function m(t,_,r,n,e){let o,i=1,a=t.length,s=_.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||_.length<2)return-1;i=2,a/=2,s/=2,r/=2}function c(t,_){return 1===i?t[_]:t.readUInt16BE(_*i)}if(e){let n=-1;for(o=r;o<a;o++)if(c(t,o)===c(_,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===s)return n*i}else-1!==n&&(o-=o-n),n=-1}else for(r+s>a&&(r=a-s),o=r;o>=0;o--){let r=!0;for(let n=0;n<s;n++)if(c(t,o+n)!==c(_,n)){r=!1;break}if(r)return o}return-1}function v(t,_,r,n){r=Number(r)||0;const e=t.length-r;n?(n=Number(n))>e&&(n=e):n=e;const o=_.length;let i;for(n>o/2&&(n=o/2),i=0;i<n;++i){const n=parseInt(_.substr(2*i,2),16);if(X(n))return i;t[r+i]=n}return i}function k(t,_,r,n){return G(V(_,t.length-r),t,r,n)}function x(t,_,r,n){return G(function(t){const _=[];for(let r=0;r<t.length;++r)_.push(255&t.charCodeAt(r));return _}(_),t,r,n)}function j(t,_,r,n){return G(W(_),t,r,n)}function A(t,_,r,n){return G(function(t,_){let r,n,e;const o=[];for(let i=0;i<t.length&&!((_-=2)<0);++i)r=t.charCodeAt(i),n=r>>8,e=r%256,o.push(e),o.push(n);return o}(_,t.length-r),t,r,n)}function E(t,_,r){return 0===_&&r===t.length?e.fromByteArray(t):e.fromByteArray(t.slice(_,r))}function O(t,_,r){r=Math.min(t.length,r);const n=[];let e=_;for(;e<r;){const _=t[e];let o=null,i=_>239?4:_>223?3:_>191?2:1;if(e+i<=r){let r,n,a,s;switch(i){case 1:_<128&&(o=_);break;case 2:r=t[e+1],128==(192&r)&&(s=(31&_)<<6|63&r,s>127&&(o=s));break;case 3:r=t[e+1],n=t[e+2],128==(192&r)&&128==(192&n)&&(s=(15&_)<<12|(63&r)<<6|63&n,s>2047&&(s<55296||s>57343)&&(o=s));break;case 4:r=t[e+1],n=t[e+2],a=t[e+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(s=(15&_)<<18|(63&r)<<12|(63&n)<<6|63&a,s>65535&&s<1114112&&(o=s))}}null===o?(o=65533,i=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),e+=i}return function(t){const _=t.length;if(_<=S)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<_;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}_.kMaxLength=a,c.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),_={foo:function(){return 42}};return Object.setPrototypeOf(_,Uint8Array.prototype),Object.setPrototypeOf(t,_),42===t.foo()}catch(t){return!1}}(),c.TYPED_ARRAY_SUPPORT||void 0===n||"function"!=typeof n.error||n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(t,_,r){return d(t,_,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(t,_,r){return function(t,_,r){return p(t),t<=0?s(t):void 0!==_?"string"==typeof r?s(t).fill(_,r):s(t).fill(_):s(t)}(t,_,r)},c.allocUnsafe=function(t){return u(t)},c.allocUnsafeSlow=function(t){return u(t)},c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,_){if(Z(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),Z(_,Uint8Array)&&(_=c.from(_,_.offset,_.byteLength)),!c.isBuffer(t)||!c.isBuffer(_))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===_)return 0;let r=t.length,n=_.length;for(let e=0,o=Math.min(r,n);e<o;++e)if(t[e]!==_[e]){r=t[e],n=_[e];break}return r<n?-1:n<r?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,_){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);let r;if(void 0===_)for(_=0,r=0;r<t.length;++r)_+=t[r].length;const n=c.allocUnsafe(_);let e=0;for(r=0;r<t.length;++r){let _=t[r];if(Z(_,Uint8Array))e+_.length>n.length?(c.isBuffer(_)||(_=c.from(_)),_.copy(n,e)):Uint8Array.prototype.set.call(n,_,e);else{if(!c.isBuffer(_))throw new TypeError('"list" argument must be an Array of Buffers');_.copy(n,e)}e+=_.length}return n},c.byteLength=h,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let _=0;_<t;_+=2)g(this,_,_+1);return this},c.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let _=0;_<t;_+=4)g(this,_,_+3),g(this,_+1,_+2);return this},c.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let _=0;_<t;_+=8)g(this,_,_+7),g(this,_+1,_+6),g(this,_+2,_+5),g(this,_+3,_+4);return this},c.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?O(this,0,t):b.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){let t="";const r=_.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},i&&(c.prototype[i]=c.prototype.inspect),c.prototype.compare=function(t,_,r,n,e){if(Z(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===_&&(_=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===e&&(e=this.length),_<0||r>t.length||n<0||e>this.length)throw new RangeError("out of range index");if(n>=e&&_>=r)return 0;if(n>=e)return-1;if(_>=r)return 1;if(this===t)return 0;let o=(e>>>=0)-(n>>>=0),i=(r>>>=0)-(_>>>=0);const a=Math.min(o,i),s=this.slice(n,e),d=t.slice(_,r);for(let t=0;t<a;++t)if(s[t]!==d[t]){o=s[t],i=d[t];break}return o<i?-1:i<o?1:0},c.prototype.includes=function(t,_,r){return-1!==this.indexOf(t,_,r)},c.prototype.indexOf=function(t,_,r){return y(this,t,_,r,!0)},c.prototype.lastIndexOf=function(t,_,r){return y(this,t,_,r,!1)},c.prototype.write=function(t,_,r,n){if(void 0===_)n="utf8",r=this.length,_=0;else if(void 0===r&&"string"==typeof _)n=_,r=this.length,_=0;else{if(!isFinite(_))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");_>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const e=this.length-_;if((void 0===r||r>e)&&(r=e),t.length>0&&(r<0||_<0)||_>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return v(this,t,_,r);case"utf8":case"utf-8":return k(this,t,_,r);case"ascii":case"latin1":case"binary":return x(this,t,_,r);case"base64":return j(this,t,_,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,_,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function B(t,_,r){let n="";r=Math.min(t.length,r);for(let e=_;e<r;++e)n+=String.fromCharCode(127&t[e]);return n}function C(t,_,r){let n="";r=Math.min(t.length,r);for(let e=_;e<r;++e)n+=String.fromCharCode(t[e]);return n}function R(t,_,r){const n=t.length;(!_||_<0)&&(_=0),(!r||r<0||r>n)&&(r=n);let e="";for(let n=_;n<r;++n)e+=J[t[n]];return e}function I(t,_,r){const n=t.slice(_,r);let e="";for(let t=0;t<n.length-1;t+=2)e+=String.fromCharCode(n[t]+256*n[t+1]);return e}function U(t,_,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+_>r)throw new RangeError("Trying to access beyond buffer length")}function T(t,_,r,n,e,o){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(_>e||_<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function N(t,_,r,n,e){H(_,n,e,t,r,7);let o=Number(_&BigInt(4294967295));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let i=Number(_>>BigInt(32)&BigInt(4294967295));return t[r++]=i,i>>=8,t[r++]=i,i>>=8,t[r++]=i,i>>=8,t[r++]=i,r}function L(t,_,r,n,e){H(_,n,e,t,r,7);let o=Number(_&BigInt(4294967295));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let i=Number(_>>BigInt(32)&BigInt(4294967295));return t[r+3]=i,i>>=8,t[r+2]=i,i>>=8,t[r+1]=i,i>>=8,t[r]=i,r+8}function P(t,_,r,n,e,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(t,_,r,n,e){return _=+_,r>>>=0,e||P(t,0,r,4),o.write(t,_,r,n,23,4),r+4}function F(t,_,r,n,e){return _=+_,r>>>=0,e||P(t,0,r,8),o.write(t,_,r,n,52,8),r+8}c.prototype.slice=function(t,_){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(_=void 0===_?r:~~_)<0?(_+=r)<0&&(_=0):_>r&&(_=r),_<t&&(_=t);const n=this.subarray(t,_);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(t,_,r){t>>>=0,_>>>=0,r||U(t,_,this.length);let n=this[t],e=1,o=0;for(;++o<_&&(e*=256);)n+=this[t+o]*e;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(t,_,r){t>>>=0,_>>>=0,r||U(t,_,this.length);let n=this[t+--_],e=1;for(;_>0&&(e*=256);)n+=this[t+--_]*e;return n},c.prototype.readUint8=c.prototype.readUInt8=function(t,_){return t>>>=0,_||U(t,1,this.length),this[t]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(t,_){return t>>>=0,_||U(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(t,_){return t>>>=0,_||U(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(t,_){return t>>>=0,_||U(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(t,_){return t>>>=0,_||U(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readBigUInt64LE=Q((function(t){K(t>>>=0,"offset");const _=this[t],r=this[t+7];void 0!==_&&void 0!==r||Y(t,this.length-8);const n=_+256*this[++t]+65536*this[++t]+this[++t]*2**24,e=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(e)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(t){K(t>>>=0,"offset");const _=this[t],r=this[t+7];void 0!==_&&void 0!==r||Y(t,this.length-8);const n=_*2**24+65536*this[++t]+256*this[++t]+this[++t],e=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(e)})),c.prototype.readIntLE=function(t,_,r){t>>>=0,_>>>=0,r||U(t,_,this.length);let n=this[t],e=1,o=0;for(;++o<_&&(e*=256);)n+=this[t+o]*e;return e*=128,n>=e&&(n-=Math.pow(2,8*_)),n},c.prototype.readIntBE=function(t,_,r){t>>>=0,_>>>=0,r||U(t,_,this.length);let n=_,e=1,o=this[t+--n];for(;n>0&&(e*=256);)o+=this[t+--n]*e;return e*=128,o>=e&&(o-=Math.pow(2,8*_)),o},c.prototype.readInt8=function(t,_){return t>>>=0,_||U(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,_){t>>>=0,_||U(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(t,_){t>>>=0,_||U(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(t,_){return t>>>=0,_||U(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,_){return t>>>=0,_||U(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readBigInt64LE=Q((function(t){K(t>>>=0,"offset");const _=this[t],r=this[t+7];void 0!==_&&void 0!==r||Y(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(_+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),c.prototype.readBigInt64BE=Q((function(t){K(t>>>=0,"offset");const _=this[t],r=this[t+7];void 0!==_&&void 0!==r||Y(t,this.length-8);const n=(_<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),c.prototype.readFloatLE=function(t,_){return t>>>=0,_||U(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,_){return t>>>=0,_||U(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,_){return t>>>=0,_||U(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,_){return t>>>=0,_||U(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(t,_,r,n){t=+t,_>>>=0,r>>>=0,n||T(this,t,_,r,Math.pow(2,8*r)-1,0);let e=1,o=0;for(this[_]=255&t;++o<r&&(e*=256);)this[_+o]=t/e&255;return _+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(t,_,r,n){t=+t,_>>>=0,r>>>=0,n||T(this,t,_,r,Math.pow(2,8*r)-1,0);let e=r-1,o=1;for(this[_+e]=255&t;--e>=0&&(o*=256);)this[_+e]=t/o&255;return _+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,1,255,0),this[_]=255&t,_+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,2,65535,0),this[_]=255&t,this[_+1]=t>>>8,_+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,2,65535,0),this[_]=t>>>8,this[_+1]=255&t,_+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,4,4294967295,0),this[_+3]=t>>>24,this[_+2]=t>>>16,this[_+1]=t>>>8,this[_]=255&t,_+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,4,4294967295,0),this[_]=t>>>24,this[_+1]=t>>>16,this[_+2]=t>>>8,this[_+3]=255&t,_+4},c.prototype.writeBigUInt64LE=Q((function(t,_=0){return N(this,t,_,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(t,_=0){return L(this,t,_,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(t,_,r,n){if(t=+t,_>>>=0,!n){const n=Math.pow(2,8*r-1);T(this,t,_,r,n-1,-n)}let e=0,o=1,i=0;for(this[_]=255&t;++e<r&&(o*=256);)t<0&&0===i&&0!==this[_+e-1]&&(i=1),this[_+e]=(t/o>>0)-i&255;return _+r},c.prototype.writeIntBE=function(t,_,r,n){if(t=+t,_>>>=0,!n){const n=Math.pow(2,8*r-1);T(this,t,_,r,n-1,-n)}let e=r-1,o=1,i=0;for(this[_+e]=255&t;--e>=0&&(o*=256);)t<0&&0===i&&0!==this[_+e+1]&&(i=1),this[_+e]=(t/o>>0)-i&255;return _+r},c.prototype.writeInt8=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,1,127,-128),t<0&&(t=255+t+1),this[_]=255&t,_+1},c.prototype.writeInt16LE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,2,32767,-32768),this[_]=255&t,this[_+1]=t>>>8,_+2},c.prototype.writeInt16BE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,2,32767,-32768),this[_]=t>>>8,this[_+1]=255&t,_+2},c.prototype.writeInt32LE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,4,2147483647,-2147483648),this[_]=255&t,this[_+1]=t>>>8,this[_+2]=t>>>16,this[_+3]=t>>>24,_+4},c.prototype.writeInt32BE=function(t,_,r){return t=+t,_>>>=0,r||T(this,t,_,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[_]=t>>>24,this[_+1]=t>>>16,this[_+2]=t>>>8,this[_+3]=255&t,_+4},c.prototype.writeBigInt64LE=Q((function(t,_=0){return N(this,t,_,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(t,_=0){return L(this,t,_,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(t,_,r){return M(this,t,_,!0,r)},c.prototype.writeFloatBE=function(t,_,r){return M(this,t,_,!1,r)},c.prototype.writeDoubleLE=function(t,_,r){return F(this,t,_,!0,r)},c.prototype.writeDoubleBE=function(t,_,r){return F(this,t,_,!1,r)},c.prototype.copy=function(t,_,r,n){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),_>=t.length&&(_=t.length),_||(_=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(_<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-_<n-r&&(n=t.length-_+r);const e=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(_,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),_),e},c.prototype.fill=function(t,_,r,n){if("string"==typeof t){if("string"==typeof _?(n=_,_=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const _=t.charCodeAt(0);("utf8"===n&&_<128||"latin1"===n)&&(t=_)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(_<0||this.length<_||this.length<r)throw new RangeError("Out of range index");if(r<=_)return this;let e;if(_>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(e=_;e<r;++e)this[e]=t;else{const o=c.isBuffer(t)?t:c.from(t,n),i=o.length;if(0===i)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(e=0;e<r-_;++e)this[e+_]=o[e%i]}return this};const q={};function D(t,_,r){q[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:_.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function z(t){let _="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)_=`_${t.slice(r-3,r)}${_}`;return`${t.slice(0,r)}${_}`}function H(t,_,r,n,e,o){if(t>r||t<_){const n="bigint"==typeof _?"n":"";let e;throw e=o>3?0===_||_===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${_}${n} and <= ${r}${n}`,new q.ERR_OUT_OF_RANGE("value",e,t)}!function(t,_,r){K(_,"offset"),void 0!==t[_]&&void 0!==t[_+r]||Y(_,t.length-(r+1))}(n,e,o)}function K(t,_){if("number"!=typeof t)throw new q.ERR_INVALID_ARG_TYPE(_,"number",t)}function Y(t,_,r){if(Math.floor(t)!==t)throw K(t,r),new q.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(_<0)throw new q.ERR_BUFFER_OUT_OF_BOUNDS;throw new q.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${_}`,t)}D("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),D("ERR_INVALID_ARG_TYPE",(function(t,_){return`The "${t}" argument must be of type number. Received type ${typeof _}`}),TypeError),D("ERR_OUT_OF_RANGE",(function(t,_,r){let n=`The value of "${t}" is out of range.`,e=r;return Number.isInteger(r)&&Math.abs(r)>2**32?e=z(String(r)):"bigint"==typeof r&&(e=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(e=z(e)),e+="n"),n+=` It must be ${_}. Received ${e}`,n}),RangeError);const $=/[^+/0-9A-Za-z-_]/g;function V(t,_){let r;_=_||1/0;const n=t.length;let e=null;const o=[];for(let i=0;i<n;++i){if(r=t.charCodeAt(i),r>55295&&r<57344){if(!e){if(r>56319){(_-=3)>-1&&o.push(239,191,189);continue}if(i+1===n){(_-=3)>-1&&o.push(239,191,189);continue}e=r;continue}if(r<56320){(_-=3)>-1&&o.push(239,191,189),e=r;continue}r=65536+(e-55296<<10|r-56320)}else e&&(_-=3)>-1&&o.push(239,191,189);if(e=null,r<128){if((_-=1)<0)break;o.push(r)}else if(r<2048){if((_-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((_-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((_-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function W(t){return e.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace($,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,_,r,n){let e;for(e=0;e<n&&!(e+r>=_.length||e>=t.length);++e)_[e+r]=t[e];return e}function Z(t,_){return t instanceof _||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===_.name}function X(t){return t!=t}const J=function(){const t="0123456789abcdef",_=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let e=0;e<16;++e)_[n+e]=t[r]+t[e]}return _}();function Q(t){return"undefined"==typeof BigInt?tt:t}function tt(){throw new Error("BigInt not supported")}},7263:function(t,_,r){"use strict";var n=r(7537),e=r.n(n),o=r(3645),i=r.n(o)()(e());i.push([t.id,".react-tabs {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.react-tabs__tab-list {\n  border-bottom: 1px solid #aaa;\n  margin: 0 0 10px;\n  padding: 0;\n}\n\n.react-tabs__tab {\n  display: inline-block;\n  border: 1px solid transparent;\n  border-bottom: none;\n  bottom: -1px;\n  position: relative;\n  list-style: none;\n  padding: 6px 12px;\n  cursor: pointer;\n}\n\n.react-tabs__tab--selected {\n  background: #fff;\n  border-color: #aaa;\n  color: black;\n  border-radius: 5px 5px 0 0;\n}\n\n.react-tabs__tab--disabled {\n  color: GrayText;\n  cursor: default;\n}\n\n.react-tabs__tab:focus {\n  outline: none;\n}\n\n.react-tabs__tab:focus:after {\n  content: '';\n  position: absolute;\n  height: 5px;\n  left: -4px;\n  right: -4px;\n  bottom: -5px;\n  background: #fff;\n}\n\n.react-tabs__tab-panel {\n  display: none;\n}\n\n.react-tabs__tab-panel--selected {\n  display: block;\n}\n","",{version:3,sources:["webpack://./node_modules/react-tabs/style/react-tabs.css"],names:[],mappings:"AAAA;EACE,wCAAwC;AAC1C;;AAEA;EACE,6BAA6B;EAC7B,gBAAgB;EAChB,UAAU;AACZ;;AAEA;EACE,qBAAqB;EACrB,6BAA6B;EAC7B,mBAAmB;EACnB,YAAY;EACZ,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,0BAA0B;AAC5B;;AAEA;EACE,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,WAAW;EACX,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,cAAc;AAChB",sourcesContent:[".react-tabs {\n  -webkit-tap-highlight-color: transparent;\n}\n\n.react-tabs__tab-list {\n  border-bottom: 1px solid #aaa;\n  margin: 0 0 10px;\n  padding: 0;\n}\n\n.react-tabs__tab {\n  display: inline-block;\n  border: 1px solid transparent;\n  border-bottom: none;\n  bottom: -1px;\n  position: relative;\n  list-style: none;\n  padding: 6px 12px;\n  cursor: pointer;\n}\n\n.react-tabs__tab--selected {\n  background: #fff;\n  border-color: #aaa;\n  color: black;\n  border-radius: 5px 5px 0 0;\n}\n\n.react-tabs__tab--disabled {\n  color: GrayText;\n  cursor: default;\n}\n\n.react-tabs__tab:focus {\n  outline: none;\n}\n\n.react-tabs__tab:focus:after {\n  content: '';\n  position: absolute;\n  height: 5px;\n  left: -4px;\n  right: -4px;\n  bottom: -5px;\n  background: #fff;\n}\n\n.react-tabs__tab-panel {\n  display: none;\n}\n\n.react-tabs__tab-panel--selected {\n  display: block;\n}\n"],sourceRoot:""}]),_.Z=i},645:function(t,_){_.read=function(t,_,r,n,e){var o,i,a=8*e-n-1,s=(1<<a)-1,c=s>>1,d=-7,p=r?e-1:0,u=r?-1:1,l=t[_+p];for(p+=u,o=l&(1<<-d)-1,l>>=-d,d+=a;d>0;o=256*o+t[_+p],p+=u,d-=8);for(i=o&(1<<-d)-1,o>>=-d,d+=n;d>0;i=256*i+t[_+p],p+=u,d-=8);if(0===o)o=1-c;else{if(o===s)return i?NaN:1/0*(l?-1:1);i+=Math.pow(2,n),o-=c}return(l?-1:1)*i*Math.pow(2,o-n)},_.write=function(t,_,r,n,e,o){var i,a,s,c=8*o-e-1,d=(1<<c)-1,p=d>>1,u=23===e?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:o-1,w=n?1:-1,f=_<0||0===_&&1/_<0?1:0;for(_=Math.abs(_),isNaN(_)||_===1/0?(a=isNaN(_)?1:0,i=d):(i=Math.floor(Math.log(_)/Math.LN2),_*(s=Math.pow(2,-i))<1&&(i--,s*=2),(_+=i+p>=1?u/s:u*Math.pow(2,1-p))*s>=2&&(i++,s/=2),i+p>=d?(a=0,i=d):i+p>=1?(a=(_*s-1)*Math.pow(2,e),i+=p):(a=_*Math.pow(2,p-1)*Math.pow(2,e),i=0));e>=8;t[r+l]=255&a,l+=w,a/=256,e-=8);for(i=i<<e|a,c+=e;c>0;t[r+l]=255&i,l+=w,i/=256,c-=8);t[r+l-w]|=128*f}},1056:function(t){t.exports=function(){"use strict";var t=function(_,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,_){t.__proto__=_}||function(t,_){for(var r in _)Object.prototype.hasOwnProperty.call(_,r)&&(t[r]=_[r])})(_,r)},_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function r(t,_,r,n){var e,o,i,a=_||[0],s=(r=r||0)>>>3,c=-1===n?3:0;for(e=0;e<t.length;e+=1)o=(i=e+s)>>>2,a.length<=o&&a.push(0),a[o]|=t[e]<<8*(c+n*(i%4));return{value:a,binLen:8*t.length+r}}function n(t,n,e){switch(n){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(t){case"HEX":return function(t,_,r){return function(t,_,r,n){var e,o,i,a;if(0!=t.length%2)throw new Error("String of HEX type must be in byte increments");var s=_||[0],c=(r=r||0)>>>3,d=-1===n?3:0;for(e=0;e<t.length;e+=2){if(o=parseInt(t.substr(e,2),16),isNaN(o))throw new Error("String of HEX type contains invalid characters");for(i=(a=(e>>>1)+c)>>>2;s.length<=i;)s.push(0);s[i]|=o<<8*(d+n*(a%4))}return{value:s,binLen:4*t.length+r}}(t,_,r,e)};case"TEXT":return function(t,_,r){return function(t,_,r,n,e){var o,i,a,s,c,d,p,u,l=0,w=r||[0],f=(n=n||0)>>>3;if("UTF8"===_)for(p=-1===e?3:0,a=0;a<t.length;a+=1)for(i=[],128>(o=t.charCodeAt(a))?i.push(o):2048>o?(i.push(192|o>>>6),i.push(128|63&o)):55296>o||57344<=o?i.push(224|o>>>12,128|o>>>6&63,128|63&o):(a+=1,o=65536+((1023&o)<<10|1023&t.charCodeAt(a)),i.push(240|o>>>18,128|o>>>12&63,128|o>>>6&63,128|63&o)),s=0;s<i.length;s+=1){for(c=(d=l+f)>>>2;w.length<=c;)w.push(0);w[c]|=i[s]<<8*(p+e*(d%4)),l+=1}else for(p=-1===e?2:0,u="UTF16LE"===_&&1!==e||"UTF16LE"!==_&&1===e,a=0;a<t.length;a+=1){for(o=t.charCodeAt(a),!0===u&&(o=(s=255&o)<<8|o>>>8),c=(d=l+f)>>>2;w.length<=c;)w.push(0);w[c]|=o<<8*(p+e*(d%4)),l+=2}return{value:w,binLen:8*l+n}}(t,n,_,r,e)};case"B64":return function(t,r,n){return function(t,r,n,e){var o,i,a,s,c,d,p=0,u=r||[0],l=(n=n||0)>>>3,w=-1===e?3:0,f=t.indexOf("=");if(-1===t.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(t=t.replace(/=/g,""),-1!==f&&f<t.length)throw new Error("Invalid '=' found in base-64 string");for(o=0;o<t.length;o+=4){for(s=t.substr(o,4),a=0,i=0;i<s.length;i+=1)a|=_.indexOf(s.charAt(i))<<18-6*i;for(i=0;i<s.length-1;i+=1){for(c=(d=p+l)>>>2;u.length<=c;)u.push(0);u[c]|=(a>>>16-8*i&255)<<8*(w+e*(d%4)),p+=1}}return{value:u,binLen:8*p+n}}(t,r,n,e)};case"BYTES":return function(t,_,r){return function(t,_,r,n){var e,o,i,a,s=_||[0],c=(r=r||0)>>>3,d=-1===n?3:0;for(o=0;o<t.length;o+=1)e=t.charCodeAt(o),i=(a=o+c)>>>2,s.length<=i&&s.push(0),s[i]|=e<<8*(d+n*(a%4));return{value:s,binLen:8*t.length+r}}(t,_,r,e)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t,_,n){return function(t,_,n,e){return r(new Uint8Array(t),_,n,e)}(t,_,n,e)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t,_,n){return r(t,_,n,e)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function e(t,r,n,e){switch(t){case"HEX":return function(t){return function(t,_,r,n){var e,o,i="",a=_/8,s=-1===r?3:0;for(e=0;e<a;e+=1)o=t[e>>>2]>>>8*(s+r*(e%4)),i+="0123456789abcdef".charAt(o>>>4&15)+"0123456789abcdef".charAt(15&o);return n.outputUpper?i.toUpperCase():i}(t,r,n,e)};case"B64":return function(t){return function(t,r,n,e){var o,i,a,s,c,d="",p=r/8,u=-1===n?3:0;for(o=0;o<p;o+=3)for(s=o+1<p?t[o+1>>>2]:0,c=o+2<p?t[o+2>>>2]:0,a=(t[o>>>2]>>>8*(u+n*(o%4))&255)<<16|(s>>>8*(u+n*((o+1)%4))&255)<<8|c>>>8*(u+n*((o+2)%4))&255,i=0;i<4;i+=1)d+=8*o+6*i<=r?_.charAt(a>>>6*(3-i)&63):e.b64Pad;return d}(t,r,n,e)};case"BYTES":return function(t){return function(t,_,r){var n,e,o="",i=_/8,a=-1===r?3:0;for(n=0;n<i;n+=1)e=t[n>>>2]>>>8*(a+r*(n%4))&255,o+=String.fromCharCode(e);return o}(t,r,n)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t){return function(t,_,r){var n,e=_/8,o=new ArrayBuffer(e),i=new Uint8Array(o),a=-1===r?3:0;for(n=0;n<e;n+=1)i[n]=t[n>>>2]>>>8*(a+r*(n%4))&255;return o}(t,r,n)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t){return function(t,_,r){var n,e=_/8,o=-1===r?3:0,i=new Uint8Array(e);for(n=0;n<e;n+=1)i[n]=t[n>>>2]>>>8*(o+r*(n%4))&255;return i}(t,r,n)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}var o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],i=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],a=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function s(t){var _={outputUpper:!1,b64Pad:"=",outputLen:-1},r=t||{},n="Output length must be a multiple of 8";if(_.outputUpper=r.outputUpper||!1,r.b64Pad&&(_.b64Pad=r.b64Pad),r.outputLen){if(r.outputLen%8!=0)throw new Error(n);_.outputLen=r.outputLen}else if(r.shakeLen){if(r.shakeLen%8!=0)throw new Error(n);_.outputLen=r.shakeLen}if("boolean"!=typeof _.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof _.b64Pad)throw new Error("Invalid b64Pad formatting option");return _}function c(t,_){return t>>>_|t<<32-_}function d(t,_){return t>>>_}function p(t,_,r){return t&_^~t&r}function u(t,_,r){return t&_^t&r^_&r}function l(t){return c(t,2)^c(t,13)^c(t,22)}function w(t,_){var r=(65535&t)+(65535&_);return(65535&(t>>>16)+(_>>>16)+(r>>>16))<<16|65535&r}function f(t,_,r,n){var e=(65535&t)+(65535&_)+(65535&r)+(65535&n);return(65535&(t>>>16)+(_>>>16)+(r>>>16)+(n>>>16)+(e>>>16))<<16|65535&e}function h(t,_,r,n,e){var o=(65535&t)+(65535&_)+(65535&r)+(65535&n)+(65535&e);return(65535&(t>>>16)+(_>>>16)+(r>>>16)+(n>>>16)+(e>>>16)+(o>>>16))<<16|65535&o}function b(t){return c(t,7)^c(t,18)^d(t,3)}function g(t){return c(t,6)^c(t,11)^c(t,25)}function y(t){return"SHA-224"==t?i.slice():a.slice()}function m(t,_){var r,n,e,i,a,s,y,m,v,k,x,j,A=[];for(r=_[0],n=_[1],e=_[2],i=_[3],a=_[4],s=_[5],y=_[6],m=_[7],x=0;x<64;x+=1)A[x]=x<16?t[x]:f(c(j=A[x-2],17)^c(j,19)^d(j,10),A[x-7],b(A[x-15]),A[x-16]),v=h(m,g(a),p(a,s,y),o[x],A[x]),k=w(l(r),u(r,n,e)),m=y,y=s,s=a,a=w(i,v),i=e,e=n,n=r,r=w(v,k);return _[0]=w(r,_[0]),_[1]=w(n,_[1]),_[2]=w(e,_[2]),_[3]=w(i,_[3]),_[4]=w(a,_[4]),_[5]=w(s,_[5]),_[6]=w(y,_[6]),_[7]=w(m,_[7]),_}return function(_){function r(t,r,e){var o=this;if("SHA-224"!==t&&"SHA-256"!==t)throw new Error("Chosen SHA variant is not supported");var i=e||{};return(o=_.call(this,t,r,e)||this).t=o.i,o.o=!0,o.u=-1,o.s=n(o.h,o.v,o.u),o.A=m,o.p=function(t){return t.slice()},o.l=y,o.R=function(_,r,n,e){return function(t,_,r,n,e){for(var o,i=15+(_+65>>>9<<4),a=_+r;t.length<=i;)t.push(0);for(t[_>>>5]|=128<<24-_%32,t[i]=4294967295&a,t[i-1]=a/4294967296|0,o=0;o<t.length;o+=16)n=m(t.slice(o,o+16),n);return"SHA-224"===e?[n[0],n[1],n[2],n[3],n[4],n[5],n[6]]:n}(_,r,n,e,t)},o.U=y(t),o.T=512,o.m="SHA-224"===t?224:256,o.F=!1,i.hmacKey&&o.B(function(t,_,r,e){var o="hmacKey must include a value and format";if(!_)throw new Error(o);if(void 0===_.value||!_.format)throw new Error(o);return n(_.format,_.encoding||"UTF8",r)(_.value)}(0,i.hmacKey,o.u)),o}return function(_,r){function n(){this.constructor=_}t(_,r),_.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}(r,_),r}(function(){function t(t,_,r){var n=r||{};if(this.h=_,this.v=n.encoding||"UTF8",this.numRounds=n.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.g=t,this.Y=[],this.H=0,this.S=!1,this.I=0,this.C=!1,this.L=[],this.N=[]}return t.prototype.update=function(t){var _,r=0,n=this.T>>>5,e=this.s(t,this.Y,this.H),o=e.binLen,i=e.value,a=o>>>5;for(_=0;_<a;_+=n)r+this.T<=o&&(this.U=this.A(i.slice(_,_+n),this.U),r+=this.T);this.I+=r,this.Y=i.slice(r>>>5),this.H=o%this.T,this.S=!0},t.prototype.getHash=function(t,_){var r,n,o=this.m,i=s(_);if(this.F){if(-1===i.outputLen)throw new Error("Output length must be specified in options");o=i.outputLen}var a=e(t,o,this.u,i);if(this.C&&this.t)return a(this.t(i));for(n=this.R(this.Y.slice(),this.H,this.I,this.p(this.U),o),r=1;r<this.numRounds;r+=1)this.F&&o%32!=0&&(n[n.length-1]&=16777215>>>24-o%32),n=this.R(n,o,0,this.l(this.g),o);return a(n)},t.prototype.setHMACKey=function(t,_,r){if(!this.o)throw new Error("Variant does not support HMAC");if(this.S)throw new Error("Cannot set MAC key after calling update");var e=n(_,(r||{}).encoding||"UTF8",this.u);this.B(e(t))},t.prototype.B=function(t){var _,r=this.T>>>3,n=r/4-1;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.C)throw new Error("MAC key already set");for(r<t.binLen/8&&(t.value=this.R(t.value,t.binLen,0,this.l(this.g),this.m));t.value.length<=n;)t.value.push(0);for(_=0;_<=n;_+=1)this.L[_]=909522486^t.value[_],this.N[_]=1549556828^t.value[_];this.U=this.A(this.L,this.U),this.I=this.T,this.C=!0},t.prototype.getHMAC=function(t,_){var r=s(_);return e(t,this.m,this.u,r)(this.i())},t.prototype.i=function(){var t;if(!this.C)throw new Error("Cannot call getHMAC without first setting MAC key");var _=this.R(this.Y.slice(),this.H,this.I,this.p(this.U),this.m);return t=this.A(this.N,this.l(this.g)),this.R(_,this.m,this.T,t,this.m)},t}())}()},6967:function(t){t.exports=function(){"use strict";var t=function(_,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,_){t.__proto__=_}||function(t,_){for(var r in _)Object.prototype.hasOwnProperty.call(_,r)&&(t[r]=_[r])})(_,r)},_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function r(t,_,r,n){var e,o,i,a=_||[0],s=(r=r||0)>>>3,c=-1===n?3:0;for(e=0;e<t.length;e+=1)o=(i=e+s)>>>2,a.length<=o&&a.push(0),a[o]|=t[e]<<8*(c+n*(i%4));return{value:a,binLen:8*t.length+r}}function n(t,n,e){switch(n){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(t){case"HEX":return function(t,_,r){return function(t,_,r,n){var e,o,i,a;if(0!=t.length%2)throw new Error("String of HEX type must be in byte increments");var s=_||[0],c=(r=r||0)>>>3,d=-1===n?3:0;for(e=0;e<t.length;e+=2){if(o=parseInt(t.substr(e,2),16),isNaN(o))throw new Error("String of HEX type contains invalid characters");for(i=(a=(e>>>1)+c)>>>2;s.length<=i;)s.push(0);s[i]|=o<<8*(d+n*(a%4))}return{value:s,binLen:4*t.length+r}}(t,_,r,e)};case"TEXT":return function(t,_,r){return function(t,_,r,n,e){var o,i,a,s,c,d,p,u,l=0,w=r||[0],f=(n=n||0)>>>3;if("UTF8"===_)for(p=-1===e?3:0,a=0;a<t.length;a+=1)for(i=[],128>(o=t.charCodeAt(a))?i.push(o):2048>o?(i.push(192|o>>>6),i.push(128|63&o)):55296>o||57344<=o?i.push(224|o>>>12,128|o>>>6&63,128|63&o):(a+=1,o=65536+((1023&o)<<10|1023&t.charCodeAt(a)),i.push(240|o>>>18,128|o>>>12&63,128|o>>>6&63,128|63&o)),s=0;s<i.length;s+=1){for(c=(d=l+f)>>>2;w.length<=c;)w.push(0);w[c]|=i[s]<<8*(p+e*(d%4)),l+=1}else for(p=-1===e?2:0,u="UTF16LE"===_&&1!==e||"UTF16LE"!==_&&1===e,a=0;a<t.length;a+=1){for(o=t.charCodeAt(a),!0===u&&(o=(s=255&o)<<8|o>>>8),c=(d=l+f)>>>2;w.length<=c;)w.push(0);w[c]|=o<<8*(p+e*(d%4)),l+=2}return{value:w,binLen:8*l+n}}(t,n,_,r,e)};case"B64":return function(t,r,n){return function(t,r,n,e){var o,i,a,s,c,d,p=0,u=r||[0],l=(n=n||0)>>>3,w=-1===e?3:0,f=t.indexOf("=");if(-1===t.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(t=t.replace(/=/g,""),-1!==f&&f<t.length)throw new Error("Invalid '=' found in base-64 string");for(o=0;o<t.length;o+=4){for(s=t.substr(o,4),a=0,i=0;i<s.length;i+=1)a|=_.indexOf(s.charAt(i))<<18-6*i;for(i=0;i<s.length-1;i+=1){for(c=(d=p+l)>>>2;u.length<=c;)u.push(0);u[c]|=(a>>>16-8*i&255)<<8*(w+e*(d%4)),p+=1}}return{value:u,binLen:8*p+n}}(t,r,n,e)};case"BYTES":return function(t,_,r){return function(t,_,r,n){var e,o,i,a,s=_||[0],c=(r=r||0)>>>3,d=-1===n?3:0;for(o=0;o<t.length;o+=1)e=t.charCodeAt(o),i=(a=o+c)>>>2,s.length<=i&&s.push(0),s[i]|=e<<8*(d+n*(a%4));return{value:s,binLen:8*t.length+r}}(t,_,r,e)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t,_,n){return function(t,_,n,e){return r(new Uint8Array(t),_,n,e)}(t,_,n,e)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t,_,n){return r(t,_,n,e)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function e(t,r,n,e){switch(t){case"HEX":return function(t){return function(t,_,r,n){var e,o,i="",a=_/8,s=-1===r?3:0;for(e=0;e<a;e+=1)o=t[e>>>2]>>>8*(s+r*(e%4)),i+="0123456789abcdef".charAt(o>>>4&15)+"0123456789abcdef".charAt(15&o);return n.outputUpper?i.toUpperCase():i}(t,r,n,e)};case"B64":return function(t){return function(t,r,n,e){var o,i,a,s,c,d="",p=r/8,u=-1===n?3:0;for(o=0;o<p;o+=3)for(s=o+1<p?t[o+1>>>2]:0,c=o+2<p?t[o+2>>>2]:0,a=(t[o>>>2]>>>8*(u+n*(o%4))&255)<<16|(s>>>8*(u+n*((o+1)%4))&255)<<8|c>>>8*(u+n*((o+2)%4))&255,i=0;i<4;i+=1)d+=8*o+6*i<=r?_.charAt(a>>>6*(3-i)&63):e.b64Pad;return d}(t,r,n,e)};case"BYTES":return function(t){return function(t,_,r){var n,e,o="",i=_/8,a=-1===r?3:0;for(n=0;n<i;n+=1)e=t[n>>>2]>>>8*(a+r*(n%4))&255,o+=String.fromCharCode(e);return o}(t,r,n)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t){return function(t,_,r){var n,e=_/8,o=new ArrayBuffer(e),i=new Uint8Array(o),a=-1===r?3:0;for(n=0;n<e;n+=1)i[n]=t[n>>>2]>>>8*(a+r*(n%4))&255;return o}(t,r,n)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t){return function(t,_,r){var n,e=_/8,o=-1===r?3:0,i=new Uint8Array(e);for(n=0;n<e;n+=1)i[n]=t[n>>>2]>>>8*(o+r*(n%4))&255;return i}(t,r,n)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function o(t,_){var r,n,e=t.binLen>>>3,o=_.binLen>>>3,i=e<<3,a=4-e<<3;if(e%4!=0){for(r=0;r<o;r+=4)n=e+r>>>2,t.value[n]|=_.value[r>>>2]<<i,t.value.push(0),t.value[n+1]|=_.value[r>>>2]>>>a;return(t.value.length<<2)-4>=o+e&&t.value.pop(),{value:t.value,binLen:t.binLen+_.binLen}}return{value:t.value.concat(_.value),binLen:t.binLen+_.binLen}}function i(t){var _={outputUpper:!1,b64Pad:"=",outputLen:-1},r=t||{},n="Output length must be a multiple of 8";if(_.outputUpper=r.outputUpper||!1,r.b64Pad&&(_.b64Pad=r.b64Pad),r.outputLen){if(r.outputLen%8!=0)throw new Error(n);_.outputLen=r.outputLen}else if(r.shakeLen){if(r.shakeLen%8!=0)throw new Error(n);_.outputLen=r.shakeLen}if("boolean"!=typeof _.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof _.b64Pad)throw new Error("Invalid b64Pad formatting option");return _}function a(t,_,r,e){var o=t+" must include a value and format";if(!_){if(!e)throw new Error(o);return e}if(void 0===_.value||!_.format)throw new Error(o);return n(_.format,_.encoding||"UTF8",r)(_.value)}var s=function(){function t(t,_,r){var n=r||{};if(this.t=_,this.i=n.encoding||"UTF8",this.numRounds=n.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.o=t,this.s=[],this.u=0,this.h=!1,this.v=0,this.l=!1,this.A=[],this.p=[]}return t.prototype.update=function(t){var _,r=0,n=this.m>>>5,e=this.R(t,this.s,this.u),o=e.binLen,i=e.value,a=o>>>5;for(_=0;_<a;_+=n)r+this.m<=o&&(this.U=this.T(i.slice(_,_+n),this.U),r+=this.m);this.v+=r,this.s=i.slice(r>>>5),this.u=o%this.m,this.h=!0},t.prototype.getHash=function(t,_){var r,n,o=this.F,a=i(_);if(this.C){if(-1===a.outputLen)throw new Error("Output length must be specified in options");o=a.outputLen}var s=e(t,o,this.H,a);if(this.l&&this.B)return s(this.B(a));for(n=this.L(this.s.slice(),this.u,this.v,this.S(this.U),o),r=1;r<this.numRounds;r+=1)this.C&&o%32!=0&&(n[n.length-1]&=16777215>>>24-o%32),n=this.L(n,o,0,this.g(this.o),o);return s(n)},t.prototype.setHMACKey=function(t,_,r){if(!this.k)throw new Error("Variant does not support HMAC");if(this.h)throw new Error("Cannot set MAC key after calling update");var e=n(_,(r||{}).encoding||"UTF8",this.H);this.Y(e(t))},t.prototype.Y=function(t){var _,r=this.m>>>3,n=r/4-1;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.l)throw new Error("MAC key already set");for(r<t.binLen/8&&(t.value=this.L(t.value,t.binLen,0,this.g(this.o),this.F));t.value.length<=n;)t.value.push(0);for(_=0;_<=n;_+=1)this.A[_]=909522486^t.value[_],this.p[_]=1549556828^t.value[_];this.U=this.T(this.A,this.U),this.v=this.m,this.l=!0},t.prototype.getHMAC=function(t,_){var r=i(_);return e(t,this.F,this.H,r)(this.N())},t.prototype.N=function(){var t;if(!this.l)throw new Error("Cannot call getHMAC without first setting MAC key");var _=this.L(this.s.slice(),this.u,this.v,this.S(this.U),this.F);return t=this.T(this.p,this.g(this.o)),this.L(_,this.F,this.m,t,this.F)},t}(),c=function(t,_){this.I=t,this.K=_};function d(t,_){var r;return _>32?(r=64-_,new c(t.K<<_|t.I>>>r,t.I<<_|t.K>>>r)):0!==_?(r=32-_,new c(t.I<<_|t.K>>>r,t.K<<_|t.I>>>r)):t}function p(t,_){return new c(t.I^_.I,t.K^_.K)}var u=[new c(0,1),new c(0,32898),new c(2147483648,32906),new c(2147483648,2147516416),new c(0,32907),new c(0,2147483649),new c(2147483648,2147516545),new c(2147483648,32777),new c(0,138),new c(0,136),new c(0,2147516425),new c(0,2147483658),new c(0,2147516555),new c(2147483648,139),new c(2147483648,32905),new c(2147483648,32771),new c(2147483648,32770),new c(2147483648,128),new c(0,32778),new c(2147483648,2147483658),new c(2147483648,2147516545),new c(2147483648,32896),new c(0,2147483649),new c(2147483648,2147516424)],l=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];function w(t){var _,r=[];for(_=0;_<5;_+=1)r[_]=[new c(0,0),new c(0,0),new c(0,0),new c(0,0),new c(0,0)];return r}function f(t){var _,r=[];for(_=0;_<5;_+=1)r[_]=t[_].slice();return r}function h(t,_){var r,n,e,o,i,a,s,f,h,b=[],g=[];if(null!==t)for(n=0;n<t.length;n+=2)_[(n>>>1)%5][(n>>>1)/5|0]=p(_[(n>>>1)%5][(n>>>1)/5|0],new c(t[n+1],t[n]));for(r=0;r<24;r+=1){for(o=w(),n=0;n<5;n+=1)b[n]=(i=_[n][0],a=_[n][1],s=_[n][2],f=_[n][3],h=_[n][4],new c(i.I^a.I^s.I^f.I^h.I,i.K^a.K^s.K^f.K^h.K));for(n=0;n<5;n+=1)g[n]=p(b[(n+4)%5],d(b[(n+1)%5],1));for(n=0;n<5;n+=1)for(e=0;e<5;e+=1)_[n][e]=p(_[n][e],g[n]);for(n=0;n<5;n+=1)for(e=0;e<5;e+=1)o[e][(2*n+3*e)%5]=d(_[n][e],l[n][e]);for(n=0;n<5;n+=1)for(e=0;e<5;e+=1)_[n][e]=p(o[n][e],new c(~o[(n+1)%5][e].I&o[(n+2)%5][e].I,~o[(n+1)%5][e].K&o[(n+2)%5][e].K));_[0][0]=p(_[0][0],u[r])}return _}function b(t){var _,r,n=0,e=[0,0],o=[4294967295&t,t/4294967296&2097151];for(_=6;_>=0;_--)0==(r=o[_>>2]>>>8*_&255)&&0===n||(e[n+1>>2]|=r<<8*(n+1),n+=1);return n=0!==n?n:1,e[0]|=n,{value:n+1>4?e:[e[0]],binLen:8+8*n}}function g(t){return o(b(t.binLen),t)}function y(t,_){var r,n=b(_),e=_>>>2,i=(e-(n=o(n,t)).value.length%e)%e;for(r=0;r<i;r++)n.value.push(0);return n.value}return function(_){function r(t,r,e){var o=this,i=6,s=0,c=e||{};if(1!==(o=_.call(this,t,r,e)||this).numRounds){if(c.kmacKey||c.hmacKey)throw new Error("Cannot set numRounds with MAC");if("CSHAKE128"===o.o||"CSHAKE256"===o.o)throw new Error("Cannot set numRounds for CSHAKE variants")}switch(o.H=1,o.R=n(o.t,o.i,o.H),o.T=h,o.S=f,o.g=w,o.U=w(),o.C=!1,t){case"SHA3-224":o.m=s=1152,o.F=224,o.k=!0,o.B=o.N;break;case"SHA3-256":o.m=s=1088,o.F=256,o.k=!0,o.B=o.N;break;case"SHA3-384":o.m=s=832,o.F=384,o.k=!0,o.B=o.N;break;case"SHA3-512":o.m=s=576,o.F=512,o.k=!0,o.B=o.N;break;case"SHAKE128":i=31,o.m=s=1344,o.F=-1,o.C=!0,o.k=!1,o.B=null;break;case"SHAKE256":i=31,o.m=s=1088,o.F=-1,o.C=!0,o.k=!1,o.B=null;break;case"KMAC128":i=4,o.m=s=1344,o.M(e),o.F=-1,o.C=!0,o.k=!1,o.B=o.X;break;case"KMAC256":i=4,o.m=s=1088,o.M(e),o.F=-1,o.C=!0,o.k=!1,o.B=o.X;break;case"CSHAKE128":o.m=s=1344,i=o.O(e),o.F=-1,o.C=!0,o.k=!1,o.B=null;break;case"CSHAKE256":o.m=s=1088,i=o.O(e),o.F=-1,o.C=!0,o.k=!1,o.B=null;break;default:throw new Error("Chosen SHA variant is not supported")}return o.L=function(t,_,r,n,e){return function(t,_,r,n,e,o,i){var a,s,c=0,d=[],p=e>>>5,u=_>>>5;for(a=0;a<u&&_>=e;a+=p)n=h(t.slice(a,a+p),n),_-=e;for(t=t.slice(a),_%=e;t.length<p;)t.push(0);for(t[(a=_>>>3)>>2]^=o<<a%4*8,t[p-1]^=2147483648,n=h(t,n);32*d.length<i&&(s=n[c%5][c/5|0],d.push(s.K),!(32*d.length>=i));)d.push(s.I),0==64*(c+=1)%e&&(h(null,n),c=0);return d}(t,_,0,n,s,i,e)},c.hmacKey&&o.Y(a("hmacKey",c.hmacKey,o.H)),o}return function(_,r){function n(){this.constructor=_}t(_,r),_.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}(r,_),r.prototype.O=function(t,_){var r=function(t){var _=t||{};return{funcName:a("funcName",_.funcName,1,{value:[],binLen:0}),customization:a("Customization",_.customization,1,{value:[],binLen:0})}}(t||{});_&&(r.funcName=_);var n=o(g(r.funcName),g(r.customization));if(0!==r.customization.binLen||0!==r.funcName.binLen){for(var e=y(n,this.m>>>3),i=0;i<e.length;i+=this.m>>>5)this.U=this.T(e.slice(i,i+(this.m>>>5)),this.U),this.v+=this.m;return 4}return 31},r.prototype.M=function(t){var _=function(t){var _=t||{};return{kmacKey:a("kmacKey",_.kmacKey,1),funcName:{value:[1128353099],binLen:32},customization:a("Customization",_.customization,1,{value:[],binLen:0})}}(t||{});this.O(t,_.funcName);for(var r=y(g(_.kmacKey),this.m>>>3),n=0;n<r.length;n+=this.m>>>5)this.U=this.T(r.slice(n,n+(this.m>>>5)),this.U),this.v+=this.m;this.l=!0},r.prototype.X=function(t){var _=o({value:this.s.slice(),binLen:this.u},function(t){var _,r,n=0,e=[0,0],o=[4294967295&t,t/4294967296&2097151];for(_=6;_>=0;_--)0==(r=o[_>>2]>>>8*_&255)&&0===n||(e[n>>2]|=r<<8*n,n+=1);return e[(n=0!==n?n:1)>>2]|=n<<8*n,{value:n+1>4?e:[e[0]],binLen:8+8*n}}(t.outputLen));return this.L(_.value,_.binLen,this.v,this.S(this.U),t.outputLen)},r}(s)}()},2587:function(t){"use strict";function _(t,_){return Object.prototype.hasOwnProperty.call(t,_)}t.exports=function(t,r,n,e){r=r||"&",n=n||"=";var o={};if("string"!=typeof t||0===t.length)return o;var i=/\+/g;t=t.split(r);var a=1e3;e&&"number"==typeof e.maxKeys&&(a=e.maxKeys);var s=t.length;a>0&&s>a&&(s=a);for(var c=0;c<s;++c){var d,p,u,l,w=t[c].replace(i,"%20"),f=w.indexOf(n);f>=0?(d=w.substr(0,f),p=w.substr(f+1)):(d=w,p=""),u=decodeURIComponent(d),l=decodeURIComponent(p),_(o,u)?Array.isArray(o[u])?o[u].push(l):o[u]=[o[u],l]:o[u]=l}return o}},2361:function(t){"use strict";var _=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,r,n,e){return r=r||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(e){var o=encodeURIComponent(_(e))+n;return Array.isArray(t[e])?t[e].map((function(t){return o+encodeURIComponent(_(t))})).join(r):o+encodeURIComponent(_(t[e]))})).join(r):e?encodeURIComponent(_(e))+n+encodeURIComponent(_(t)):""}},7673:function(t,_,r){"use strict";_.decode=_.parse=r(2587),_.encode=_.stringify=r(2361)},5080:function(t,_,r){"use strict";r.d(_,{OK:function(){return E},td:function(){return k},x4:function(){return C},mQ:function(){return m}});var n=r(7294);function e(t){return _=>!!_.type&&_.type.tabsRole===t}const o=e("Tab"),i=e("TabList"),a=e("TabPanel");function s(t,_){return n.Children.map(t,(t=>null===t?null:function(t){return o(t)||i(t)||a(t)}(t)?_(t):t.props&&t.props.children&&"object"==typeof t.props.children?(0,n.cloneElement)(t,{...t.props,children:s(t.props.children,_)}):t))}function c(t,_){return n.Children.forEach(t,(t=>{null!==t&&(o(t)||a(t)?_(t):t.props&&t.props.children&&"object"==typeof t.props.children&&(i(t)&&_(t),c(t.props.children,_)))}))}function d(t){var _,r,n="";if("string"==typeof t||"number"==typeof t)n+=t;else if("object"==typeof t)if(Array.isArray(t))for(_=0;_<t.length;_++)t[_]&&(r=d(t[_]))&&(n&&(n+=" "),n+=r);else for(_ in t)t[_]&&(n&&(n+=" "),n+=_);return n}var p=function(){for(var t,_,r=0,n="";r<arguments.length;)(t=arguments[r++])&&(_=d(t))&&(n&&(n+=" "),n+=_);return n};function u(t){let _=0;return c(t,(t=>{o(t)&&_++})),_}function l(t){return t&&"getAttribute"in t}function w(t){return l(t)&&t.getAttribute("data-rttab")}function f(t){return l(t)&&"true"===t.getAttribute("aria-disabled")}let h;const b=t=>{let _=(0,n.useRef)([]),r=(0,n.useRef)([]);const e=(0,n.useRef)();function c(_,r){if(_<0||_>=b())return;const{onSelect:n,selectedIndex:e}=t;n(_,e,r)}function d(t){const _=b();for(let r=t+1;r<_;r++)if(!f(g(r)))return r;for(let _=0;_<t;_++)if(!f(g(_)))return _;return t}function l(t){let _=t;for(;_--;)if(!f(g(_)))return _;for(_=b();_-- >t;)if(!f(g(_)))return _;return t}function b(){const{children:_}=t;return u(_)}function g(t){return _.current[`tabs-${t}`]}function y(t){let _=t.target;do{if(m(_)){if(f(_))return;return void c([].slice.call(_.parentNode.children).filter(w).indexOf(_),t)}}while(null!=(_=_.parentNode))}function m(t){if(!w(t))return!1;let _=t.parentElement;do{if(_===e.current)return!0;if(_.getAttribute("data-rttabs"))break;_=_.parentElement}while(_);return!1}const{children:v,className:k,disabledTabClassName:x,domRef:j,focus:A,forceRenderTabPanel:E,onSelect:O,selectedIndex:S,selectedTabClassName:B,selectedTabPanelClassName:C,environment:R,disableUpDownKeys:I,disableLeftRightKeys:U,...T}=t;return n.createElement("div",Object.assign({},T,{className:p(k),onClick:y,onKeyDown:function(_){const{direction:r,disableUpDownKeys:n,disableLeftRightKeys:e}=t;if(m(_.target)){let{selectedIndex:o}=t,i=!1,a=!1;"Space"!==_.code&&32!==_.keyCode&&"Enter"!==_.code&&13!==_.keyCode||(i=!0,a=!1,y(_)),(e||37!==_.keyCode&&"ArrowLeft"!==_.code)&&(n||38!==_.keyCode&&"ArrowUp"!==_.code)?(e||39!==_.keyCode&&"ArrowRight"!==_.code)&&(n||40!==_.keyCode&&"ArrowDown"!==_.code)?35===_.keyCode||"End"===_.code?(o=function(){let t=b();for(;t--;)if(!f(g(t)))return t;return null}(),i=!0,a=!0):36!==_.keyCode&&"Home"!==_.code||(o=function(){const t=b();for(let _=0;_<t;_++)if(!f(g(_)))return _;return null}(),i=!0,a=!0):(o="rtl"===r?l(o):d(o),i=!0,a=!0):(o="rtl"===r?d(o):l(o),i=!0,a=!0),i&&_.preventDefault(),a&&c(o,_)}},ref:t=>{e.current=t,j&&j(t)},"data-rttabs":!0}),function(){let e=0;const{children:c,disabledTabClassName:d,focus:p,forceRenderTabPanel:u,selectedIndex:l,selectedTabClassName:w,selectedTabPanelClassName:f,environment:y}=t;r.current=r.current||[];let m=r.current.length-b();const v=(0,n.useId)();for(;m++<0;)r.current.push(`${v}${r.current.length}`);return s(c,(t=>{let c=t;if(i(t)){let e=0,i=!1;null==h&&function(t){const _=t||("undefined"!=typeof window?window:void 0);try{h=!(void 0===_||!_.document||!_.document.activeElement)}catch(t){h=!1}}(y);const a=y||("undefined"!=typeof window?window:void 0);h&&a&&(i=n.Children.toArray(t.props.children).filter(o).some(((t,_)=>a.document.activeElement===g(_)))),c=(0,n.cloneElement)(t,{children:s(t.props.children,(t=>{const o=`tabs-${e}`,a=l===e,s={tabRef:t=>{_.current[o]=t},id:r.current[e],selected:a,focus:a&&(p||i)};return w&&(s.selectedClassName=w),d&&(s.disabledClassName=d),e++,(0,n.cloneElement)(t,s)}))})}else if(a(t)){const _={id:r.current[e],selected:l===e};u&&(_.forceRender=u),f&&(_.selectedClassName=f),e++,c=(0,n.cloneElement)(t,_)}return c}))}())};b.defaultProps={className:"react-tabs",focus:!1},b.propTypes={};var g=b;const y=t=>{const{children:_,defaultFocus:r,defaultIndex:e,focusTabOnClick:o,onSelect:i}=t,[a,s]=(0,n.useState)(r),[c]=(0,n.useState)((t=>null===t.selectedIndex?1:0)(t)),[d,p]=(0,n.useState)(1===c?e||0:null);if((0,n.useEffect)((()=>{s(!1)}),[]),1===c){const t=u(_);(0,n.useEffect)((()=>{if(null!=d){const _=Math.max(0,t-1);p(Math.min(d,_))}}),[t])}let l={...t};return l.focus=a,l.onSelect=(t,_,r)=>{"function"==typeof i&&!1===i(t,_,r)||(o&&s(!0),1===c&&p(t))},null!=d&&(l.selectedIndex=d),delete l.defaultFocus,delete l.defaultIndex,delete l.focusTabOnClick,n.createElement(g,l,_)};y.propTypes={},y.defaultProps={defaultFocus:!1,focusTabOnClick:!0,forceRenderTabPanel:!1,selectedIndex:null,defaultIndex:null,environment:null,disableUpDownKeys:!1,disableLeftRightKeys:!1},y.tabsRole="Tabs";var m=y;const v=t=>{const{children:_,className:r,...e}=t;return n.createElement("ul",Object.assign({},e,{className:p(r),role:"tablist"}),_)};v.tabsRole="TabList",v.propTypes={},v.defaultProps={className:"react-tabs__tab-list"};var k=v;const x="react-tabs__tab",j={className:x,disabledClassName:`${x}--disabled`,focus:!1,id:null,selected:!1,selectedClassName:`${x}--selected`},A=t=>{let _=(0,n.useRef)();const{children:r,className:e,disabled:o,disabledClassName:i,focus:a,id:s,selected:c,selectedClassName:d,tabIndex:u,tabRef:l,...w}=t;return(0,n.useEffect)((()=>{c&&a&&_.current.focus()}),[c,a]),n.createElement("li",Object.assign({},w,{className:p(e,{[d]:c,[i]:o}),ref:t=>{_.current=t,l&&l(t)},role:"tab",id:`tab${s}`,"aria-selected":c?"true":"false","aria-disabled":o?"true":"false","aria-controls":`panel${s}`,tabIndex:u||(c?"0":null),"data-rttab":!0}),r)};A.propTypes={},A.tabsRole="Tab",A.defaultProps=j;var E=A;const O="react-tabs__tab-panel",S={className:O,forceRender:!1,selectedClassName:`${O}--selected`},B=t=>{const{children:_,className:r,forceRender:e,id:o,selected:i,selectedClassName:a,...s}=t;return n.createElement("div",Object.assign({},s,{className:p(r,{[a]:i}),role:"tabpanel",id:`panel${o}`,"aria-labelledby":`tab${o}`}),e||i?_:null)};B.tabsRole="TabPanel",B.propTypes={},B.defaultProps=S;var C=B},2003:function(t,_,r){"use strict";r.r(_);var n=r(5108),e=function(t,_){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,_){t.__proto__=_}||function(t,_){for(var r in _)_.hasOwnProperty(r)&&(t[r]=_[r])},e(t,_)};function o(t,_){function r(){this.constructor=t}e(t,_),t.prototype=null===_?Object.create(_):(r.prototype=_.prototype,new r)}function i(t,_){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,e,o=r.call(t),i=[];try{for(;(void 0===_||_-- >0)&&!(n=o.next()).done;)i.push(n.value)}catch(t){e={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}return i}var a=function(t,_){this.target=_,this.type=t},s=function(t){function _(_,r){var n=t.call(this,"error",r)||this;return n.message=_.message,n.error=_,n}return o(_,t),_}(a),c=function(t){function _(_,r,n){void 0===_&&(_=1e3),void 0===r&&(r="");var e=t.call(this,"close",n)||this;return e.wasClean=!0,e.code=_,e.reason=r,e}return o(_,t),_}(a),d=function(){if("undefined"!=typeof WebSocket)return WebSocket},p={maxReconnectionDelay:1e4,minReconnectionDelay:1e3+4e3*Math.random(),minUptime:5e3,reconnectionDelayGrowFactor:1.3,connectionTimeout:4e3,maxRetries:1/0,maxEnqueuedMessages:1/0,startClosed:!1,debug:!1},u=function(){function t(t,_,r){var n=this;void 0===r&&(r={}),this._listeners={error:[],message:[],open:[],close:[]},this._retryCount=-1,this._shouldReconnect=!0,this._connectLock=!1,this._binaryType="blob",this._closeCalled=!1,this._messageQueue=[],this.onclose=null,this.onerror=null,this.onmessage=null,this.onopen=null,this._handleOpen=function(t){n._debug("open event");var _=n._options.minUptime,r=void 0===_?p.minUptime:_;clearTimeout(n._connectTimeout),n._uptimeTimeout=setTimeout((function(){return n._acceptOpen()}),r),n._ws.binaryType=n._binaryType,n._messageQueue.forEach((function(t){return n._ws.send(t)})),n._messageQueue=[],n.onopen&&n.onopen(t),n._listeners.open.forEach((function(_){return n._callEventListener(t,_)}))},this._handleMessage=function(t){n._debug("message event"),n.onmessage&&n.onmessage(t),n._listeners.message.forEach((function(_){return n._callEventListener(t,_)}))},this._handleError=function(t){n._debug("error event",t.message),n._disconnect(void 0,"TIMEOUT"===t.message?"timeout":void 0),n.onerror&&n.onerror(t),n._debug("exec error listeners"),n._listeners.error.forEach((function(_){return n._callEventListener(t,_)})),n._connect()},this._handleClose=function(t){n._debug("close event"),n._clearTimeouts(),n._shouldReconnect&&n._connect(),n.onclose&&n.onclose(t),n._listeners.close.forEach((function(_){return n._callEventListener(t,_)}))},this._url=t,this._protocols=_,this._options=r,this._options.startClosed&&(this._shouldReconnect=!1),this._connect()}return Object.defineProperty(t,"CONNECTING",{get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(t,"OPEN",{get:function(){return 1},enumerable:!0,configurable:!0}),Object.defineProperty(t,"CLOSING",{get:function(){return 2},enumerable:!0,configurable:!0}),Object.defineProperty(t,"CLOSED",{get:function(){return 3},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"CONNECTING",{get:function(){return t.CONNECTING},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"OPEN",{get:function(){return t.OPEN},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"CLOSING",{get:function(){return t.CLOSING},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"CLOSED",{get:function(){return t.CLOSED},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"binaryType",{get:function(){return this._ws?this._ws.binaryType:this._binaryType},set:function(t){this._binaryType=t,this._ws&&(this._ws.binaryType=t)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"retryCount",{get:function(){return Math.max(this._retryCount,0)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"bufferedAmount",{get:function(){return this._messageQueue.reduce((function(t,_){return"string"==typeof _?t+=_.length:_ instanceof Blob?t+=_.size:t+=_.byteLength,t}),0)+(this._ws?this._ws.bufferedAmount:0)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"extensions",{get:function(){return this._ws?this._ws.extensions:""},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"protocol",{get:function(){return this._ws?this._ws.protocol:""},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"readyState",{get:function(){return this._ws?this._ws.readyState:this._options.startClosed?t.CLOSED:t.CONNECTING},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"url",{get:function(){return this._ws?this._ws.url:""},enumerable:!0,configurable:!0}),t.prototype.close=function(t,_){void 0===t&&(t=1e3),this._closeCalled=!0,this._shouldReconnect=!1,this._clearTimeouts(),this._ws?this._ws.readyState!==this.CLOSED?this._ws.close(t,_):this._debug("close: already closed"):this._debug("close enqueued: no ws instance")},t.prototype.reconnect=function(t,_){this._shouldReconnect=!0,this._closeCalled=!1,this._retryCount=-1,this._ws&&this._ws.readyState!==this.CLOSED?(this._disconnect(t,_),this._connect()):this._connect()},t.prototype.send=function(t){if(this._ws&&this._ws.readyState===this.OPEN)this._debug("send",t),this._ws.send(t);else{var _=this._options.maxEnqueuedMessages,r=void 0===_?p.maxEnqueuedMessages:_;this._messageQueue.length<r&&(this._debug("enqueue",t),this._messageQueue.push(t))}},t.prototype.addEventListener=function(t,_){this._listeners[t]&&this._listeners[t].push(_)},t.prototype.dispatchEvent=function(t){var _,r,n=this._listeners[t.type];if(n)try{for(var e=function(t){var _="function"==typeof Symbol&&t[Symbol.iterator],r=0;return _?_.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}}(n),o=e.next();!o.done;o=e.next()){var i=o.value;this._callEventListener(t,i)}}catch(t){_={error:t}}finally{try{o&&!o.done&&(r=e.return)&&r.call(e)}finally{if(_)throw _.error}}return!0},t.prototype.removeEventListener=function(t,_){this._listeners[t]&&(this._listeners[t]=this._listeners[t].filter((function(t){return t!==_})))},t.prototype._debug=function(){for(var t=[],_=0;_<arguments.length;_++)t[_]=arguments[_];this._options.debug&&n.log.apply(n,function(){for(var t=[],_=0;_<arguments.length;_++)t=t.concat(i(arguments[_]));return t}(["RWS>"],t))},t.prototype._getNextDelay=function(){var t=this._options,_=t.reconnectionDelayGrowFactor,r=void 0===_?p.reconnectionDelayGrowFactor:_,n=t.minReconnectionDelay,e=void 0===n?p.minReconnectionDelay:n,o=t.maxReconnectionDelay,i=void 0===o?p.maxReconnectionDelay:o,a=0;return this._retryCount>0&&(a=e*Math.pow(r,this._retryCount-1))>i&&(a=i),this._debug("next delay",a),a},t.prototype._wait=function(){var t=this;return new Promise((function(_){setTimeout(_,t._getNextDelay())}))},t.prototype._getNextUrl=function(t){if("string"==typeof t)return Promise.resolve(t);if("function"==typeof t){var _=t();if("string"==typeof _)return Promise.resolve(_);if(_.then)return _}throw Error("Invalid URL")},t.prototype._connect=function(){var t=this;if(!this._connectLock&&this._shouldReconnect){this._connectLock=!0;var _=this._options,r=_.maxRetries,n=void 0===r?p.maxRetries:r,e=_.connectionTimeout,o=void 0===e?p.connectionTimeout:e,i=_.WebSocket,a=void 0===i?d():i;if(this._retryCount>=n)this._debug("max retries reached",this._retryCount,">=",n);else{if(this._retryCount++,this._debug("connect",this._retryCount),this._removeListeners(),void 0===(s=a)||!s||2!==s.CLOSING)throw Error("No valid WebSocket class provided");var s;this._wait().then((function(){return t._getNextUrl(t._url)})).then((function(_){t._closeCalled||(t._debug("connect",{url:_,protocols:t._protocols}),t._ws=t._protocols?new a(_,t._protocols):new a(_),t._ws.binaryType=t._binaryType,t._connectLock=!1,t._addListeners(),t._connectTimeout=setTimeout((function(){return t._handleTimeout()}),o))}))}}},t.prototype._handleTimeout=function(){this._debug("timeout event"),this._handleError(new s(Error("TIMEOUT"),this))},t.prototype._disconnect=function(t,_){if(void 0===t&&(t=1e3),this._clearTimeouts(),this._ws){this._removeListeners();try{this._ws.close(t,_),this._handleClose(new c(t,_,this))}catch(t){}}},t.prototype._acceptOpen=function(){this._debug("accept open"),this._retryCount=0},t.prototype._callEventListener=function(t,_){"handleEvent"in _?_.handleEvent(t):_(t)},t.prototype._removeListeners=function(){this._ws&&(this._debug("removeListeners"),this._ws.removeEventListener("open",this._handleOpen),this._ws.removeEventListener("close",this._handleClose),this._ws.removeEventListener("message",this._handleMessage),this._ws.removeEventListener("error",this._handleError))},t.prototype._addListeners=function(){this._ws&&(this._debug("addListeners"),this._ws.addEventListener("open",this._handleOpen),this._ws.addEventListener("close",this._handleClose),this._ws.addEventListener("message",this._handleMessage),this._ws.addEventListener("error",this._handleError))},t.prototype._clearTimeouts=function(){clearTimeout(this._connectTimeout),clearTimeout(this._uptimeTimeout)},t}();_.default=u},9335:function(t,_,r){"use strict";var n=r(3379),e=r.n(n),o=r(7795),i=r.n(o),a=r(569),s=r.n(a),c=r(3565),d=r.n(c),p=r(9216),u=r.n(p),l=r(4589),w=r.n(l),f=r(7263),h={};h.styleTagTransform=w(),h.setAttributes=d(),h.insert=s().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=u(),e()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals},6104:function(t,_,r){var n=r(4155),e=void 0!==n&&n.pid?n.pid.toString(36):"";function o(){var t=Date.now(),_=o.last||t;return o.last=t>_?t:_+1}t.exports=t.exports.default=function(t,_){return(t||"")+""+e+o().toString(36)+(_||"")},t.exports.process=function(t,_){return(t||"")+e+o().toString(36)+(_||"")},t.exports.time=function(t,_){return(t||"")+o().toString(36)+(_||"")}},2511:function(t,_,r){var n;t=r.nmd(t),function(e){_&&_.nodeType,t&&t.nodeType;var o="object"==typeof r.g&&r.g;o.global!==o&&o.window!==o&&o.self;var i,a=2147483647,s=36,c=26,d=38,p=700,u=/^xn--/,l=/[^\x20-\x7E]/,w=/[\x2E\u3002\uFF0E\uFF61]/g,f={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},h=s-1,b=Math.floor,g=String.fromCharCode;function y(t){throw RangeError(f[t])}function m(t,_){for(var r=t.length,n=[];r--;)n[r]=_(t[r]);return n}function v(t,_){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+m((t=t.replace(w,".")).split("."),_).join(".")}function k(t){for(var _,r,n=[],e=0,o=t.length;e<o;)(_=t.charCodeAt(e++))>=55296&&_<=56319&&e<o?56320==(64512&(r=t.charCodeAt(e++)))?n.push(((1023&_)<<10)+(1023&r)+65536):(n.push(_),e--):n.push(_);return n}function x(t){return m(t,(function(t){var _="";return t>65535&&(_+=g((t-=65536)>>>10&1023|55296),t=56320|1023&t),_+g(t)})).join("")}function j(t,_){return t+22+75*(t<26)-((0!=_)<<5)}function A(t,_,r){var n=0;for(t=r?b(t/p):t>>1,t+=b(t/_);t>h*c>>1;n+=s)t=b(t/h);return b(n+(h+1)*t/(t+d))}function E(t){var _,r,n,e,o,i,d,p,u,l,w,f=[],h=t.length,g=0,m=128,v=72;for((r=t.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&y("not-basic"),f.push(t.charCodeAt(n));for(e=r>0?r+1:0;e<h;){for(o=g,i=1,d=s;e>=h&&y("invalid-input"),((p=(w=t.charCodeAt(e++))-48<10?w-22:w-65<26?w-65:w-97<26?w-97:s)>=s||p>b((a-g)/i))&&y("overflow"),g+=p*i,!(p<(u=d<=v?1:d>=v+c?c:d-v));d+=s)i>b(a/(l=s-u))&&y("overflow"),i*=l;v=A(g-o,_=f.length+1,0==o),b(g/_)>a-m&&y("overflow"),m+=b(g/_),g%=_,f.splice(g++,0,m)}return x(f)}function O(t){var _,r,n,e,o,i,d,p,u,l,w,f,h,m,v,x=[];for(f=(t=k(t)).length,_=128,r=0,o=72,i=0;i<f;++i)(w=t[i])<128&&x.push(g(w));for(n=e=x.length,e&&x.push("-");n<f;){for(d=a,i=0;i<f;++i)(w=t[i])>=_&&w<d&&(d=w);for(d-_>b((a-r)/(h=n+1))&&y("overflow"),r+=(d-_)*h,_=d,i=0;i<f;++i)if((w=t[i])<_&&++r>a&&y("overflow"),w==_){for(p=r,u=s;!(p<(l=u<=o?1:u>=o+c?c:u-o));u+=s)v=p-l,m=s-l,x.push(g(j(l+v%m,0))),p=b(v/m);x.push(g(j(p,0))),o=A(r,h,n==e),r=0,++n}++r,++_}return x.join("")}i={version:"1.3.2",ucs2:{decode:k,encode:x},decode:E,encode:O,toASCII:function(t){return v(t,(function(t){return l.test(t)?"xn--"+O(t):t}))},toUnicode:function(t){return v(t,(function(t){return u.test(t)?E(t.slice(4).toLowerCase()):t}))}},void 0===(n=function(){return i}.call(_,r,_,t))||(t.exports=n)}()},8575:function(t,_,r){"use strict";var n=r(2511),e=r(2502);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}_.parse=y,_.resolve=function(t,_){return y(t,!1,!0).resolve(_)},_.resolveObject=function(t,_){return t?y(t,!1,!0).resolveObject(_):_},_.format=function(t){return e.isString(t)&&(t=y(t)),t instanceof o?t.format():o.prototype.format.call(t)},_.Url=o;var i=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,s=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),d=["'"].concat(c),p=["%","/","?",";","#"].concat(d),u=["/","?","#"],l=/^[+a-z0-9A-Z_-]{0,63}$/,w=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},h={javascript:!0,"javascript:":!0},b={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},g=r(7673);function y(t,_,r){if(t&&e.isObject(t)&&t instanceof o)return t;var n=new o;return n.parse(t,_,r),n}o.prototype.parse=function(t,_,r){if(!e.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var o=t.indexOf("?"),a=-1!==o&&o<t.indexOf("#")?"?":"#",c=t.split(a);c[0]=c[0].replace(/\\/g,"/");var y=t=c.join(a);if(y=y.trim(),!r&&1===t.split("#").length){var m=s.exec(y);if(m)return this.path=y,this.href=y,this.pathname=m[1],m[2]?(this.search=m[2],this.query=_?g.parse(this.search.substr(1)):this.search.substr(1)):_&&(this.search="",this.query={}),this}var v=i.exec(y);if(v){var k=(v=v[0]).toLowerCase();this.protocol=k,y=y.substr(v.length)}if(r||v||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var x="//"===y.substr(0,2);!x||v&&h[v]||(y=y.substr(2),this.slashes=!0)}if(!h[v]&&(x||v&&!b[v])){for(var j,A,E=-1,O=0;O<u.length;O++)-1!==(S=y.indexOf(u[O]))&&(-1===E||S<E)&&(E=S);for(-1!==(A=-1===E?y.lastIndexOf("@"):y.lastIndexOf("@",E))&&(j=y.slice(0,A),y=y.slice(A+1),this.auth=decodeURIComponent(j)),E=-1,O=0;O<p.length;O++){var S;-1!==(S=y.indexOf(p[O]))&&(-1===E||S<E)&&(E=S)}-1===E&&(E=y.length),this.host=y.slice(0,E),y=y.slice(E),this.parseHost(),this.hostname=this.hostname||"";var B="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!B)for(var C=this.hostname.split(/\./),R=(O=0,C.length);O<R;O++){var I=C[O];if(I&&!I.match(l)){for(var U="",T=0,N=I.length;T<N;T++)I.charCodeAt(T)>127?U+="x":U+=I[T];if(!U.match(l)){var L=C.slice(0,O),P=C.slice(O+1),M=I.match(w);M&&(L.push(M[1]),P.unshift(M[2])),P.length&&(y="/"+P.join(".")+y),this.hostname=L.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),B||(this.hostname=n.toASCII(this.hostname));var F=this.port?":"+this.port:"",q=this.hostname||"";this.host=q+F,this.href+=this.host,B&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!f[k])for(O=0,R=d.length;O<R;O++){var D=d[O];if(-1!==y.indexOf(D)){var z=encodeURIComponent(D);z===D&&(z=escape(D)),y=y.split(D).join(z)}}var H=y.indexOf("#");-1!==H&&(this.hash=y.substr(H),y=y.slice(0,H));var K=y.indexOf("?");if(-1!==K?(this.search=y.substr(K),this.query=y.substr(K+1),_&&(this.query=g.parse(this.query)),y=y.slice(0,K)):_&&(this.search="",this.query={}),y&&(this.pathname=y),b[k]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var Y=this.search||"";this.path=F+Y}return this.href=this.format(),this},o.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var _=this.protocol||"",r=this.pathname||"",n=this.hash||"",o=!1,i="";this.host?o=t+this.host:this.hostname&&(o=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&e.isObject(this.query)&&Object.keys(this.query).length&&(i=g.stringify(this.query));var a=this.search||i&&"?"+i||"";return _&&":"!==_.substr(-1)&&(_+=":"),this.slashes||(!_||b[_])&&!1!==o?(o="//"+(o||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):o||(o=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),_+o+(r=r.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+n},o.prototype.resolve=function(t){return this.resolveObject(y(t,!1,!0)).format()},o.prototype.resolveObject=function(t){if(e.isString(t)){var _=new o;_.parse(t,!1,!0),t=_}for(var r=new o,n=Object.keys(this),i=0;i<n.length;i++){var a=n[i];r[a]=this[a]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var s=Object.keys(t),c=0;c<s.length;c++){var d=s[c];"protocol"!==d&&(r[d]=t[d])}return b[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!b[t.protocol]){for(var p=Object.keys(t),u=0;u<p.length;u++){var l=p[u];r[l]=t[l]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||h[t.protocol])r.pathname=t.pathname;else{for(var w=(t.pathname||"").split("/");w.length&&!(t.host=w.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==w[0]&&w.unshift(""),w.length<2&&w.unshift(""),r.pathname=w.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var f=r.pathname||"",g=r.search||"";r.path=f+g}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),m=t.host||t.pathname&&"/"===t.pathname.charAt(0),v=m||y||r.host&&t.pathname,k=v,x=r.pathname&&r.pathname.split("/")||[],j=(w=t.pathname&&t.pathname.split("/")||[],r.protocol&&!b[r.protocol]);if(j&&(r.hostname="",r.port=null,r.host&&(""===x[0]?x[0]=r.host:x.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===w[0]?w[0]=t.host:w.unshift(t.host)),t.host=null),v=v&&(""===w[0]||""===x[0])),m)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,x=w;else if(w.length)x||(x=[]),x.pop(),x=x.concat(w),r.search=t.search,r.query=t.query;else if(!e.isNullOrUndefined(t.search))return j&&(r.hostname=r.host=x.shift(),(B=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=B.shift(),r.host=r.hostname=B.shift())),r.search=t.search,r.query=t.query,e.isNull(r.pathname)&&e.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r;if(!x.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var A=x.slice(-1)[0],E=(r.host||t.host||x.length>1)&&("."===A||".."===A)||""===A,O=0,S=x.length;S>=0;S--)"."===(A=x[S])?x.splice(S,1):".."===A?(x.splice(S,1),O++):O&&(x.splice(S,1),O--);if(!v&&!k)for(;O--;O)x.unshift("..");!v||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),E&&"/"!==x.join("/").substr(-1)&&x.push("");var B,C=""===x[0]||x[0]&&"/"===x[0].charAt(0);return j&&(r.hostname=r.host=C?"":x.length?x.shift():"",(B=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=B.shift(),r.host=r.hostname=B.shift())),(v=v||r.host&&x.length)&&!C&&x.unshift(""),x.length?r.pathname=x.join("/"):(r.pathname=null,r.path=null),e.isNull(r.pathname)&&e.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},o.prototype.parseHost=function(){var t=this.host,_=a.exec(t);_&&(":"!==(_=_[0])&&(this.port=_.substr(1)),t=t.substr(0,t.length-_.length)),t&&(this.hostname=t)}},2502:function(t){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},2323:function(t){t.exports=XMLHttpRequest},3885:function(t,_,r){"use strict";var n=r.w[t.id];t.exports=n,r(8263),n[""]()},6889:function(t,_,r){"use strict";var n=r.w[t.id];t.exports=n,r(7019),n[""]()},1985:function(t,_,r){"use strict";var n=r.w[t.id];t.exports=n,r(6035),n[""]()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,